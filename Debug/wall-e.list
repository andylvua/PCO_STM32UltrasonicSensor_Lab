
wall-e.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c08  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000810  08008da8  08008da8  00018da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095b8  080095b8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080095b8  080095b8  000195b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095c0  080095c0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095c0  080095c0  000195c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095c4  080095c4  000195c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080095c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000874  20000090  08009658  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000904  08009658  00020904  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b735  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ee3  00000000  00000000  0003b7f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f8  00000000  00000000  0003f6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001568  00000000  00000000  00040dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab96  00000000  00000000  00042338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bbf5  00000000  00000000  0005cece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009719d  00000000  00000000  00078ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010fc60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065b0  00000000  00000000  0010fcb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008d90 	.word	0x08008d90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08008d90 	.word	0x08008d90

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <LCD5110_refresh>:
	LCD5110_canvas_t def_scr;
} LCD5110_display;


inline void LCD5110_refresh(LCD5110_display* lcd_conf)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	LCD5110_refresh_ll(&lcd_conf->hw_conf);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4618      	mov	r0, r3
 8000590:	f000 fbdb 	bl	8000d4a <LCD5110_refresh_ll>
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <LCD5110_set_cursor>:
void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf);

// Regarding inline -- C also lcd5110.c.
inline void LCD5110_set_cursor(int x, int y, LCD5110_display* lcd_conf)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
	LCD5110_wset_cursor(x, y, &lcd_conf->def_scr, lcd_conf);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	f503 7205 	add.w	r2, r3, #532	; 0x214
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	68b9      	ldr	r1, [r7, #8]
 80005b2:	68f8      	ldr	r0, [r7, #12]
 80005b4:	f000 f880 	bl	80006b8 <LCD5110_wset_cursor>
}
 80005b8:	bf00      	nop
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <LCD5110_clear_scr>:
inline point_t LCD5110_get_cursor(LCD5110_display* lcd_conf)
{
	return LCD5110_wget_cursor(&lcd_conf->def_scr, lcd_conf);
}

inline void LCD5110_clear_scr(LCD5110_display* lcd_conf){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	LCD5110_clrscr(&lcd_conf->hw_conf);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 f95f 	bl	800088e <LCD5110_clrscr>
	LCD5110_set_cursor(0, 0, lcd_conf);
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	2100      	movs	r1, #0
 80005d4:	2000      	movs	r0, #0
 80005d6:	f7ff ffe1 	bl	800059c <LCD5110_set_cursor>
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <LCD5110_print>:

void LCD5110_wprint(const char* str, int color,
						LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
int LCD5110_wprintf( LCD5110_display* lcd_conf, int color, LCD5110_canvas_t* win, char *fmt, ...);

inline void LCD5110_print(const char* str, int color, LCD5110_display* lcd_conf){
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b084      	sub	sp, #16
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	60f8      	str	r0, [r7, #12]
 80005ea:	60b9      	str	r1, [r7, #8]
 80005ec:	607a      	str	r2, [r7, #4]
	LCD5110_wprint(str, color, &lcd_conf->def_scr, lcd_conf);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	f503 7205 	add.w	r2, r3, #532	; 0x214
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	68b9      	ldr	r1, [r7, #8]
 80005f8:	68f8      	ldr	r0, [r7, #12]
 80005fa:	f000 f893 	bl	8000724 <LCD5110_wprint>
}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <LCD5110_wputchar>:
	LCD5110_drawBitmap(px, py, fontpointer + ch * base_font_width,
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}

void LCD5110_wputchar(int px, int py, char ch, int color,
		LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 8000608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800060a:	b08b      	sub	sp, #44	; 0x2c
 800060c:	af04      	add	r7, sp, #16
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	60b9      	str	r1, [r7, #8]
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	4613      	mov	r3, r2
 8000616:	71fb      	strb	r3, [r7, #7]
	if (win->cursor.y < 0 || win->cursor.x < 0)
 8000618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800061a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800061e:	2b00      	cmp	r3, #0
 8000620:	db41      	blt.n	80006a6 <LCD5110_wputchar+0x9e>
 8000622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000624:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000628:	2b00      	cmp	r3, #0
 800062a:	db3c      	blt.n	80006a6 <LCD5110_wputchar+0x9e>
		return;
	if ( win->cursor.x + base_font_width > win->frame.width ||
 800062c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800062e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000632:	461a      	mov	r2, r3
 8000634:	2306      	movs	r3, #6
 8000636:	4413      	add	r3, r2
 8000638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800063a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800063e:	4293      	cmp	r3, r2
 8000640:	d833      	bhi.n	80006aa <LCD5110_wputchar+0xa2>
		 win->cursor.y + base_font_height > win->frame.height )
 8000642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000644:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000648:	461a      	mov	r2, r3
 800064a:	2308      	movs	r3, #8
 800064c:	4413      	add	r3, r2
 800064e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000650:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
	if ( win->cursor.x + base_font_width > win->frame.width ||
 8000654:	4293      	cmp	r3, r2
 8000656:	d828      	bhi.n	80006aa <LCD5110_wputchar+0xa2>
		return;
//! TODO: Print part of char
	const unsigned char *fontpointer = base_font;
 8000658:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <LCD5110_wputchar+0xac>)
 800065a:	617b      	str	r3, [r7, #20]
	LCD5110_drawBitmap(px + win->frame.x0, py + win->frame.y0, fontpointer + ch * base_font_width,
 800065c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800065e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000662:	461a      	mov	r2, r3
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	18d0      	adds	r0, r2, r3
 8000668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800066a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800066e:	461a      	mov	r2, r3
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	18d1      	adds	r1, r2, r3
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	2206      	movs	r2, #6
 8000678:	fb02 f303 	mul.w	r3, r2, r3
 800067c:	697a      	ldr	r2, [r7, #20]
 800067e:	441a      	add	r2, r3
 8000680:	2306      	movs	r3, #6
 8000682:	461e      	mov	r6, r3
 8000684:	2308      	movs	r3, #8
 8000686:	461c      	mov	r4, r3
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	bf0c      	ite	eq
 800068e:	2301      	moveq	r3, #1
 8000690:	2300      	movne	r3, #0
 8000692:	b2db      	uxtb	r3, r3
 8000694:	461d      	mov	r5, r3
 8000696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000698:	9302      	str	r3, [sp, #8]
 800069a:	9501      	str	r5, [sp, #4]
 800069c:	9400      	str	r4, [sp, #0]
 800069e:	4633      	mov	r3, r6
 80006a0:	f000 f950 	bl	8000944 <LCD5110_drawBitmap>
 80006a4:	e002      	b.n	80006ac <LCD5110_wputchar+0xa4>
		return;
 80006a6:	bf00      	nop
 80006a8:	e000      	b.n	80006ac <LCD5110_wputchar+0xa4>
		return;
 80006aa:	bf00      	nop
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}
 80006ac:	371c      	adds	r7, #28
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006b2:	bf00      	nop
 80006b4:	08008e5c 	.word	0x08008e5c

080006b8 <LCD5110_wset_cursor>:
	LCD5110_wclear_str(x, y, len, color, &lcd_conf->def_scr, lcd_conf);
}


void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
 80006c4:	603b      	str	r3, [r7, #0]
	win->cursor.x = x;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	b21a      	sxth	r2, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	811a      	strh	r2, [r3, #8]
	win->cursor.y = y;
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	b21a      	sxth	r2, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	815a      	strh	r2, [r3, #10]
}
 80006d6:	bf00      	nop
 80006d8:	3714      	adds	r7, #20
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr

080006e2 <LCD5110_wendl>:

point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf){
	return win->cursor;
}

void LCD5110_wendl(LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b082      	sub	sp, #8
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
 80006ea:	6039      	str	r1, [r7, #0]
	win->cursor.y += base_font_height + 1;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	2308      	movs	r3, #8
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	4413      	add	r3, r2
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	3301      	adds	r3, #1
 80006fe:	b29b      	uxth	r3, r3
 8000700:	b21a      	sxth	r2, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	815a      	strh	r2, [r3, #10]
	win->cursor.x = 2;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2202      	movs	r2, #2
 800070a:	811a      	strh	r2, [r3, #8]
	if (win->refresh_on_endl)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	7b1b      	ldrb	r3, [r3, #12]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d002      	beq.n	800071a <LCD5110_wendl+0x38>
		LCD5110_refresh(lcd_conf);
 8000714:	6838      	ldr	r0, [r7, #0]
 8000716:	f7ff ff35 	bl	8000584 <LCD5110_refresh>
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <LCD5110_wprint>:



void LCD5110_wprint(const char* str, int color, LCD5110_canvas_t* win,
		LCD5110_display* lcd_conf) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af02      	add	r7, sp, #8
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
 8000730:	603b      	str	r3, [r7, #0]
	while (*str != 0) {
 8000732:	e053      	b.n	80007dc <LCD5110_wprint+0xb8>
		if (*str != '\n') {
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b0a      	cmp	r3, #10
 800073a:	d010      	beq.n	800075e <LCD5110_wprint+0x3a>
			LCD5110_wputchar(win->cursor.x, win->cursor.y, *str, color, win, lcd_conf);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000742:	4618      	mov	r0, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800074a:	4619      	mov	r1, r3
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	781a      	ldrb	r2, [r3, #0]
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	9301      	str	r3, [sp, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	f7ff ff55 	bl	8000608 <LCD5110_wputchar>
		}
		win->cursor.x += base_font_width;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000764:	b29a      	uxth	r2, r3
 8000766:	2306      	movs	r3, #6
 8000768:	b29b      	uxth	r3, r3
 800076a:	4413      	add	r3, r2
 800076c:	b29b      	uxth	r3, r3
 800076e:	b21a      	sxth	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	811a      	strh	r2, [r3, #8]

		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800077a:	461a      	mov	r2, r3
 800077c:	2306      	movs	r3, #6
 800077e:	4413      	add	r3, r2
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000786:	4293      	cmp	r3, r2
 8000788:	d904      	bls.n	8000794 <LCD5110_wprint+0x70>
				*(str + 1) != '\n') || *str == '\n')
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	3301      	adds	r3, #1
 800078e:	781b      	ldrb	r3, [r3, #0]
		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 8000790:	2b0a      	cmp	r3, #10
 8000792:	d103      	bne.n	800079c <LCD5110_wprint+0x78>
				*(str + 1) != '\n') || *str == '\n')
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b0a      	cmp	r3, #10
 800079a:	d111      	bne.n	80007c0 <LCD5110_wprint+0x9c>
		{
			LCD5110_wendl(win, lcd_conf);
 800079c:	6839      	ldr	r1, [r7, #0]
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f7ff ff9f 	bl	80006e2 <LCD5110_wendl>
			if( isspace(*(str + 1)) )
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	3301      	adds	r3, #1
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	3301      	adds	r3, #1
 80007ac:	4a10      	ldr	r2, [pc, #64]	; (80007f0 <LCD5110_wprint+0xcc>)
 80007ae:	4413      	add	r3, r2
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	f003 0308 	and.w	r3, r3, #8
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d002      	beq.n	80007c0 <LCD5110_wprint+0x9c>
				++str;
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	3301      	adds	r3, #1
 80007be:	60fb      	str	r3, [r7, #12]
		}
		if (win->cursor.y + base_font_height > win->frame.height)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80007c6:	461a      	mov	r2, r3
 80007c8:	2308      	movs	r3, #8
 80007ca:	4413      	add	r3, r2
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d807      	bhi.n	80007e6 <LCD5110_wprint+0xc2>
			break;
		str++;
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	3301      	adds	r3, #1
 80007da:	60fb      	str	r3, [r7, #12]
	while (*str != 0) {
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d1a7      	bne.n	8000734 <LCD5110_wprint+0x10>

	}
}
 80007e4:	e000      	b.n	80007e8 <LCD5110_wprint+0xc4>
			break;
 80007e6:	bf00      	nop
}
 80007e8:	bf00      	nop
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	08009484 	.word	0x08009484

080007f4 <LCD5110_printf>:
	return res;
}


int LCD5110_printf( LCD5110_display* lcd_conf, int color, char *fmt, ...)
{
 80007f4:	b40c      	push	{r2, r3}
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b09e      	sub	sp, #120	; 0x78
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
 80007fe:	6039      	str	r1, [r7, #0]
	char buf[100];
	int res;

	va_list vargs;
	va_start(vargs, fmt);
 8000800:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000804:	60fb      	str	r3, [r7, #12]

	res = vsnprintf(buf, sizeof(buf), fmt, vargs);
 8000806:	f107 0010 	add.w	r0, r7, #16
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000810:	2164      	movs	r1, #100	; 0x64
 8000812:	f007 ff51 	bl	80086b8 <vsniprintf>
 8000816:	6778      	str	r0, [r7, #116]	; 0x74
	LCD5110_print(buf, color, lcd_conf);
 8000818:	f107 0310 	add.w	r3, r7, #16
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	6839      	ldr	r1, [r7, #0]
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fede 	bl	80005e2 <LCD5110_print>

	if (lcd_conf->def_scr.refresh_on_endl)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800082c:	2b00      	cmp	r3, #0
 800082e:	d002      	beq.n	8000836 <LCD5110_printf+0x42>
		LCD5110_refresh(lcd_conf);
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f7ff fea7 	bl	8000584 <LCD5110_refresh>

	va_end(vargs);

	return res;
 8000836:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8000838:	4618      	mov	r0, r3
 800083a:	3778      	adds	r7, #120	; 0x78
 800083c:	46bd      	mov	sp, r7
 800083e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000842:	b002      	add	sp, #8
 8000844:	4770      	bx	lr

08000846 <xy_to_pix>:
	unsigned int adr;
	unsigned char mask;
} pix_coord;

static inline pix_coord xy_to_pix(int x, int y)
{
 8000846:	b480      	push	{r7}
 8000848:	b087      	sub	sp, #28
 800084a:	af00      	add	r7, sp, #0
 800084c:	60f8      	str	r0, [r7, #12]
 800084e:	60b9      	str	r1, [r7, #8]
 8000850:	607a      	str	r2, [r7, #4]
	pix_coord res;
	res.adr = (y >> 3) * LCD_WIDTH + x;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	10db      	asrs	r3, r3, #3
 8000856:	2254      	movs	r2, #84	; 0x54
 8000858:	fb03 f202 	mul.w	r2, r3, r2
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	4413      	add	r3, r2
 8000860:	613b      	str	r3, [r7, #16]
	res.mask = (1 << (y & 0x07));
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f003 0307 	and.w	r3, r3, #7
 8000868:	2201      	movs	r2, #1
 800086a:	fa02 f303 	lsl.w	r3, r2, r3
 800086e:	b2db      	uxtb	r3, r3
 8000870:	753b      	strb	r3, [r7, #20]

	return res;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	461a      	mov	r2, r3
 8000876:	f107 0310 	add.w	r3, r7, #16
 800087a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800087e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000882:	68f8      	ldr	r0, [r7, #12]
 8000884:	371c      	adds	r7, #28
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <LCD5110_clrscr>:

void LCD5110_clrscr(LCD5110_conf* lcd_conf) {
 800088e:	b480      	push	{r7}
 8000890:	b085      	sub	sp, #20
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	e008      	b.n	80008ae <LCD5110_clrscr+0x20>
		lcd_conf->video_buffer[i] = 0;
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	4413      	add	r3, r2
 80008a2:	331c      	adds	r3, #28
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	3301      	adds	r3, #1
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80008b4:	dbf2      	blt.n	800089c <LCD5110_clrscr+0xe>
	}
}
 80008b6:	bf00      	nop
 80008b8:	bf00      	nop
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <LCD5110_putpix>:
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
		lcd_conf->video_buffer[i] = 0xFF;
	}
}

void LCD5110_putpix(int x, int y, int color, LCD5110_conf* lcd_conf) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
 80008d0:	603b      	str	r3, [r7, #0]
	if ( (x < 0) || (y < 0) || (x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db31      	blt.n	800093c <LCD5110_putpix+0x78>
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	db2e      	blt.n	800093c <LCD5110_putpix+0x78>
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	2b53      	cmp	r3, #83	; 0x53
 80008e2:	dc2b      	bgt.n	800093c <LCD5110_putpix+0x78>
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	2b2f      	cmp	r3, #47	; 0x2f
 80008e8:	dc28      	bgt.n	800093c <LCD5110_putpix+0x78>
		return;
	pix_coord  c = xy_to_pix(x, y);
 80008ea:	f107 0310 	add.w	r3, r7, #16
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	68f9      	ldr	r1, [r7, #12]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ffa7 	bl	8000846 <xy_to_pix>

	if (color)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d00c      	beq.n	8000918 <LCD5110_putpix+0x54>
		lcd_conf->video_buffer[c.adr] |= c.mask;
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	683a      	ldr	r2, [r7, #0]
 8000902:	4413      	add	r3, r2
 8000904:	7f19      	ldrb	r1, [r3, #28]
 8000906:	7d3a      	ldrb	r2, [r7, #20]
 8000908:	693b      	ldr	r3, [r7, #16]
 800090a:	430a      	orrs	r2, r1
 800090c:	b2d1      	uxtb	r1, r2
 800090e:	683a      	ldr	r2, [r7, #0]
 8000910:	4413      	add	r3, r2
 8000912:	460a      	mov	r2, r1
 8000914:	771a      	strb	r2, [r3, #28]
 8000916:	e012      	b.n	800093e <LCD5110_putpix+0x7a>
	else
		lcd_conf->video_buffer[c.adr] &= ~c.mask;
 8000918:	693b      	ldr	r3, [r7, #16]
 800091a:	683a      	ldr	r2, [r7, #0]
 800091c:	4413      	add	r3, r2
 800091e:	7f1b      	ldrb	r3, [r3, #28]
 8000920:	b25a      	sxtb	r2, r3
 8000922:	7d3b      	ldrb	r3, [r7, #20]
 8000924:	b25b      	sxtb	r3, r3
 8000926:	43db      	mvns	r3, r3
 8000928:	b25b      	sxtb	r3, r3
 800092a:	4013      	ands	r3, r2
 800092c:	b25a      	sxtb	r2, r3
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	b2d1      	uxtb	r1, r2
 8000932:	683a      	ldr	r2, [r7, #0]
 8000934:	4413      	add	r3, r2
 8000936:	460a      	mov	r2, r1
 8000938:	771a      	strb	r2, [r3, #28]
 800093a:	e000      	b.n	800093e <LCD5110_putpix+0x7a>
		return;
 800093c:	bf00      	nop
}
 800093e:	3718      	adds	r7, #24
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <LCD5110_drawBitmap>:
}

//! TODO: optimize! Slow!
//! TODO: add different bitmap modes -- OR/AND/XOR
void LCD5110_drawBitmap(int x, int y, const unsigned char* bitmap, int cols, int rows, int invert, LCD5110_conf* lcd_conf)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
 8000950:	603b      	str	r3, [r7, #0]
	for(int cx=0; cx<cols; cx++)
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]
 8000956:	e042      	b.n	80009de <LCD5110_drawBitmap+0x9a>
	{
		for (int cy=0; cy<rows; cy++)
 8000958:	2300      	movs	r3, #0
 800095a:	61bb      	str	r3, [r7, #24]
 800095c:	e038      	b.n	80009d0 <LCD5110_drawBitmap+0x8c>
		{
			unsigned char temp = bitmap[(cy/8)*cols + cx];
 800095e:	69bb      	ldr	r3, [r7, #24]
 8000960:	2b00      	cmp	r3, #0
 8000962:	da00      	bge.n	8000966 <LCD5110_drawBitmap+0x22>
 8000964:	3307      	adds	r3, #7
 8000966:	10db      	asrs	r3, r3, #3
 8000968:	461a      	mov	r2, r3
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	fb03 f202 	mul.w	r2, r3, r2
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	4413      	add	r3, r2
 8000974:	461a      	mov	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	75fb      	strb	r3, [r7, #23]
			temp &= 1<<(cy%8);
 800097e:	69bb      	ldr	r3, [r7, #24]
 8000980:	425a      	negs	r2, r3
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	f002 0207 	and.w	r2, r2, #7
 800098a:	bf58      	it	pl
 800098c:	4253      	negpl	r3, r2
 800098e:	2201      	movs	r2, #1
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	b25a      	sxtb	r2, r3
 8000996:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800099a:	4013      	ands	r3, r2
 800099c:	b25b      	sxtb	r3, r3
 800099e:	75fb      	strb	r3, [r7, #23]
			LCD5110_putpix(x+cx, y+cy,  invert ? !temp : temp, lcd_conf);
 80009a0:	68fa      	ldr	r2, [r7, #12]
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	18d0      	adds	r0, r2, r3
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	69bb      	ldr	r3, [r7, #24]
 80009aa:	18d1      	adds	r1, r2, r3
 80009ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d007      	beq.n	80009c2 <LCD5110_drawBitmap+0x7e>
 80009b2:	7dfb      	ldrb	r3, [r7, #23]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	bf0c      	ite	eq
 80009b8:	2301      	moveq	r3, #1
 80009ba:	2300      	movne	r3, #0
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	461a      	mov	r2, r3
 80009c0:	e000      	b.n	80009c4 <LCD5110_drawBitmap+0x80>
 80009c2:	7dfa      	ldrb	r2, [r7, #23]
 80009c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009c6:	f7ff ff7d 	bl	80008c4 <LCD5110_putpix>
		for (int cy=0; cy<rows; cy++)
 80009ca:	69bb      	ldr	r3, [r7, #24]
 80009cc:	3301      	adds	r3, #1
 80009ce:	61bb      	str	r3, [r7, #24]
 80009d0:	69ba      	ldr	r2, [r7, #24]
 80009d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d4:	429a      	cmp	r2, r3
 80009d6:	dbc2      	blt.n	800095e <LCD5110_drawBitmap+0x1a>
	for(int cx=0; cx<cols; cx++)
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	3301      	adds	r3, #1
 80009dc:	61fb      	str	r3, [r7, #28]
 80009de:	69fa      	ldr	r2, [r7, #28]
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	429a      	cmp	r2, r3
 80009e4:	dbb8      	blt.n	8000958 <LCD5110_drawBitmap+0x14>
		}
	}
}
 80009e6:	bf00      	nop
 80009e8:	bf00      	nop
 80009ea:	3720      	adds	r7, #32
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <send_byte_to_LCD5110>:
#include <stdio.h>

#define SUPPRESS_WARNING(x) (void)x

static inline HAL_StatusTypeDef send_byte_to_LCD5110(uint8_t dat, LCD5110_conf* lcd_conf)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	6039      	str	r1, [r7, #0]
 80009fa:	71fb      	strb	r3, [r7, #7]
	//! HAL_SPI_Transmit takes care about waiting transmission to finish.
	//! Details: https://habrahabr.ru/post/276605/ -- do not turn command mode off
	//! before transmission finished. (Check BSY flag before DC_on/off, if directly
	//! manipulating SPIx_DR.
	return HAL_SPI_Transmit(lcd_conf->spi_handle, &dat, 1, 1000);
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	6818      	ldr	r0, [r3, #0]
 8000a00:	1df9      	adds	r1, r7, #7
 8000a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a06:	2201      	movs	r2, #1
 8000a08:	f003 fd79 	bl	80044fe <HAL_SPI_Transmit>
 8000a0c:	4603      	mov	r3, r0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <send_data_to_LCD5110>:

static inline HAL_StatusTypeDef send_data_to_LCD5110(uint8_t data[], uint16_t size, LCD5110_conf* lcd_conf)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b084      	sub	sp, #16
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	60f8      	str	r0, [r7, #12]
 8000a1e:	460b      	mov	r3, r1
 8000a20:	607a      	str	r2, [r7, #4]
 8000a22:	817b      	strh	r3, [r7, #10]
	return HAL_SPI_Transmit(lcd_conf->spi_handle, data, size, 1000);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6818      	ldr	r0, [r3, #0]
 8000a28:	897a      	ldrh	r2, [r7, #10]
 8000a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2e:	68f9      	ldr	r1, [r7, #12]
 8000a30:	f003 fd65 	bl	80044fe <HAL_SPI_Transmit>
 8000a34:	4603      	mov	r3, r0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <LCD5110_CE_off>:

static inline void LCD5110_CE_on(LCD5110_conf* lcd_conf) {
	SUPPRESS_WARNING(LCD5110_CE_on);
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_SET);
}
static inline void LCD5110_CE_off(LCD5110_conf* lcd_conf) {
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_RESET);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6898      	ldr	r0, [r3, #8]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	889b      	ldrh	r3, [r3, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	4619      	mov	r1, r3
 8000a52:	f001 fac7 	bl	8001fe4 <HAL_GPIO_WritePin>
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <LCD5110_DC_on>:
//! Data mode on
static inline void LCD5110_DC_on(LCD5110_conf* lcd_conf) {
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_SET);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6998      	ldr	r0, [r3, #24]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	8a9b      	ldrh	r3, [r3, #20]
 8000a6e:	2201      	movs	r2, #1
 8000a70:	4619      	mov	r1, r3
 8000a72:	f001 fab7 	bl	8001fe4 <HAL_GPIO_WritePin>
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <LCD5110_DC_off>:
//! Commands mode on
static inline void LCD5110_DC_off(LCD5110_conf* lcd_conf) {
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b082      	sub	sp, #8
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_RESET);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6998      	ldr	r0, [r3, #24]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	8a9b      	ldrh	r3, [r3, #20]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	4619      	mov	r1, r3
 8000a92:	f001 faa7 	bl	8001fe4 <HAL_GPIO_WritePin>
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <LCD5110_RST_on>:
static inline void LCD5110_RST_on(LCD5110_conf* lcd_conf) {
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_SET);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6918      	ldr	r0, [r3, #16]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	899b      	ldrh	r3, [r3, #12]
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f001 fa97 	bl	8001fe4 <HAL_GPIO_WritePin>
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <LCD5110_RST_off>:
static inline void LCD5110_RST_off(LCD5110_conf* lcd_conf) {
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b082      	sub	sp, #8
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_RESET);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6918      	ldr	r0, [r3, #16]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	899b      	ldrh	r3, [r3, #12]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	f001 fa87 	bl	8001fe4 <HAL_GPIO_WritePin>
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <LCD5110_set_function>:

#define FN_SET_MASK (1<<5)

//! Code: 0010 0PVH, accepts both 00100PVH and 0PVH, but no other.
static int LCD5110_set_function(uint8_t fn_byte, LCD5110_conf* lcd_conf)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	6039      	str	r1, [r7, #0]
 8000ae8:	71fb      	strb	r3, [r7, #7]
	if ( (fn_byte & ~FN_SET_MASK) > 7) //0b111
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	f023 0320 	bic.w	r3, r3, #32
 8000af0:	2b07      	cmp	r3, #7
 8000af2:	dd01      	ble.n	8000af8 <LCD5110_set_function+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_opcode;
 8000af4:	2301      	movs	r3, #1
 8000af6:	e008      	b.n	8000b0a <LCD5110_set_function+0x2c>
	}
	//printf("Seq: %i, dbg: %i \n", fn_byte | FN_SET_MASK, fn_byte );
	send_byte_to_LCD5110(fn_byte | FN_SET_MASK, lcd_conf);
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	f043 0320 	orr.w	r3, r3, #32
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	6839      	ldr	r1, [r7, #0]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff ff74 	bl	80009f0 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <LCD5110_set_mode_base>:

//! H==0
static int LCD5110_set_mode_base(LCD5110_modes mode_byte, LCD5110_conf* lcd_conf)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	4603      	mov	r3, r0
 8000b1a:	6039      	str	r1, [r7, #0]
 8000b1c:	71fb      	strb	r3, [r7, #7]
	if ( (mode_byte & (~LCD5110_INVERTED_MODE) ) != 0) //0b10x0y -- only possible values
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	f023 030d 	bic.w	r3, r3, #13
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <LCD5110_set_mode_base+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_dmode;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	e005      	b.n	8000b38 <LCD5110_set_mode_base+0x26>
	}
	//printf("Seq: %i\n", mode_byte);
	send_byte_to_LCD5110(mode_byte, lcd_conf);
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	6839      	ldr	r1, [r7, #0]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff5d 	bl	80009f0 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <LCD5110_set_voltage_ext>:

#define LCD5110_VOLTAGE_MASK (1<<7)

//! H==1
static int LCD5110_set_voltage_ext(uint8_t voltage, LCD5110_conf* lcd_conf)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	6039      	str	r1, [r7, #0]
 8000b4a:	71fb      	strb	r3, [r7, #7]
	if ( voltage > 127)
 8000b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	da01      	bge.n	8000b58 <LCD5110_set_voltage_ext+0x18>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_voltage;
 8000b54:	2303      	movs	r3, #3
 8000b56:	e008      	b.n	8000b6a <LCD5110_set_voltage_ext+0x2a>
	}
	//printf("Seq: %i\n", voltage | LCD5110_VOLTAGE_MASK);
	send_byte_to_LCD5110(voltage | LCD5110_VOLTAGE_MASK, lcd_conf);
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	6839      	ldr	r1, [r7, #0]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff ff44 	bl	80009f0 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <LCD5110_set_temp_coef_ext>:

#define LCD5110_TEMP_COEFF_MASK (1<<2)
//! H==1
static int LCD5110_set_temp_coef_ext(uint8_t TC, LCD5110_conf* lcd_conf)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	4603      	mov	r3, r0
 8000b7a:	6039      	str	r1, [r7, #0]
 8000b7c:	71fb      	strb	r3, [r7, #7]
	if ( TC > 3)
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	2b03      	cmp	r3, #3
 8000b82:	d901      	bls.n	8000b88 <LCD5110_set_temp_coef_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_TC;
 8000b84:	2304      	movs	r3, #4
 8000b86:	e008      	b.n	8000b9a <LCD5110_set_temp_coef_ext+0x28>
	}
	//printf("Seq: %i\n", TC | LCD5110_TEMP_COEFF_MASK);
	send_byte_to_LCD5110(TC | LCD5110_TEMP_COEFF_MASK, lcd_conf);
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	f043 0304 	orr.w	r3, r3, #4
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	6839      	ldr	r1, [r7, #0]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff ff2c 	bl	80009f0 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <LCD5110_set_bias_ext>:
}

#define LCD5110_BIAS_MASK (1<<4)
//! H==1
static int LCD5110_set_bias_ext(uint8_t bias, LCD5110_conf* lcd_conf)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	4603      	mov	r3, r0
 8000baa:	6039      	str	r1, [r7, #0]
 8000bac:	71fb      	strb	r3, [r7, #7]
	if ( bias > 7)
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	2b07      	cmp	r3, #7
 8000bb2:	d901      	bls.n	8000bb8 <LCD5110_set_bias_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_bias;
 8000bb4:	2305      	movs	r3, #5
 8000bb6:	e008      	b.n	8000bca <LCD5110_set_bias_ext+0x28>
	}
	//printf("Seq: %i\n", bias | LCD5110_BIAS_MASK);
	send_byte_to_LCD5110(bias | LCD5110_BIAS_MASK, lcd_conf);
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	f043 0310 	orr.w	r3, r3, #16
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	6839      	ldr	r1, [r7, #0]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff ff14 	bl	80009f0 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <LCD5110_set_X_base>:
#define LCD5110_SET_Y_BIT 6
#define LCD5110_SET_Y_BIT_MASK (1<<LCD5110_SET_Y_BIT)


static inline int LCD5110_set_X_base(int16_t x, LCD5110_conf* lcd_conf)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	4603      	mov	r3, r0
 8000bda:	6039      	str	r1, [r7, #0]
 8000bdc:	80fb      	strh	r3, [r7, #6]
	if(x<0 || x>LCD_WIDTH-1)
 8000bde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	db03      	blt.n	8000bee <LCD5110_set_X_base+0x1c>
 8000be6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bea:	2b53      	cmp	r3, #83	; 0x53
 8000bec:	dd01      	ble.n	8000bf2 <LCD5110_set_X_base+0x20>
		return LCD5110_bad_coordinate;
 8000bee:	2307      	movs	r3, #7
 8000bf0:	e00a      	b.n	8000c08 <LCD5110_set_X_base+0x36>
	send_byte_to_LCD5110(x | LCD5110_SET_X_BIT_MASK, lcd_conf);
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	b25b      	sxtb	r3, r3
 8000bf6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bfa:	b25b      	sxtb	r3, r3
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	6839      	ldr	r1, [r7, #0]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fef5 	bl	80009f0 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000c06:	2300      	movs	r3, #0
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <LCD5110_set_Y_base>:

//! Byte addresable!
static inline int LCD5110_set_Y_base(int16_t y, LCD5110_conf* lcd_conf)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	80fb      	strh	r3, [r7, #6]
	if(y<0 || y>LCD_HEIGHT/8-1) // Byte addressable!
 8000c1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	db03      	blt.n	8000c2c <LCD5110_set_Y_base+0x1c>
 8000c24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c28:	2b05      	cmp	r3, #5
 8000c2a:	dd01      	ble.n	8000c30 <LCD5110_set_Y_base+0x20>
		return LCD5110_bad_coordinate;
 8000c2c:	2307      	movs	r3, #7
 8000c2e:	e00a      	b.n	8000c46 <LCD5110_set_Y_base+0x36>
	send_byte_to_LCD5110(y | LCD5110_SET_Y_BIT_MASK, lcd_conf);
 8000c30:	88fb      	ldrh	r3, [r7, #6]
 8000c32:	b25b      	sxtb	r3, r3
 8000c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c38:	b25b      	sxtb	r3, r3
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	6839      	ldr	r1, [r7, #0]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fed6 	bl	80009f0 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <LCD5110_set_XY_base>:

static inline int LCD5110_set_XY_base(int16_t x, int16_t y, LCD5110_conf* lcd_conf)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b084      	sub	sp, #16
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	4603      	mov	r3, r0
 8000c56:	603a      	str	r2, [r7, #0]
 8000c58:	80fb      	strh	r3, [r7, #6]
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	80bb      	strh	r3, [r7, #4]
	int res;
	res = LCD5110_set_X_base(x, lcd_conf);
 8000c5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c62:	6839      	ldr	r1, [r7, #0]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ffb4 	bl	8000bd2 <LCD5110_set_X_base>
 8000c6a:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <LCD5110_set_XY_base+0x28>
		return res;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	e00c      	b.n	8000c90 <LCD5110_set_XY_base+0x42>
	res = LCD5110_set_Y_base(y, lcd_conf);
 8000c76:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c7a:	6839      	ldr	r1, [r7, #0]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ffc7 	bl	8000c10 <LCD5110_set_Y_base>
 8000c82:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <LCD5110_set_XY_base+0x40>
		return res;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	e000      	b.n	8000c90 <LCD5110_set_XY_base+0x42>

	return LCD5110_OK;
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <SPI_enable>:


static inline void SPI_enable(LCD5110_conf* lcd_conf)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	__HAL_SPI_ENABLE( (lcd_conf->spi_handle) );
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000cb2:	601a      	str	r2, [r3, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <LCD5110_init>:
int LCD5110_init(LCD5110_conf* 		lcd_conf,
				 LCD5110_modes 		dmode,
				 uint8_t 	  	    voltage,
				 uint8_t		    temp_coeff,
				 uint8_t		    bias
){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	4608      	mov	r0, r1
 8000cca:	4611      	mov	r1, r2
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4603      	mov	r3, r0
 8000cd0:	70fb      	strb	r3, [r7, #3]
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	70bb      	strb	r3, [r7, #2]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	707b      	strb	r3, [r7, #1]
	SPI_enable(lcd_conf);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff ffdc 	bl	8000c98 <SPI_enable>
	LCD5110_CE_off(lcd_conf);
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff feac 	bl	8000a3e <LCD5110_CE_off>

	//LCD5110_VCC_on();
	LCD5110_RST_off(lcd_conf); // Minimum 100 ns, maximum not limited (tbl. 12 AC CHARACTERISTICS, pic. 16)
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff fee9 	bl	8000abe <LCD5110_RST_off>
	volatile int i = 100; // HAL_Delay() too slow, do not want to depend on some delay_us here.
 8000cec:	2364      	movs	r3, #100	; 0x64
 8000cee:	60fb      	str	r3, [r7, #12]
	while (--i){}
 8000cf0:	bf00      	nop
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d1fa      	bne.n	8000cf2 <LCD5110_init+0x32>
	LCD5110_RST_on(lcd_conf);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff fece 	bl	8000a9e <LCD5110_RST_on>

	LCD5110_DC_off(lcd_conf); // Commands mode on
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff febb 	bl	8000a7e <LCD5110_DC_off>
	//! Extended commands (bit H==1), horizontal addressing
	LCD5110_set_function(LCD5110_FN_SET_H_MASK, lcd_conf);
 8000d08:	6879      	ldr	r1, [r7, #4]
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	f7ff fee7 	bl	8000ade <LCD5110_set_function>
	//! Set display voltage
	LCD5110_set_voltage_ext(voltage, lcd_conf);
 8000d10:	78bb      	ldrb	r3, [r7, #2]
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff13 	bl	8000b40 <LCD5110_set_voltage_ext>
	//! Set temperature coefficient
	LCD5110_set_temp_coef_ext(temp_coeff, lcd_conf);
 8000d1a:	787b      	ldrb	r3, [r7, #1]
 8000d1c:	6879      	ldr	r1, [r7, #4]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ff27 	bl	8000b72 <LCD5110_set_temp_coef_ext>
	//! Set bias
	LCD5110_set_bias_ext(bias, lcd_conf);
 8000d24:	7e3b      	ldrb	r3, [r7, #24]
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff3a 	bl	8000ba2 <LCD5110_set_bias_ext>


	//! Basic commands (bit H==0), horizontal addressing
	LCD5110_set_function(0, lcd_conf);
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	2000      	movs	r0, #0
 8000d32:	f7ff fed4 	bl	8000ade <LCD5110_set_function>
	//! Set display mode
	LCD5110_set_mode_base(dmode, lcd_conf);
 8000d36:	78fb      	ldrb	r3, [r7, #3]
 8000d38:	6879      	ldr	r1, [r7, #4]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fee9 	bl	8000b12 <LCD5110_set_mode_base>

	return LCD5110_OK;
 8000d40:	2300      	movs	r3, #0
	//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <LCD5110_refresh_ll>:

//
void LCD5110_refresh_ll(LCD5110_conf* lcd_conf)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
	LCD5110_CE_off(lcd_conf);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff fe73 	bl	8000a3e <LCD5110_CE_off>
	LCD5110_DC_off(lcd_conf);
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff fe90 	bl	8000a7e <LCD5110_DC_off>
	LCD5110_set_XY_base(0, 0, lcd_conf);
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	2100      	movs	r1, #0
 8000d62:	2000      	movs	r0, #0
 8000d64:	f7ff ff73 	bl	8000c4e <LCD5110_set_XY_base>
	LCD5110_DC_on(lcd_conf);
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff fe78 	bl	8000a5e <LCD5110_DC_on>

	send_data_to_LCD5110(lcd_conf->video_buffer, LCD_HEIGHT*LCD_WIDTH/8, lcd_conf);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	331c      	adds	r3, #28
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fe4c 	bl	8000a16 <send_data_to_LCD5110>
//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <HAL_TIM_PeriodElapsedCallback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10) {
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a06      	ldr	r2, [pc, #24]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d104      	bne.n	8000da4 <HAL_TIM_PeriodElapsedCallback+0x1c>
		++tim10_overflows;
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000da2:	6013      	str	r3, [r2, #0]
	}
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	40014400 	.word	0x40014400
 8000db4:	20000208 	.word	0x20000208

08000db8 <TIM10_reinit>:

void TIM10_reinit() {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim10);
 8000dbc:	480c      	ldr	r0, [pc, #48]	; (8000df0 <TIM10_reinit+0x38>)
 8000dbe:	f003 fdf4 	bl	80049aa <HAL_TIM_Base_Stop>
	__HAL_TIM_SET_PRESCALER(&htim10, (SystemCoreClockInMHz - 1));
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <TIM10_reinit+0x3c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a0c      	ldr	r2, [pc, #48]	; (8000df8 <TIM10_reinit+0x40>)
 8000dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dcc:	0c9a      	lsrs	r2, r3, #18
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <TIM10_reinit+0x38>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	3a01      	subs	r2, #1
 8000dd4:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <TIM10_reinit+0x38>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	625a      	str	r2, [r3, #36]	; 0x24
	tim10_overflows = 0;
 8000dde:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <TIM10_reinit+0x44>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim10);
 8000de4:	4802      	ldr	r0, [pc, #8]	; (8000df0 <TIM10_reinit+0x38>)
 8000de6:	f003 fe07 	bl	80049f8 <HAL_TIM_Base_Start_IT>
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200001b0 	.word	0x200001b0
 8000df4:	20000000 	.word	0x20000000
 8000df8:	431bde83 	.word	0x431bde83
 8000dfc:	20000208 	.word	0x20000208

08000e00 <get_tim10_us>:

uint32_t get_tim10_us() {
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
	__HAL_TIM_DISABLE_IT(&htim10, TIM_IT_UPDATE);
 8000e06:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <get_tim10_us+0x54>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	68da      	ldr	r2, [r3, #12]
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <get_tim10_us+0x54>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f022 0201 	bic.w	r2, r2, #1
 8000e14:	60da      	str	r2, [r3, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e16:	b672      	cpsid	i
}
 8000e18:	bf00      	nop
	__disable_irq();
	uint32_t curr_time = tim10_overflows * COUNTER_PERIOD + __HAL_TIM_GET_COUNTER(&htim10);
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <get_tim10_us+0x58>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e22:	fb03 f202 	mul.w	r2, r3, r2
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <get_tim10_us+0x54>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2c:	4413      	add	r3, r2
 8000e2e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8000e30:	b662      	cpsie	i
}
 8000e32:	bf00      	nop
	__enable_irq();
	__HAL_TIM_ENABLE_IT(&htim10, TIM_IT_UPDATE);
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <get_tim10_us+0x54>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	68da      	ldr	r2, [r3, #12]
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <get_tim10_us+0x54>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f042 0201 	orr.w	r2, r2, #1
 8000e42:	60da      	str	r2, [r3, #12]

	return curr_time;
 8000e44:	687b      	ldr	r3, [r7, #4]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	200001b0 	.word	0x200001b0
 8000e58:	20000208 	.word	0x20000208

08000e5c <udelay_TIM10>:

void udelay_TIM10(uint32_t useconds) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	uint32_t start = get_tim10_us();
 8000e64:	f7ff ffcc 	bl	8000e00 <get_tim10_us>
 8000e68:	60f8      	str	r0, [r7, #12]
	while (get_tim10_us() < start + useconds) {}
 8000e6a:	bf00      	nop
 8000e6c:	f7ff ffc8 	bl	8000e00 <get_tim10_us>
 8000e70:	4601      	mov	r1, r0
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4413      	add	r3, r2
 8000e78:	4299      	cmp	r1, r3
 8000e7a:	d3f7      	bcc.n	8000e6c <udelay_TIM10+0x10>
}
 8000e7c:	bf00      	nop
 8000e7e:	bf00      	nop
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin != ECHOI_Pin) {
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e98:	d12e      	bne.n	8000ef8 <HAL_GPIO_EXTI_Callback+0x70>
		return;
	}

	switch (state) {
 8000e9a:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <HAL_GPIO_EXTI_Callback+0x78>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d002      	beq.n	8000eaa <HAL_GPIO_EXTI_Callback+0x22>
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d009      	beq.n	8000ebc <HAL_GPIO_EXTI_Callback+0x34>
 8000ea8:	e022      	b.n	8000ef0 <HAL_GPIO_EXTI_Callback+0x68>
	case WAITING_FOR_ECHO_START_S: {
		echo_start =  get_tim10_us();
 8000eaa:	f7ff ffa9 	bl	8000e00 <get_tim10_us>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	4a14      	ldr	r2, [pc, #80]	; (8000f04 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000eb2:	6013      	str	r3, [r2, #0]
		state = WAITING_FOR_ECHO_STOP_S;
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <HAL_GPIO_EXTI_Callback+0x78>)
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	701a      	strb	r2, [r3, #0]
		break;
 8000eba:	e01e      	b.n	8000efa <HAL_GPIO_EXTI_Callback+0x72>
	}

	case WAITING_FOR_ECHO_STOP_S: {
		echo_finish = get_tim10_us();
 8000ebc:	f7ff ffa0 	bl	8000e00 <get_tim10_us>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	4a11      	ldr	r2, [pc, #68]	; (8000f08 <HAL_GPIO_EXTI_Callback+0x80>)
 8000ec4:	6013      	str	r3, [r2, #0]
		measured_time = echo_finish - echo_start;
 8000ec6:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <HAL_GPIO_EXTI_Callback+0x80>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <HAL_GPIO_EXTI_Callback+0x84>)
 8000ed2:	6013      	str	r3, [r2, #0]

		if (measured_time >= MEASURING_TIMEOUT_US) {
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <HAL_GPIO_EXTI_Callback+0x84>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f249 426f 	movw	r2, #37999	; 0x946f
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d903      	bls.n	8000ee8 <HAL_GPIO_EXTI_Callback+0x60>
			state = ECHO_TIMEOUT_S;
 8000ee0:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <HAL_GPIO_EXTI_Callback+0x78>)
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	701a      	strb	r2, [r3, #0]
			break;
 8000ee6:	e008      	b.n	8000efa <HAL_GPIO_EXTI_Callback+0x72>
		}

		state = READING_DATA_S;
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <HAL_GPIO_EXTI_Callback+0x78>)
 8000eea:	2204      	movs	r2, #4
 8000eec:	701a      	strb	r2, [r3, #0]
		break;
 8000eee:	e004      	b.n	8000efa <HAL_GPIO_EXTI_Callback+0x72>
	}

	default:
		state = ERROR_S;
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <HAL_GPIO_EXTI_Callback+0x78>)
 8000ef2:	2205      	movs	r2, #5
 8000ef4:	701a      	strb	r2, [r3, #0]
 8000ef6:	e000      	b.n	8000efa <HAL_GPIO_EXTI_Callback+0x72>
		return;
 8000ef8:	bf00      	nop
	}
}
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	200001f8 	.word	0x200001f8
 8000f04:	200001fc 	.word	0x200001fc
 8000f08:	20000200 	.word	0x20000200
 8000f0c:	20000204 	.word	0x20000204

08000f10 <trig_sensor.0>:
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
  inline void trig_sensor() {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	f8c7 c004 	str.w	ip, [r7, #4]
	  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f20:	4807      	ldr	r0, [pc, #28]	; (8000f40 <trig_sensor.0+0x30>)
 8000f22:	f001 f85f 	bl	8001fe4 <HAL_GPIO_WritePin>
	  udelay_TIM10(TRIG_TIME_US);
 8000f26:	2010      	movs	r0, #16
 8000f28:	f7ff ff98 	bl	8000e5c <udelay_TIM10>
	  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f32:	4803      	ldr	r0, [pc, #12]	; (8000f40 <trig_sensor.0+0x30>)
 8000f34:	f001 f856 	bl	8001fe4 <HAL_GPIO_WritePin>
  }
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40020c00 	.word	0x40020c00

08000f44 <main>:
{
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000f4a:	af02      	add	r7, sp, #8
int main(void)
 8000f4c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000f50:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f54:	f000 fd1a 	bl	800198c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f58:	f000 f8d4 	bl	8001104 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f5c:	f000 f9f8 	bl	8001350 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f60:	f000 f938 	bl	80011d4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000f64:	f000 f964 	bl	8001230 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000f68:	f006 ff40 	bl	8007dec <MX_USB_HOST_Init>
  MX_SPI2_Init();
 8000f6c:	f000 f996 	bl	800129c <MX_SPI2_Init>
  MX_TIM10_Init();
 8000f70:	f000 f9ca 	bl	8001308 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  LCD5110_display lcd1;

  lcd1.hw_conf.spi_handle = &hspi2;
 8000f74:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000f78:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8000f7c:	4a56      	ldr	r2, [pc, #344]	; (80010d8 <main+0x194>)
 8000f7e:	601a      	str	r2, [r3, #0]
  lcd1.hw_conf.spi_cs_pin =  LCD_CE_Pin;
 8000f80:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000f84:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8000f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f8c:	809a      	strh	r2, [r3, #4]
  lcd1.hw_conf.spi_cs_port = LCD_CE_GPIO_Port;
 8000f8e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000f92:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8000f96:	4a51      	ldr	r2, [pc, #324]	; (80010dc <main+0x198>)
 8000f98:	609a      	str	r2, [r3, #8]
  lcd1.hw_conf.rst_pin =  LCD_RST_Pin;
 8000f9a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000f9e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8000fa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fa6:	819a      	strh	r2, [r3, #12]
  lcd1.hw_conf.rst_port = LCD_RST_GPIO_Port;
 8000fa8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000fac:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8000fb0:	4a4a      	ldr	r2, [pc, #296]	; (80010dc <main+0x198>)
 8000fb2:	611a      	str	r2, [r3, #16]
  lcd1.hw_conf.dc_pin =  LCD_DC_Pin;
 8000fb4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000fb8:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8000fbc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fc0:	829a      	strh	r2, [r3, #20]
  lcd1.hw_conf.dc_port = LCD_DC_GPIO_Port;
 8000fc2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000fc6:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8000fca:	4a45      	ldr	r2, [pc, #276]	; (80010e0 <main+0x19c>)
 8000fcc:	619a      	str	r2, [r3, #24]
  lcd1.def_scr = lcd5110_def_scr;
 8000fce:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8000fd2:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8000fd6:	4a43      	ldr	r2, [pc, #268]	; (80010e4 <main+0x1a0>)
 8000fd8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8000fdc:	4614      	mov	r4, r2
 8000fde:	6820      	ldr	r0, [r4, #0]
 8000fe0:	6861      	ldr	r1, [r4, #4]
 8000fe2:	68a2      	ldr	r2, [r4, #8]
 8000fe4:	c307      	stmia	r3!, {r0, r1, r2}
 8000fe6:	89a2      	ldrh	r2, [r4, #12]
 8000fe8:	801a      	strh	r2, [r3, #0]

  LCD5110_init(&lcd1.hw_conf, LCD5110_NORMAL_MODE, 0x40, 2, 3);
 8000fea:	1d38      	adds	r0, r7, #4
 8000fec:	2303      	movs	r3, #3
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	2240      	movs	r2, #64	; 0x40
 8000ff4:	210c      	movs	r1, #12
 8000ff6:	f7ff fe63 	bl	8000cc0 <LCD5110_init>

  TIM10_reinit();
 8000ffa:	f7ff fedd 	bl	8000db8 <TIM10_reinit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  trig_sensor();
 8000ffe:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001002:	469c      	mov	ip, r3
 8001004:	f7ff ff84 	bl	8000f10 <trig_sensor.0>

	  state = WAITING_FOR_ECHO_START_S;
 8001008:	4b37      	ldr	r3, [pc, #220]	; (80010e8 <main+0x1a4>)
 800100a:	2201      	movs	r2, #1
 800100c:	701a      	strb	r2, [r3, #0]

	  while (state == WAITING_FOR_ECHO_START_S && state != ERROR_S) {}
 800100e:	bf00      	nop
 8001010:	4b35      	ldr	r3, [pc, #212]	; (80010e8 <main+0x1a4>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b01      	cmp	r3, #1
 8001018:	d104      	bne.n	8001024 <main+0xe0>
 800101a:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <main+0x1a4>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b05      	cmp	r3, #5
 8001022:	d1f5      	bne.n	8001010 <main+0xcc>

	  if (state == ERROR_S) {
 8001024:	4b30      	ldr	r3, [pc, #192]	; (80010e8 <main+0x1a4>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b05      	cmp	r3, #5
 800102c:	d10a      	bne.n	8001044 <main+0x100>
		  LCD5110_clear_scr(&lcd1);
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fac5 	bl	80005c0 <LCD5110_clear_scr>
		  LCD5110_printf(&lcd1, BLACK, "Unexpected error while waiting for ECHO to start.\n");
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	4a2c      	ldr	r2, [pc, #176]	; (80010ec <main+0x1a8>)
 800103a:	2101      	movs	r1, #1
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fbd9 	bl	80007f4 <LCD5110_printf>
		  continue;
 8001042:	e047      	b.n	80010d4 <main+0x190>
	  }

	  while (state == WAITING_FOR_ECHO_STOP_S && state != ERROR_S) {}
 8001044:	bf00      	nop
 8001046:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <main+0x1a4>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d104      	bne.n	800105a <main+0x116>
 8001050:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <main+0x1a4>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b05      	cmp	r3, #5
 8001058:	d1f5      	bne.n	8001046 <main+0x102>

	  if (state == ERROR_S) {
 800105a:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <main+0x1a4>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b05      	cmp	r3, #5
 8001062:	d10a      	bne.n	800107a <main+0x136>
		  LCD5110_clear_scr(&lcd1);
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff faaa 	bl	80005c0 <LCD5110_clear_scr>
		  LCD5110_printf(&lcd1, BLACK, "Unexpected error while waiting for ECHO to stop.\n");
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	4a20      	ldr	r2, [pc, #128]	; (80010f0 <main+0x1ac>)
 8001070:	2101      	movs	r1, #1
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fbbe 	bl	80007f4 <LCD5110_printf>
		  continue;
 8001078:	e02c      	b.n	80010d4 <main+0x190>
	  }


	  if (state == ECHO_TIMEOUT_S) {
 800107a:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <main+0x1a4>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b03      	cmp	r3, #3
 8001082:	d109      	bne.n	8001098 <main+0x154>
		  LCD5110_clear_scr(&lcd1);
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fa9a 	bl	80005c0 <LCD5110_clear_scr>
		  LCD5110_printf(&lcd1, BLACK, "Timeout.\nMove blocking objects away from the\nsensor");
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	4a19      	ldr	r2, [pc, #100]	; (80010f4 <main+0x1b0>)
 8001090:	2101      	movs	r1, #1
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fbae 	bl	80007f4 <LCD5110_printf>

	  }

	  if (state == READING_DATA_S) {
 8001098:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <main+0x1a4>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b04      	cmp	r3, #4
 80010a0:	d112      	bne.n	80010c8 <main+0x184>
		  uint32_t distance = measured_time/58;
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <main+0x1b4>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a15      	ldr	r2, [pc, #84]	; (80010fc <main+0x1b8>)
 80010a8:	fba2 2303 	umull	r2, r3, r2, r3
 80010ac:	095b      	lsrs	r3, r3, #5
 80010ae:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		  LCD5110_clear_scr(&lcd1);
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fa83 	bl	80005c0 <LCD5110_clear_scr>
		  LCD5110_printf(&lcd1, BLACK, "Distance:\n%lu cm\n", distance);
 80010ba:	1d38      	adds	r0, r7, #4
 80010bc:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80010c0:	4a0f      	ldr	r2, [pc, #60]	; (8001100 <main+0x1bc>)
 80010c2:	2101      	movs	r1, #1
 80010c4:	f7ff fb96 	bl	80007f4 <LCD5110_printf>
	  }

	  HAL_Delay(UPDATE_DELAY_MS);
 80010c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010cc:	f000 fcd0 	bl	8001a70 <HAL_Delay>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80010d0:	f006 feb2 	bl	8007e38 <MX_USB_HOST_Process>
	  trig_sensor();
 80010d4:	e793      	b.n	8000ffe <main+0xba>
 80010d6:	bf00      	nop
 80010d8:	20000158 	.word	0x20000158
 80010dc:	40020c00 	.word	0x40020c00
 80010e0:	40020400 	.word	0x40020400
 80010e4:	0800945c 	.word	0x0800945c
 80010e8:	200001f8 	.word	0x200001f8
 80010ec:	08008da8 	.word	0x08008da8
 80010f0:	08008ddc 	.word	0x08008ddc
 80010f4:	08008e10 	.word	0x08008e10
 80010f8:	20000204 	.word	0x20000204
 80010fc:	8d3dcb09 	.word	0x8d3dcb09
 8001100:	08008e44 	.word	0x08008e44

08001104 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b094      	sub	sp, #80	; 0x50
 8001108:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110a:	f107 0320 	add.w	r3, r7, #32
 800110e:	2230      	movs	r2, #48	; 0x30
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f007 f9ac 	bl	8008470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001128:	2300      	movs	r3, #0
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	4b27      	ldr	r3, [pc, #156]	; (80011cc <SystemClock_Config+0xc8>)
 800112e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001130:	4a26      	ldr	r2, [pc, #152]	; (80011cc <SystemClock_Config+0xc8>)
 8001132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001136:	6413      	str	r3, [r2, #64]	; 0x40
 8001138:	4b24      	ldr	r3, [pc, #144]	; (80011cc <SystemClock_Config+0xc8>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001144:	2300      	movs	r3, #0
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <SystemClock_Config+0xcc>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a20      	ldr	r2, [pc, #128]	; (80011d0 <SystemClock_Config+0xcc>)
 800114e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <SystemClock_Config+0xcc>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001160:	2301      	movs	r3, #1
 8001162:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001164:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800116a:	2302      	movs	r3, #2
 800116c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800116e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001172:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001174:	2304      	movs	r3, #4
 8001176:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001178:	23c0      	movs	r3, #192	; 0xc0
 800117a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800117c:	2304      	movs	r3, #4
 800117e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001180:	2308      	movs	r3, #8
 8001182:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001184:	f107 0320 	add.w	r3, r7, #32
 8001188:	4618      	mov	r0, r3
 800118a:	f002 fcab 	bl	8003ae4 <HAL_RCC_OscConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001194:	f000 fa26 	bl	80015e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001198:	230f      	movs	r3, #15
 800119a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800119c:	2302      	movs	r3, #2
 800119e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	2103      	movs	r1, #3
 80011b4:	4618      	mov	r0, r3
 80011b6:	f002 ff0d 	bl	8003fd4 <HAL_RCC_ClockConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011c0:	f000 fa10 	bl	80015e4 <Error_Handler>
  }
}
 80011c4:	bf00      	nop
 80011c6:	3750      	adds	r7, #80	; 0x50
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40007000 	.word	0x40007000

080011d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <MX_I2C1_Init+0x50>)
 80011da:	4a13      	ldr	r2, [pc, #76]	; (8001228 <MX_I2C1_Init+0x54>)
 80011dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_I2C1_Init+0x50>)
 80011e0:	4a12      	ldr	r2, [pc, #72]	; (800122c <MX_I2C1_Init+0x58>)
 80011e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <MX_I2C1_Init+0x50>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_I2C1_Init+0x50>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_I2C1_Init+0x50>)
 80011f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <MX_I2C1_Init+0x50>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_I2C1_Init+0x50>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001204:	4b07      	ldr	r3, [pc, #28]	; (8001224 <MX_I2C1_Init+0x50>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_I2C1_Init+0x50>)
 800120c:	2200      	movs	r2, #0
 800120e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001210:	4804      	ldr	r0, [pc, #16]	; (8001224 <MX_I2C1_Init+0x50>)
 8001212:	f002 fb23 	bl	800385c <HAL_I2C_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800121c:	f000 f9e2 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	200000ac 	.word	0x200000ac
 8001228:	40005400 	.word	0x40005400
 800122c:	000186a0 	.word	0x000186a0

08001230 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001234:	4b17      	ldr	r3, [pc, #92]	; (8001294 <MX_SPI1_Init+0x64>)
 8001236:	4a18      	ldr	r2, [pc, #96]	; (8001298 <MX_SPI1_Init+0x68>)
 8001238:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800123a:	4b16      	ldr	r3, [pc, #88]	; (8001294 <MX_SPI1_Init+0x64>)
 800123c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001240:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001242:	4b14      	ldr	r3, [pc, #80]	; (8001294 <MX_SPI1_Init+0x64>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <MX_SPI1_Init+0x64>)
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <MX_SPI1_Init+0x64>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <MX_SPI1_Init+0x64>)
 8001256:	2200      	movs	r2, #0
 8001258:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <MX_SPI1_Init+0x64>)
 800125c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001260:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <MX_SPI1_Init+0x64>)
 8001264:	2200      	movs	r2, #0
 8001266:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001268:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <MX_SPI1_Init+0x64>)
 800126a:	2200      	movs	r2, #0
 800126c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <MX_SPI1_Init+0x64>)
 8001270:	2200      	movs	r2, #0
 8001272:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001274:	4b07      	ldr	r3, [pc, #28]	; (8001294 <MX_SPI1_Init+0x64>)
 8001276:	2200      	movs	r2, #0
 8001278:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <MX_SPI1_Init+0x64>)
 800127c:	220a      	movs	r2, #10
 800127e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001280:	4804      	ldr	r0, [pc, #16]	; (8001294 <MX_SPI1_Init+0x64>)
 8001282:	f003 f8b3 	bl	80043ec <HAL_SPI_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800128c:	f000 f9aa 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000100 	.word	0x20000100
 8001298:	40013000 	.word	0x40013000

0800129c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012a0:	4b17      	ldr	r3, [pc, #92]	; (8001300 <MX_SPI2_Init+0x64>)
 80012a2:	4a18      	ldr	r2, [pc, #96]	; (8001304 <MX_SPI2_Init+0x68>)
 80012a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012a6:	4b16      	ldr	r3, [pc, #88]	; (8001300 <MX_SPI2_Init+0x64>)
 80012a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012ae:	4b14      	ldr	r3, [pc, #80]	; (8001300 <MX_SPI2_Init+0x64>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <MX_SPI2_Init+0x64>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <MX_SPI2_Init+0x64>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <MX_SPI2_Init+0x64>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <MX_SPI2_Init+0x64>)
 80012c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012cc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <MX_SPI2_Init+0x64>)
 80012d0:	2210      	movs	r2, #16
 80012d2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012d4:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <MX_SPI2_Init+0x64>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <MX_SPI2_Init+0x64>)
 80012dc:	2200      	movs	r2, #0
 80012de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012e0:	4b07      	ldr	r3, [pc, #28]	; (8001300 <MX_SPI2_Init+0x64>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <MX_SPI2_Init+0x64>)
 80012e8:	220a      	movs	r2, #10
 80012ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012ec:	4804      	ldr	r0, [pc, #16]	; (8001300 <MX_SPI2_Init+0x64>)
 80012ee:	f003 f87d 	bl	80043ec <HAL_SPI_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80012f8:	f000 f974 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000158 	.word	0x20000158
 8001304:	40003800 	.word	0x40003800

08001308 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800130c:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <MX_TIM10_Init+0x40>)
 800130e:	4a0f      	ldr	r2, [pc, #60]	; (800134c <MX_TIM10_Init+0x44>)
 8001310:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 96-1;
 8001312:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <MX_TIM10_Init+0x40>)
 8001314:	225f      	movs	r2, #95	; 0x5f
 8001316:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <MX_TIM10_Init+0x40>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000;
 800131e:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <MX_TIM10_Init+0x40>)
 8001320:	f242 7210 	movw	r2, #10000	; 0x2710
 8001324:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <MX_TIM10_Init+0x40>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <MX_TIM10_Init+0x40>)
 800132e:	2200      	movs	r2, #0
 8001330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_TIM10_Init+0x40>)
 8001334:	f003 faea 	bl	800490c <HAL_TIM_Base_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800133e:	f000 f951 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200001b0 	.word	0x200001b0
 800134c:	40014400 	.word	0x40014400

08001350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08c      	sub	sp, #48	; 0x30
 8001354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	61bb      	str	r3, [r7, #24]
 800136a:	4b98      	ldr	r3, [pc, #608]	; (80015cc <MX_GPIO_Init+0x27c>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a97      	ldr	r2, [pc, #604]	; (80015cc <MX_GPIO_Init+0x27c>)
 8001370:	f043 0310 	orr.w	r3, r3, #16
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b95      	ldr	r3, [pc, #596]	; (80015cc <MX_GPIO_Init+0x27c>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0310 	and.w	r3, r3, #16
 800137e:	61bb      	str	r3, [r7, #24]
 8001380:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	4b91      	ldr	r3, [pc, #580]	; (80015cc <MX_GPIO_Init+0x27c>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a90      	ldr	r2, [pc, #576]	; (80015cc <MX_GPIO_Init+0x27c>)
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b8e      	ldr	r3, [pc, #568]	; (80015cc <MX_GPIO_Init+0x27c>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	4b8a      	ldr	r3, [pc, #552]	; (80015cc <MX_GPIO_Init+0x27c>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a89      	ldr	r2, [pc, #548]	; (80015cc <MX_GPIO_Init+0x27c>)
 80013a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b87      	ldr	r3, [pc, #540]	; (80015cc <MX_GPIO_Init+0x27c>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4b83      	ldr	r3, [pc, #524]	; (80015cc <MX_GPIO_Init+0x27c>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a82      	ldr	r2, [pc, #520]	; (80015cc <MX_GPIO_Init+0x27c>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b80      	ldr	r3, [pc, #512]	; (80015cc <MX_GPIO_Init+0x27c>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	4b7c      	ldr	r3, [pc, #496]	; (80015cc <MX_GPIO_Init+0x27c>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a7b      	ldr	r2, [pc, #492]	; (80015cc <MX_GPIO_Init+0x27c>)
 80013e0:	f043 0302 	orr.w	r3, r3, #2
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b79      	ldr	r3, [pc, #484]	; (80015cc <MX_GPIO_Init+0x27c>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	4b75      	ldr	r3, [pc, #468]	; (80015cc <MX_GPIO_Init+0x27c>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a74      	ldr	r2, [pc, #464]	; (80015cc <MX_GPIO_Init+0x27c>)
 80013fc:	f043 0308 	orr.w	r3, r3, #8
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b72      	ldr	r3, [pc, #456]	; (80015cc <MX_GPIO_Init+0x27c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800140e:	2200      	movs	r2, #0
 8001410:	2108      	movs	r1, #8
 8001412:	486f      	ldr	r0, [pc, #444]	; (80015d0 <MX_GPIO_Init+0x280>)
 8001414:	f000 fde6 	bl	8001fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001418:	2201      	movs	r2, #1
 800141a:	2101      	movs	r1, #1
 800141c:	486d      	ldr	r0, [pc, #436]	; (80015d4 <MX_GPIO_Init+0x284>)
 800141e:	f000 fde1 	bl	8001fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001422:	2200      	movs	r2, #0
 8001424:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001428:	486b      	ldr	r0, [pc, #428]	; (80015d8 <MX_GPIO_Init+0x288>)
 800142a:	f000 fddb 	bl	8001fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RST_Pin|LCD_CE_Pin|TRIG_Pin|LD4_Pin
 800142e:	2200      	movs	r2, #0
 8001430:	f24f 7110 	movw	r1, #63248	; 0xf710
 8001434:	4869      	ldr	r0, [pc, #420]	; (80015dc <MX_GPIO_Init+0x28c>)
 8001436:	f000 fdd5 	bl	8001fe4 <HAL_GPIO_WritePin>
                          |LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800143a:	2304      	movs	r3, #4
 800143c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143e:	2300      	movs	r3, #0
 8001440:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	4619      	mov	r1, r3
 800144c:	4860      	ldr	r0, [pc, #384]	; (80015d0 <MX_GPIO_Init+0x280>)
 800144e:	f000 fc45 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001452:	2308      	movs	r3, #8
 8001454:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001456:	2301      	movs	r3, #1
 8001458:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2300      	movs	r3, #0
 8001460:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001462:	f107 031c 	add.w	r3, r7, #28
 8001466:	4619      	mov	r1, r3
 8001468:	4859      	ldr	r0, [pc, #356]	; (80015d0 <MX_GPIO_Init+0x280>)
 800146a:	f000 fc37 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 800146e:	2332      	movs	r3, #50	; 0x32
 8001470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001472:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001476:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800147c:	f107 031c 	add.w	r3, r7, #28
 8001480:	4619      	mov	r1, r3
 8001482:	4853      	ldr	r0, [pc, #332]	; (80015d0 <MX_GPIO_Init+0x280>)
 8001484:	f000 fc2a 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001488:	2301      	movs	r3, #1
 800148a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148c:	2301      	movs	r3, #1
 800148e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	4619      	mov	r1, r3
 800149e:	484d      	ldr	r0, [pc, #308]	; (80015d4 <MX_GPIO_Init+0x284>)
 80014a0:	f000 fc1c 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80014a4:	2308      	movs	r3, #8
 80014a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014b4:	2305      	movs	r3, #5
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80014b8:	f107 031c 	add.w	r3, r7, #28
 80014bc:	4619      	mov	r1, r3
 80014be:	4845      	ldr	r0, [pc, #276]	; (80015d4 <MX_GPIO_Init+0x284>)
 80014c0:	f000 fc0c 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014c4:	2301      	movs	r3, #1
 80014c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014c8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80014cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 031c 	add.w	r3, r7, #28
 80014d6:	4619      	mov	r1, r3
 80014d8:	4841      	ldr	r0, [pc, #260]	; (80015e0 <MX_GPIO_Init+0x290>)
 80014da:	f000 fbff 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80014de:	2310      	movs	r3, #16
 80014e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014ee:	2306      	movs	r3, #6
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80014f2:	f107 031c 	add.w	r3, r7, #28
 80014f6:	4619      	mov	r1, r3
 80014f8:	4839      	ldr	r0, [pc, #228]	; (80015e0 <MX_GPIO_Init+0x290>)
 80014fa:	f000 fbef 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80014fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001510:	2305      	movs	r3, #5
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	4619      	mov	r1, r3
 800151a:	482f      	ldr	r0, [pc, #188]	; (80015d8 <MX_GPIO_Init+0x288>)
 800151c:	f000 fbde 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8001520:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001526:	2301      	movs	r3, #1
 8001528:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 031c 	add.w	r3, r7, #28
 8001536:	4619      	mov	r1, r3
 8001538:	4827      	ldr	r0, [pc, #156]	; (80015d8 <MX_GPIO_Init+0x288>)
 800153a:	f000 fbcf 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_CE_Pin TRIG_Pin LD4_Pin
                           LD3_Pin LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_CE_Pin|TRIG_Pin|LD4_Pin
 800153e:	f24f 7310 	movw	r3, #63248	; 0xf710
 8001542:	61fb      	str	r3, [r7, #28]
                          |LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001544:	2301      	movs	r3, #1
 8001546:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	4619      	mov	r1, r3
 8001556:	4821      	ldr	r0, [pc, #132]	; (80015dc <MX_GPIO_Init+0x28c>)
 8001558:	f000 fbc0 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHOI_Pin */
  GPIO_InitStruct.Pin = ECHOI_Pin;
 800155c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001562:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001566:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ECHOI_GPIO_Port, &GPIO_InitStruct);
 800156c:	f107 031c 	add.w	r3, r7, #28
 8001570:	4619      	mov	r1, r3
 8001572:	481a      	ldr	r0, [pc, #104]	; (80015dc <MX_GPIO_Init+0x28c>)
 8001574:	f000 fbb2 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001578:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800157c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800158a:	2306      	movs	r3, #6
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800158e:	f107 031c 	add.w	r3, r7, #28
 8001592:	4619      	mov	r1, r3
 8001594:	480f      	ldr	r0, [pc, #60]	; (80015d4 <MX_GPIO_Init+0x284>)
 8001596:	f000 fba1 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800159a:	2320      	movs	r3, #32
 800159c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159e:	2300      	movs	r3, #0
 80015a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015a6:	f107 031c 	add.w	r3, r7, #28
 80015aa:	4619      	mov	r1, r3
 80015ac:	480b      	ldr	r0, [pc, #44]	; (80015dc <MX_GPIO_Init+0x28c>)
 80015ae:	f000 fb95 	bl	8001cdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	2028      	movs	r0, #40	; 0x28
 80015b8:	f000 fb59 	bl	8001c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015bc:	2028      	movs	r0, #40	; 0x28
 80015be:	f000 fb72 	bl	8001ca6 <HAL_NVIC_EnableIRQ>

}
 80015c2:	bf00      	nop
 80015c4:	3730      	adds	r7, #48	; 0x30
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40020800 	.word	0x40020800
 80015d8:	40020400 	.word	0x40020400
 80015dc:	40020c00 	.word	0x40020c00
 80015e0:	40020000 	.word	0x40020000

080015e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80015e8:	b672      	cpsid	i
}
 80015ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ec:	e7fe      	b.n	80015ec <Error_Handler+0x8>
	...

080015f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <HAL_MspInit+0x4c>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	4a0f      	ldr	r2, [pc, #60]	; (800163c <HAL_MspInit+0x4c>)
 8001600:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001604:	6453      	str	r3, [r2, #68]	; 0x44
 8001606:	4b0d      	ldr	r3, [pc, #52]	; (800163c <HAL_MspInit+0x4c>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	603b      	str	r3, [r7, #0]
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_MspInit+0x4c>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	4a08      	ldr	r2, [pc, #32]	; (800163c <HAL_MspInit+0x4c>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001620:	6413      	str	r3, [r2, #64]	; 0x40
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_MspInit+0x4c>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800162e:	2007      	movs	r0, #7
 8001630:	f000 fb12 	bl	8001c58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40023800 	.word	0x40023800

08001640 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a19      	ldr	r2, [pc, #100]	; (80016c4 <HAL_I2C_MspInit+0x84>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d12c      	bne.n	80016bc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <HAL_I2C_MspInit+0x88>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a17      	ldr	r2, [pc, #92]	; (80016c8 <HAL_I2C_MspInit+0x88>)
 800166c:	f043 0302 	orr.w	r3, r3, #2
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <HAL_I2C_MspInit+0x88>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800167e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001684:	2312      	movs	r3, #18
 8001686:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001688:	2301      	movs	r3, #1
 800168a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001690:	2304      	movs	r3, #4
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	4619      	mov	r1, r3
 800169a:	480c      	ldr	r0, [pc, #48]	; (80016cc <HAL_I2C_MspInit+0x8c>)
 800169c:	f000 fb1e 	bl	8001cdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016a0:	2300      	movs	r3, #0
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <HAL_I2C_MspInit+0x88>)
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	4a07      	ldr	r2, [pc, #28]	; (80016c8 <HAL_I2C_MspInit+0x88>)
 80016aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016ae:	6413      	str	r3, [r2, #64]	; 0x40
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <HAL_I2C_MspInit+0x88>)
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016bc:	bf00      	nop
 80016be:	3728      	adds	r7, #40	; 0x28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40005400 	.word	0x40005400
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40020400 	.word	0x40020400

080016d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08c      	sub	sp, #48	; 0x30
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 031c 	add.w	r3, r7, #28
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a32      	ldr	r2, [pc, #200]	; (80017b8 <HAL_SPI_MspInit+0xe8>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d12c      	bne.n	800174c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
 80016f6:	4b31      	ldr	r3, [pc, #196]	; (80017bc <HAL_SPI_MspInit+0xec>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	4a30      	ldr	r2, [pc, #192]	; (80017bc <HAL_SPI_MspInit+0xec>)
 80016fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001700:	6453      	str	r3, [r2, #68]	; 0x44
 8001702:	4b2e      	ldr	r3, [pc, #184]	; (80017bc <HAL_SPI_MspInit+0xec>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800170a:	61bb      	str	r3, [r7, #24]
 800170c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	4b2a      	ldr	r3, [pc, #168]	; (80017bc <HAL_SPI_MspInit+0xec>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a29      	ldr	r2, [pc, #164]	; (80017bc <HAL_SPI_MspInit+0xec>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b27      	ldr	r3, [pc, #156]	; (80017bc <HAL_SPI_MspInit+0xec>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800172a:	23e0      	movs	r3, #224	; 0xe0
 800172c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001736:	2303      	movs	r3, #3
 8001738:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800173a:	2305      	movs	r3, #5
 800173c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	f107 031c 	add.w	r3, r7, #28
 8001742:	4619      	mov	r1, r3
 8001744:	481e      	ldr	r0, [pc, #120]	; (80017c0 <HAL_SPI_MspInit+0xf0>)
 8001746:	f000 fac9 	bl	8001cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800174a:	e031      	b.n	80017b0 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a1c      	ldr	r2, [pc, #112]	; (80017c4 <HAL_SPI_MspInit+0xf4>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d12c      	bne.n	80017b0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	4b18      	ldr	r3, [pc, #96]	; (80017bc <HAL_SPI_MspInit+0xec>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	4a17      	ldr	r2, [pc, #92]	; (80017bc <HAL_SPI_MspInit+0xec>)
 8001760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001764:	6413      	str	r3, [r2, #64]	; 0x40
 8001766:	4b15      	ldr	r3, [pc, #84]	; (80017bc <HAL_SPI_MspInit+0xec>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	4b11      	ldr	r3, [pc, #68]	; (80017bc <HAL_SPI_MspInit+0xec>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a10      	ldr	r2, [pc, #64]	; (80017bc <HAL_SPI_MspInit+0xec>)
 800177c:	f043 0302 	orr.w	r3, r3, #2
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <HAL_SPI_MspInit+0xec>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_CLK_Pin|LCD_DIN_Pin;
 800178e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001794:	2302      	movs	r3, #2
 8001796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179c:	2303      	movs	r3, #3
 800179e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017a0:	2305      	movs	r3, #5
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a4:	f107 031c 	add.w	r3, r7, #28
 80017a8:	4619      	mov	r1, r3
 80017aa:	4807      	ldr	r0, [pc, #28]	; (80017c8 <HAL_SPI_MspInit+0xf8>)
 80017ac:	f000 fa96 	bl	8001cdc <HAL_GPIO_Init>
}
 80017b0:	bf00      	nop
 80017b2:	3730      	adds	r7, #48	; 0x30
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40013000 	.word	0x40013000
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40020000 	.word	0x40020000
 80017c4:	40003800 	.word	0x40003800
 80017c8:	40020400 	.word	0x40020400

080017cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0e      	ldr	r2, [pc, #56]	; (8001814 <HAL_TIM_Base_MspInit+0x48>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d115      	bne.n	800180a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <HAL_TIM_Base_MspInit+0x4c>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	4a0c      	ldr	r2, [pc, #48]	; (8001818 <HAL_TIM_Base_MspInit+0x4c>)
 80017e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ec:	6453      	str	r3, [r2, #68]	; 0x44
 80017ee:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <HAL_TIM_Base_MspInit+0x4c>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2100      	movs	r1, #0
 80017fe:	2019      	movs	r0, #25
 8001800:	f000 fa35 	bl	8001c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001804:	2019      	movs	r0, #25
 8001806:	f000 fa4e 	bl	8001ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800180a:	bf00      	nop
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40014400 	.word	0x40014400
 8001818:	40023800 	.word	0x40023800

0800181c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <NMI_Handler+0x4>

08001822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001826:	e7fe      	b.n	8001826 <HardFault_Handler+0x4>

08001828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800182c:	e7fe      	b.n	800182c <MemManage_Handler+0x4>

0800182e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001832:	e7fe      	b.n	8001832 <BusFault_Handler+0x4>

08001834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <UsageFault_Handler+0x4>

0800183a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001868:	f000 f8e2 	bl	8001a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}

08001870 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001874:	4802      	ldr	r0, [pc, #8]	; (8001880 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001876:	f003 f921 	bl	8004abc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	200001b0 	.word	0x200001b0

08001884 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ECHOI_Pin);
 8001888:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800188c:	f000 fbc4 	bl	8002018 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}

08001894 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001898:	4802      	ldr	r0, [pc, #8]	; (80018a4 <OTG_FS_IRQHandler+0x10>)
 800189a:	f000 fe3f 	bl	800251c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	200005f0 	.word	0x200005f0

080018a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b0:	4a14      	ldr	r2, [pc, #80]	; (8001904 <_sbrk+0x5c>)
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <_sbrk+0x60>)
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018bc:	4b13      	ldr	r3, [pc, #76]	; (800190c <_sbrk+0x64>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d102      	bne.n	80018ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <_sbrk+0x64>)
 80018c6:	4a12      	ldr	r2, [pc, #72]	; (8001910 <_sbrk+0x68>)
 80018c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <_sbrk+0x64>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4413      	add	r3, r2
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d207      	bcs.n	80018e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d8:	f006 fd90 	bl	80083fc <__errno>
 80018dc:	4603      	mov	r3, r0
 80018de:	220c      	movs	r2, #12
 80018e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018e6:	e009      	b.n	80018fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e8:	4b08      	ldr	r3, [pc, #32]	; (800190c <_sbrk+0x64>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ee:	4b07      	ldr	r3, [pc, #28]	; (800190c <_sbrk+0x64>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	4a05      	ldr	r2, [pc, #20]	; (800190c <_sbrk+0x64>)
 80018f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018fa:	68fb      	ldr	r3, [r7, #12]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20020000 	.word	0x20020000
 8001908:	00000400 	.word	0x00000400
 800190c:	2000020c 	.word	0x2000020c
 8001910:	20000908 	.word	0x20000908

08001914 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <SystemInit+0x20>)
 800191a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800191e:	4a05      	ldr	r2, [pc, #20]	; (8001934 <SystemInit+0x20>)
 8001920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001924:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001938:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001970 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800193c:	480d      	ldr	r0, [pc, #52]	; (8001974 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800193e:	490e      	ldr	r1, [pc, #56]	; (8001978 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001940:	4a0e      	ldr	r2, [pc, #56]	; (800197c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001944:	e002      	b.n	800194c <LoopCopyDataInit>

08001946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800194a:	3304      	adds	r3, #4

0800194c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800194c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001950:	d3f9      	bcc.n	8001946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001952:	4a0b      	ldr	r2, [pc, #44]	; (8001980 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001954:	4c0b      	ldr	r4, [pc, #44]	; (8001984 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001958:	e001      	b.n	800195e <LoopFillZerobss>

0800195a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800195a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800195c:	3204      	adds	r2, #4

0800195e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001960:	d3fb      	bcc.n	800195a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001962:	f7ff ffd7 	bl	8001914 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001966:	f006 fd4f 	bl	8008408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800196a:	f7ff faeb 	bl	8000f44 <main>
  bx  lr    
 800196e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001970:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001978:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800197c:	080095c8 	.word	0x080095c8
  ldr r2, =_sbss
 8001980:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001984:	20000904 	.word	0x20000904

08001988 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001988:	e7fe      	b.n	8001988 <ADC_IRQHandler>
	...

0800198c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001990:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <HAL_Init+0x40>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0d      	ldr	r2, [pc, #52]	; (80019cc <HAL_Init+0x40>)
 8001996:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800199a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <HAL_Init+0x40>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <HAL_Init+0x40>)
 80019a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a8:	4b08      	ldr	r3, [pc, #32]	; (80019cc <HAL_Init+0x40>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a07      	ldr	r2, [pc, #28]	; (80019cc <HAL_Init+0x40>)
 80019ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b4:	2003      	movs	r0, #3
 80019b6:	f000 f94f 	bl	8001c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ba:	2000      	movs	r0, #0
 80019bc:	f000 f808 	bl	80019d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c0:	f7ff fe16 	bl	80015f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023c00 	.word	0x40023c00

080019d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_InitTick+0x54>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_InitTick+0x58>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	4619      	mov	r1, r3
 80019e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 f967 	bl	8001cc2 <HAL_SYSTICK_Config>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e00e      	b.n	8001a1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b0f      	cmp	r3, #15
 8001a02:	d80a      	bhi.n	8001a1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a04:	2200      	movs	r2, #0
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a0c:	f000 f92f 	bl	8001c6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a10:	4a06      	ldr	r2, [pc, #24]	; (8001a2c <HAL_InitTick+0x5c>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
 8001a18:	e000      	b.n	8001a1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000000 	.word	0x20000000
 8001a28:	20000008 	.word	0x20000008
 8001a2c:	20000004 	.word	0x20000004

08001a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_IncTick+0x20>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_IncTick+0x24>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4413      	add	r3, r2
 8001a40:	4a04      	ldr	r2, [pc, #16]	; (8001a54 <HAL_IncTick+0x24>)
 8001a42:	6013      	str	r3, [r2, #0]
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20000008 	.word	0x20000008
 8001a54:	20000210 	.word	0x20000210

08001a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a5c:	4b03      	ldr	r3, [pc, #12]	; (8001a6c <HAL_GetTick+0x14>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	20000210 	.word	0x20000210

08001a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a78:	f7ff ffee 	bl	8001a58 <HAL_GetTick>
 8001a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a88:	d005      	beq.n	8001a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <HAL_Delay+0x44>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4413      	add	r3, r2
 8001a94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a96:	bf00      	nop
 8001a98:	f7ff ffde 	bl	8001a58 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d8f7      	bhi.n	8001a98 <HAL_Delay+0x28>
  {
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	bf00      	nop
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000008 	.word	0x20000008

08001ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <__NVIC_SetPriorityGrouping+0x44>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aea:	4a04      	ldr	r2, [pc, #16]	; (8001afc <__NVIC_SetPriorityGrouping+0x44>)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	60d3      	str	r3, [r2, #12]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b04:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <__NVIC_GetPriorityGrouping+0x18>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	0a1b      	lsrs	r3, r3, #8
 8001b0a:	f003 0307 	and.w	r3, r3, #7
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	db0b      	blt.n	8001b46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	f003 021f 	and.w	r2, r3, #31
 8001b34:	4907      	ldr	r1, [pc, #28]	; (8001b54 <__NVIC_EnableIRQ+0x38>)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	095b      	lsrs	r3, r3, #5
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000e100 	.word	0xe000e100

08001b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	6039      	str	r1, [r7, #0]
 8001b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	db0a      	blt.n	8001b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	490c      	ldr	r1, [pc, #48]	; (8001ba4 <__NVIC_SetPriority+0x4c>)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	0112      	lsls	r2, r2, #4
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	440b      	add	r3, r1
 8001b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b80:	e00a      	b.n	8001b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	4908      	ldr	r1, [pc, #32]	; (8001ba8 <__NVIC_SetPriority+0x50>)
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	3b04      	subs	r3, #4
 8001b90:	0112      	lsls	r2, r2, #4
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	440b      	add	r3, r1
 8001b96:	761a      	strb	r2, [r3, #24]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	e000e100 	.word	0xe000e100
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b089      	sub	sp, #36	; 0x24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f1c3 0307 	rsb	r3, r3, #7
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	bf28      	it	cs
 8001bca:	2304      	movcs	r3, #4
 8001bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	2b06      	cmp	r3, #6
 8001bd4:	d902      	bls.n	8001bdc <NVIC_EncodePriority+0x30>
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3b03      	subs	r3, #3
 8001bda:	e000      	b.n	8001bde <NVIC_EncodePriority+0x32>
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43da      	mvns	r2, r3
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	401a      	ands	r2, r3
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfe:	43d9      	mvns	r1, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c04:	4313      	orrs	r3, r2
         );
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3724      	adds	r7, #36	; 0x24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c24:	d301      	bcc.n	8001c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c26:	2301      	movs	r3, #1
 8001c28:	e00f      	b.n	8001c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c2a:	4a0a      	ldr	r2, [pc, #40]	; (8001c54 <SysTick_Config+0x40>)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c32:	210f      	movs	r1, #15
 8001c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c38:	f7ff ff8e 	bl	8001b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c3c:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <SysTick_Config+0x40>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c42:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <SysTick_Config+0x40>)
 8001c44:	2207      	movs	r2, #7
 8001c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	e000e010 	.word	0xe000e010

08001c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ff29 	bl	8001ab8 <__NVIC_SetPriorityGrouping>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b086      	sub	sp, #24
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	4603      	mov	r3, r0
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c80:	f7ff ff3e 	bl	8001b00 <__NVIC_GetPriorityGrouping>
 8001c84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	68b9      	ldr	r1, [r7, #8]
 8001c8a:	6978      	ldr	r0, [r7, #20]
 8001c8c:	f7ff ff8e 	bl	8001bac <NVIC_EncodePriority>
 8001c90:	4602      	mov	r2, r0
 8001c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff5d 	bl	8001b58 <__NVIC_SetPriority>
}
 8001c9e:	bf00      	nop
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	4603      	mov	r3, r0
 8001cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff31 	bl	8001b1c <__NVIC_EnableIRQ>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff ffa2 	bl	8001c14 <SysTick_Config>
 8001cd0:	4603      	mov	r3, r0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b089      	sub	sp, #36	; 0x24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
 8001cf6:	e159      	b.n	8001fac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	f040 8148 	bne.w	8001fa6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d005      	beq.n	8001d2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d130      	bne.n	8001d90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	2203      	movs	r2, #3
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4013      	ands	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	68da      	ldr	r2, [r3, #12]
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d64:	2201      	movs	r2, #1
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	091b      	lsrs	r3, r3, #4
 8001d7a:	f003 0201 	and.w	r2, r3, #1
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	2b03      	cmp	r3, #3
 8001d9a:	d017      	beq.n	8001dcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	2203      	movs	r2, #3
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0303 	and.w	r3, r3, #3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d123      	bne.n	8001e20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	08da      	lsrs	r2, r3, #3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3208      	adds	r2, #8
 8001de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	220f      	movs	r2, #15
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	691a      	ldr	r2, [r3, #16]
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	08da      	lsrs	r2, r3, #3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3208      	adds	r2, #8
 8001e1a:	69b9      	ldr	r1, [r7, #24]
 8001e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	2203      	movs	r2, #3
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4013      	ands	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 0203 	and.w	r2, r3, #3
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 80a2 	beq.w	8001fa6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	4b57      	ldr	r3, [pc, #348]	; (8001fc4 <HAL_GPIO_Init+0x2e8>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	4a56      	ldr	r2, [pc, #344]	; (8001fc4 <HAL_GPIO_Init+0x2e8>)
 8001e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e70:	6453      	str	r3, [r2, #68]	; 0x44
 8001e72:	4b54      	ldr	r3, [pc, #336]	; (8001fc4 <HAL_GPIO_Init+0x2e8>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e7e:	4a52      	ldr	r2, [pc, #328]	; (8001fc8 <HAL_GPIO_Init+0x2ec>)
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	089b      	lsrs	r3, r3, #2
 8001e84:	3302      	adds	r3, #2
 8001e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	220f      	movs	r2, #15
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a49      	ldr	r2, [pc, #292]	; (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d019      	beq.n	8001ede <HAL_GPIO_Init+0x202>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a48      	ldr	r2, [pc, #288]	; (8001fd0 <HAL_GPIO_Init+0x2f4>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d013      	beq.n	8001eda <HAL_GPIO_Init+0x1fe>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a47      	ldr	r2, [pc, #284]	; (8001fd4 <HAL_GPIO_Init+0x2f8>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d00d      	beq.n	8001ed6 <HAL_GPIO_Init+0x1fa>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a46      	ldr	r2, [pc, #280]	; (8001fd8 <HAL_GPIO_Init+0x2fc>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d007      	beq.n	8001ed2 <HAL_GPIO_Init+0x1f6>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a45      	ldr	r2, [pc, #276]	; (8001fdc <HAL_GPIO_Init+0x300>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d101      	bne.n	8001ece <HAL_GPIO_Init+0x1f2>
 8001eca:	2304      	movs	r3, #4
 8001ecc:	e008      	b.n	8001ee0 <HAL_GPIO_Init+0x204>
 8001ece:	2307      	movs	r3, #7
 8001ed0:	e006      	b.n	8001ee0 <HAL_GPIO_Init+0x204>
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e004      	b.n	8001ee0 <HAL_GPIO_Init+0x204>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e002      	b.n	8001ee0 <HAL_GPIO_Init+0x204>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <HAL_GPIO_Init+0x204>
 8001ede:	2300      	movs	r3, #0
 8001ee0:	69fa      	ldr	r2, [r7, #28]
 8001ee2:	f002 0203 	and.w	r2, r2, #3
 8001ee6:	0092      	lsls	r2, r2, #2
 8001ee8:	4093      	lsls	r3, r2
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ef0:	4935      	ldr	r1, [pc, #212]	; (8001fc8 <HAL_GPIO_Init+0x2ec>)
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	089b      	lsrs	r3, r3, #2
 8001ef6:	3302      	adds	r3, #2
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001efe:	4b38      	ldr	r3, [pc, #224]	; (8001fe0 <HAL_GPIO_Init+0x304>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	43db      	mvns	r3, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f22:	4a2f      	ldr	r2, [pc, #188]	; (8001fe0 <HAL_GPIO_Init+0x304>)
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f28:	4b2d      	ldr	r3, [pc, #180]	; (8001fe0 <HAL_GPIO_Init+0x304>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f4c:	4a24      	ldr	r2, [pc, #144]	; (8001fe0 <HAL_GPIO_Init+0x304>)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f52:	4b23      	ldr	r3, [pc, #140]	; (8001fe0 <HAL_GPIO_Init+0x304>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f76:	4a1a      	ldr	r2, [pc, #104]	; (8001fe0 <HAL_GPIO_Init+0x304>)
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f7c:	4b18      	ldr	r3, [pc, #96]	; (8001fe0 <HAL_GPIO_Init+0x304>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fa0:	4a0f      	ldr	r2, [pc, #60]	; (8001fe0 <HAL_GPIO_Init+0x304>)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	61fb      	str	r3, [r7, #28]
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	2b0f      	cmp	r3, #15
 8001fb0:	f67f aea2 	bls.w	8001cf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
 8001fb8:	3724      	adds	r7, #36	; 0x24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40013800 	.word	0x40013800
 8001fcc:	40020000 	.word	0x40020000
 8001fd0:	40020400 	.word	0x40020400
 8001fd4:	40020800 	.word	0x40020800
 8001fd8:	40020c00 	.word	0x40020c00
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40013c00 	.word	0x40013c00

08001fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	807b      	strh	r3, [r7, #2]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ff4:	787b      	ldrb	r3, [r7, #1]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ffa:	887a      	ldrh	r2, [r7, #2]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002000:	e003      	b.n	800200a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002002:	887b      	ldrh	r3, [r7, #2]
 8002004:	041a      	lsls	r2, r3, #16
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	619a      	str	r2, [r3, #24]
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002022:	4b08      	ldr	r3, [pc, #32]	; (8002044 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002024:	695a      	ldr	r2, [r3, #20]
 8002026:	88fb      	ldrh	r3, [r7, #6]
 8002028:	4013      	ands	r3, r2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d006      	beq.n	800203c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800202e:	4a05      	ldr	r2, [pc, #20]	; (8002044 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002030:	88fb      	ldrh	r3, [r7, #6]
 8002032:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002034:	88fb      	ldrh	r3, [r7, #6]
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe ff26 	bl	8000e88 <HAL_GPIO_EXTI_Callback>
  }
}
 800203c:	bf00      	nop
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40013c00 	.word	0x40013c00

08002048 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800204a:	b08f      	sub	sp, #60	; 0x3c
 800204c:	af0a      	add	r7, sp, #40	; 0x28
 800204e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e054      	b.n	8002104 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	d106      	bne.n	800207a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f005 ff17 	bl	8007ea8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2203      	movs	r2, #3
 800207e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208a:	2b00      	cmp	r3, #0
 800208c:	d102      	bne.n	8002094 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f002 ff45 	bl	8004f28 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	603b      	str	r3, [r7, #0]
 80020a4:	687e      	ldr	r6, [r7, #4]
 80020a6:	466d      	mov	r5, sp
 80020a8:	f106 0410 	add.w	r4, r6, #16
 80020ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80020bc:	1d33      	adds	r3, r6, #4
 80020be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020c0:	6838      	ldr	r0, [r7, #0]
 80020c2:	f002 febf 	bl	8004e44 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2101      	movs	r1, #1
 80020cc:	4618      	mov	r0, r3
 80020ce:	f002 ff3c 	bl	8004f4a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	687e      	ldr	r6, [r7, #4]
 80020da:	466d      	mov	r5, sp
 80020dc:	f106 0410 	add.w	r4, r6, #16
 80020e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80020f0:	1d33      	adds	r3, r6, #4
 80020f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020f4:	6838      	ldr	r0, [r7, #0]
 80020f6:	f003 f8c5 	bl	8005284 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800210c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800210c:	b590      	push	{r4, r7, lr}
 800210e:	b089      	sub	sp, #36	; 0x24
 8002110:	af04      	add	r7, sp, #16
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	4608      	mov	r0, r1
 8002116:	4611      	mov	r1, r2
 8002118:	461a      	mov	r2, r3
 800211a:	4603      	mov	r3, r0
 800211c:	70fb      	strb	r3, [r7, #3]
 800211e:	460b      	mov	r3, r1
 8002120:	70bb      	strb	r3, [r7, #2]
 8002122:	4613      	mov	r3, r2
 8002124:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800212c:	2b01      	cmp	r3, #1
 800212e:	d101      	bne.n	8002134 <HAL_HCD_HC_Init+0x28>
 8002130:	2302      	movs	r3, #2
 8002132:	e076      	b.n	8002222 <HAL_HCD_HC_Init+0x116>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800213c:	78fb      	ldrb	r3, [r7, #3]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	212c      	movs	r1, #44	; 0x2c
 8002142:	fb01 f303 	mul.w	r3, r1, r3
 8002146:	4413      	add	r3, r2
 8002148:	333d      	adds	r3, #61	; 0x3d
 800214a:	2200      	movs	r2, #0
 800214c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800214e:	78fb      	ldrb	r3, [r7, #3]
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	212c      	movs	r1, #44	; 0x2c
 8002154:	fb01 f303 	mul.w	r3, r1, r3
 8002158:	4413      	add	r3, r2
 800215a:	3338      	adds	r3, #56	; 0x38
 800215c:	787a      	ldrb	r2, [r7, #1]
 800215e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	212c      	movs	r1, #44	; 0x2c
 8002166:	fb01 f303 	mul.w	r3, r1, r3
 800216a:	4413      	add	r3, r2
 800216c:	3340      	adds	r3, #64	; 0x40
 800216e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002170:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002172:	78fb      	ldrb	r3, [r7, #3]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	212c      	movs	r1, #44	; 0x2c
 8002178:	fb01 f303 	mul.w	r3, r1, r3
 800217c:	4413      	add	r3, r2
 800217e:	3339      	adds	r3, #57	; 0x39
 8002180:	78fa      	ldrb	r2, [r7, #3]
 8002182:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	212c      	movs	r1, #44	; 0x2c
 800218a:	fb01 f303 	mul.w	r3, r1, r3
 800218e:	4413      	add	r3, r2
 8002190:	333f      	adds	r3, #63	; 0x3f
 8002192:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002196:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002198:	78fb      	ldrb	r3, [r7, #3]
 800219a:	78ba      	ldrb	r2, [r7, #2]
 800219c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021a0:	b2d0      	uxtb	r0, r2
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	212c      	movs	r1, #44	; 0x2c
 80021a6:	fb01 f303 	mul.w	r3, r1, r3
 80021aa:	4413      	add	r3, r2
 80021ac:	333a      	adds	r3, #58	; 0x3a
 80021ae:	4602      	mov	r2, r0
 80021b0:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80021b2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	da09      	bge.n	80021ce <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80021ba:	78fb      	ldrb	r3, [r7, #3]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	212c      	movs	r1, #44	; 0x2c
 80021c0:	fb01 f303 	mul.w	r3, r1, r3
 80021c4:	4413      	add	r3, r2
 80021c6:	333b      	adds	r3, #59	; 0x3b
 80021c8:	2201      	movs	r2, #1
 80021ca:	701a      	strb	r2, [r3, #0]
 80021cc:	e008      	b.n	80021e0 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	212c      	movs	r1, #44	; 0x2c
 80021d4:	fb01 f303 	mul.w	r3, r1, r3
 80021d8:	4413      	add	r3, r2
 80021da:	333b      	adds	r3, #59	; 0x3b
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80021e0:	78fb      	ldrb	r3, [r7, #3]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	212c      	movs	r1, #44	; 0x2c
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	333c      	adds	r3, #60	; 0x3c
 80021ee:	f897 2020 	ldrb.w	r2, [r7, #32]
 80021f2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6818      	ldr	r0, [r3, #0]
 80021f8:	787c      	ldrb	r4, [r7, #1]
 80021fa:	78ba      	ldrb	r2, [r7, #2]
 80021fc:	78f9      	ldrb	r1, [r7, #3]
 80021fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002200:	9302      	str	r3, [sp, #8]
 8002202:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002206:	9301      	str	r3, [sp, #4]
 8002208:	f897 3020 	ldrb.w	r3, [r7, #32]
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	4623      	mov	r3, r4
 8002210:	f003 f9be 	bl	8005590 <USB_HC_Init>
 8002214:	4603      	mov	r3, r0
 8002216:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002220:	7bfb      	ldrb	r3, [r7, #15]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	bd90      	pop	{r4, r7, pc}

0800222a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b084      	sub	sp, #16
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	460b      	mov	r3, r1
 8002234:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002236:	2300      	movs	r3, #0
 8002238:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002240:	2b01      	cmp	r3, #1
 8002242:	d101      	bne.n	8002248 <HAL_HCD_HC_Halt+0x1e>
 8002244:	2302      	movs	r3, #2
 8002246:	e00f      	b.n	8002268 <HAL_HCD_HC_Halt+0x3e>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	78fa      	ldrb	r2, [r7, #3]
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f003 fc0e 	bl	8005a7a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002266:	7bfb      	ldrb	r3, [r7, #15]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	4608      	mov	r0, r1
 800227a:	4611      	mov	r1, r2
 800227c:	461a      	mov	r2, r3
 800227e:	4603      	mov	r3, r0
 8002280:	70fb      	strb	r3, [r7, #3]
 8002282:	460b      	mov	r3, r1
 8002284:	70bb      	strb	r3, [r7, #2]
 8002286:	4613      	mov	r3, r2
 8002288:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800228a:	78fb      	ldrb	r3, [r7, #3]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	212c      	movs	r1, #44	; 0x2c
 8002290:	fb01 f303 	mul.w	r3, r1, r3
 8002294:	4413      	add	r3, r2
 8002296:	333b      	adds	r3, #59	; 0x3b
 8002298:	78ba      	ldrb	r2, [r7, #2]
 800229a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800229c:	78fb      	ldrb	r3, [r7, #3]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	212c      	movs	r1, #44	; 0x2c
 80022a2:	fb01 f303 	mul.w	r3, r1, r3
 80022a6:	4413      	add	r3, r2
 80022a8:	333f      	adds	r3, #63	; 0x3f
 80022aa:	787a      	ldrb	r2, [r7, #1]
 80022ac:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80022ae:	7c3b      	ldrb	r3, [r7, #16]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d112      	bne.n	80022da <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80022b4:	78fb      	ldrb	r3, [r7, #3]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	212c      	movs	r1, #44	; 0x2c
 80022ba:	fb01 f303 	mul.w	r3, r1, r3
 80022be:	4413      	add	r3, r2
 80022c0:	3342      	adds	r3, #66	; 0x42
 80022c2:	2203      	movs	r2, #3
 80022c4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80022c6:	78fb      	ldrb	r3, [r7, #3]
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	212c      	movs	r1, #44	; 0x2c
 80022cc:	fb01 f303 	mul.w	r3, r1, r3
 80022d0:	4413      	add	r3, r2
 80022d2:	333d      	adds	r3, #61	; 0x3d
 80022d4:	7f3a      	ldrb	r2, [r7, #28]
 80022d6:	701a      	strb	r2, [r3, #0]
 80022d8:	e008      	b.n	80022ec <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022da:	78fb      	ldrb	r3, [r7, #3]
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	212c      	movs	r1, #44	; 0x2c
 80022e0:	fb01 f303 	mul.w	r3, r1, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	3342      	adds	r3, #66	; 0x42
 80022e8:	2202      	movs	r2, #2
 80022ea:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80022ec:	787b      	ldrb	r3, [r7, #1]
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	f200 80c6 	bhi.w	8002480 <HAL_HCD_HC_SubmitRequest+0x210>
 80022f4:	a201      	add	r2, pc, #4	; (adr r2, 80022fc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80022f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022fa:	bf00      	nop
 80022fc:	0800230d 	.word	0x0800230d
 8002300:	0800246d 	.word	0x0800246d
 8002304:	08002371 	.word	0x08002371
 8002308:	080023ef 	.word	0x080023ef
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800230c:	7c3b      	ldrb	r3, [r7, #16]
 800230e:	2b01      	cmp	r3, #1
 8002310:	f040 80b8 	bne.w	8002484 <HAL_HCD_HC_SubmitRequest+0x214>
 8002314:	78bb      	ldrb	r3, [r7, #2]
 8002316:	2b00      	cmp	r3, #0
 8002318:	f040 80b4 	bne.w	8002484 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800231c:	8b3b      	ldrh	r3, [r7, #24]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d108      	bne.n	8002334 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002322:	78fb      	ldrb	r3, [r7, #3]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	212c      	movs	r1, #44	; 0x2c
 8002328:	fb01 f303 	mul.w	r3, r1, r3
 800232c:	4413      	add	r3, r2
 800232e:	3355      	adds	r3, #85	; 0x55
 8002330:	2201      	movs	r2, #1
 8002332:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002334:	78fb      	ldrb	r3, [r7, #3]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	212c      	movs	r1, #44	; 0x2c
 800233a:	fb01 f303 	mul.w	r3, r1, r3
 800233e:	4413      	add	r3, r2
 8002340:	3355      	adds	r3, #85	; 0x55
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d109      	bne.n	800235c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002348:	78fb      	ldrb	r3, [r7, #3]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	212c      	movs	r1, #44	; 0x2c
 800234e:	fb01 f303 	mul.w	r3, r1, r3
 8002352:	4413      	add	r3, r2
 8002354:	3342      	adds	r3, #66	; 0x42
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800235a:	e093      	b.n	8002484 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800235c:	78fb      	ldrb	r3, [r7, #3]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	212c      	movs	r1, #44	; 0x2c
 8002362:	fb01 f303 	mul.w	r3, r1, r3
 8002366:	4413      	add	r3, r2
 8002368:	3342      	adds	r3, #66	; 0x42
 800236a:	2202      	movs	r2, #2
 800236c:	701a      	strb	r2, [r3, #0]
      break;
 800236e:	e089      	b.n	8002484 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002370:	78bb      	ldrb	r3, [r7, #2]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d11d      	bne.n	80023b2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002376:	78fb      	ldrb	r3, [r7, #3]
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	212c      	movs	r1, #44	; 0x2c
 800237c:	fb01 f303 	mul.w	r3, r1, r3
 8002380:	4413      	add	r3, r2
 8002382:	3355      	adds	r3, #85	; 0x55
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d109      	bne.n	800239e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800238a:	78fb      	ldrb	r3, [r7, #3]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	212c      	movs	r1, #44	; 0x2c
 8002390:	fb01 f303 	mul.w	r3, r1, r3
 8002394:	4413      	add	r3, r2
 8002396:	3342      	adds	r3, #66	; 0x42
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800239c:	e073      	b.n	8002486 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	212c      	movs	r1, #44	; 0x2c
 80023a4:	fb01 f303 	mul.w	r3, r1, r3
 80023a8:	4413      	add	r3, r2
 80023aa:	3342      	adds	r3, #66	; 0x42
 80023ac:	2202      	movs	r2, #2
 80023ae:	701a      	strb	r2, [r3, #0]
      break;
 80023b0:	e069      	b.n	8002486 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	212c      	movs	r1, #44	; 0x2c
 80023b8:	fb01 f303 	mul.w	r3, r1, r3
 80023bc:	4413      	add	r3, r2
 80023be:	3354      	adds	r3, #84	; 0x54
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d109      	bne.n	80023da <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023c6:	78fb      	ldrb	r3, [r7, #3]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	212c      	movs	r1, #44	; 0x2c
 80023cc:	fb01 f303 	mul.w	r3, r1, r3
 80023d0:	4413      	add	r3, r2
 80023d2:	3342      	adds	r3, #66	; 0x42
 80023d4:	2200      	movs	r2, #0
 80023d6:	701a      	strb	r2, [r3, #0]
      break;
 80023d8:	e055      	b.n	8002486 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023da:	78fb      	ldrb	r3, [r7, #3]
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	212c      	movs	r1, #44	; 0x2c
 80023e0:	fb01 f303 	mul.w	r3, r1, r3
 80023e4:	4413      	add	r3, r2
 80023e6:	3342      	adds	r3, #66	; 0x42
 80023e8:	2202      	movs	r2, #2
 80023ea:	701a      	strb	r2, [r3, #0]
      break;
 80023ec:	e04b      	b.n	8002486 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80023ee:	78bb      	ldrb	r3, [r7, #2]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d11d      	bne.n	8002430 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023f4:	78fb      	ldrb	r3, [r7, #3]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	212c      	movs	r1, #44	; 0x2c
 80023fa:	fb01 f303 	mul.w	r3, r1, r3
 80023fe:	4413      	add	r3, r2
 8002400:	3355      	adds	r3, #85	; 0x55
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d109      	bne.n	800241c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002408:	78fb      	ldrb	r3, [r7, #3]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	212c      	movs	r1, #44	; 0x2c
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	4413      	add	r3, r2
 8002414:	3342      	adds	r3, #66	; 0x42
 8002416:	2200      	movs	r2, #0
 8002418:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800241a:	e034      	b.n	8002486 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800241c:	78fb      	ldrb	r3, [r7, #3]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	212c      	movs	r1, #44	; 0x2c
 8002422:	fb01 f303 	mul.w	r3, r1, r3
 8002426:	4413      	add	r3, r2
 8002428:	3342      	adds	r3, #66	; 0x42
 800242a:	2202      	movs	r2, #2
 800242c:	701a      	strb	r2, [r3, #0]
      break;
 800242e:	e02a      	b.n	8002486 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002430:	78fb      	ldrb	r3, [r7, #3]
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	212c      	movs	r1, #44	; 0x2c
 8002436:	fb01 f303 	mul.w	r3, r1, r3
 800243a:	4413      	add	r3, r2
 800243c:	3354      	adds	r3, #84	; 0x54
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d109      	bne.n	8002458 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002444:	78fb      	ldrb	r3, [r7, #3]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	212c      	movs	r1, #44	; 0x2c
 800244a:	fb01 f303 	mul.w	r3, r1, r3
 800244e:	4413      	add	r3, r2
 8002450:	3342      	adds	r3, #66	; 0x42
 8002452:	2200      	movs	r2, #0
 8002454:	701a      	strb	r2, [r3, #0]
      break;
 8002456:	e016      	b.n	8002486 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	212c      	movs	r1, #44	; 0x2c
 800245e:	fb01 f303 	mul.w	r3, r1, r3
 8002462:	4413      	add	r3, r2
 8002464:	3342      	adds	r3, #66	; 0x42
 8002466:	2202      	movs	r2, #2
 8002468:	701a      	strb	r2, [r3, #0]
      break;
 800246a:	e00c      	b.n	8002486 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	212c      	movs	r1, #44	; 0x2c
 8002472:	fb01 f303 	mul.w	r3, r1, r3
 8002476:	4413      	add	r3, r2
 8002478:	3342      	adds	r3, #66	; 0x42
 800247a:	2200      	movs	r2, #0
 800247c:	701a      	strb	r2, [r3, #0]
      break;
 800247e:	e002      	b.n	8002486 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002480:	bf00      	nop
 8002482:	e000      	b.n	8002486 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002484:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002486:	78fb      	ldrb	r3, [r7, #3]
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	212c      	movs	r1, #44	; 0x2c
 800248c:	fb01 f303 	mul.w	r3, r1, r3
 8002490:	4413      	add	r3, r2
 8002492:	3344      	adds	r3, #68	; 0x44
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002498:	78fb      	ldrb	r3, [r7, #3]
 800249a:	8b3a      	ldrh	r2, [r7, #24]
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	202c      	movs	r0, #44	; 0x2c
 80024a0:	fb00 f303 	mul.w	r3, r0, r3
 80024a4:	440b      	add	r3, r1
 80024a6:	334c      	adds	r3, #76	; 0x4c
 80024a8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80024aa:	78fb      	ldrb	r3, [r7, #3]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	212c      	movs	r1, #44	; 0x2c
 80024b0:	fb01 f303 	mul.w	r3, r1, r3
 80024b4:	4413      	add	r3, r2
 80024b6:	3360      	adds	r3, #96	; 0x60
 80024b8:	2200      	movs	r2, #0
 80024ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80024bc:	78fb      	ldrb	r3, [r7, #3]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	212c      	movs	r1, #44	; 0x2c
 80024c2:	fb01 f303 	mul.w	r3, r1, r3
 80024c6:	4413      	add	r3, r2
 80024c8:	3350      	adds	r3, #80	; 0x50
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80024ce:	78fb      	ldrb	r3, [r7, #3]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	212c      	movs	r1, #44	; 0x2c
 80024d4:	fb01 f303 	mul.w	r3, r1, r3
 80024d8:	4413      	add	r3, r2
 80024da:	3339      	adds	r3, #57	; 0x39
 80024dc:	78fa      	ldrb	r2, [r7, #3]
 80024de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80024e0:	78fb      	ldrb	r3, [r7, #3]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	212c      	movs	r1, #44	; 0x2c
 80024e6:	fb01 f303 	mul.w	r3, r1, r3
 80024ea:	4413      	add	r3, r2
 80024ec:	3361      	adds	r3, #97	; 0x61
 80024ee:	2200      	movs	r2, #0
 80024f0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6818      	ldr	r0, [r3, #0]
 80024f6:	78fb      	ldrb	r3, [r7, #3]
 80024f8:	222c      	movs	r2, #44	; 0x2c
 80024fa:	fb02 f303 	mul.w	r3, r2, r3
 80024fe:	3338      	adds	r3, #56	; 0x38
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	18d1      	adds	r1, r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	461a      	mov	r2, r3
 800250c:	f003 f962 	bl	80057d4 <USB_HC_StartXfer>
 8002510:	4603      	mov	r3, r0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop

0800251c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f002 fe63 	bl	80051fe <USB_GetMode>
 8002538:	4603      	mov	r3, r0
 800253a:	2b01      	cmp	r3, #1
 800253c:	f040 80f6 	bne.w	800272c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f002 fe47 	bl	80051d8 <USB_ReadInterrupts>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 80ec 	beq.w	800272a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f002 fe3e 	bl	80051d8 <USB_ReadInterrupts>
 800255c:	4603      	mov	r3, r0
 800255e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002562:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002566:	d104      	bne.n	8002572 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002570:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f002 fe2e 	bl	80051d8 <USB_ReadInterrupts>
 800257c:	4603      	mov	r3, r0
 800257e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002586:	d104      	bne.n	8002592 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002590:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f002 fe1e 	bl	80051d8 <USB_ReadInterrupts>
 800259c:	4603      	mov	r3, r0
 800259e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025a6:	d104      	bne.n	80025b2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80025b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f002 fe0e 	bl	80051d8 <USB_ReadInterrupts>
 80025bc:	4603      	mov	r3, r0
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d103      	bne.n	80025ce <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2202      	movs	r2, #2
 80025cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f002 fe00 	bl	80051d8 <USB_ReadInterrupts>
 80025d8:	4603      	mov	r3, r0
 80025da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025e2:	d11c      	bne.n	800261e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80025ec:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10f      	bne.n	800261e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80025fe:	2110      	movs	r1, #16
 8002600:	6938      	ldr	r0, [r7, #16]
 8002602:	f002 fcef 	bl	8004fe4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002606:	6938      	ldr	r0, [r7, #16]
 8002608:	f002 fd20 	bl	800504c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2101      	movs	r1, #1
 8002612:	4618      	mov	r0, r3
 8002614:	f002 fef6 	bl	8005404 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f005 fcc3 	bl	8007fa4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f002 fdd8 	bl	80051d8 <USB_ReadInterrupts>
 8002628:	4603      	mov	r3, r0
 800262a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800262e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002632:	d102      	bne.n	800263a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f001 f89e 	bl	8003776 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f002 fdca 	bl	80051d8 <USB_ReadInterrupts>
 8002644:	4603      	mov	r3, r0
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b08      	cmp	r3, #8
 800264c:	d106      	bne.n	800265c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f005 fc8c 	bl	8007f6c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2208      	movs	r2, #8
 800265a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f002 fdb9 	bl	80051d8 <USB_ReadInterrupts>
 8002666:	4603      	mov	r3, r0
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	2b10      	cmp	r3, #16
 800266e:	d101      	bne.n	8002674 <HAL_HCD_IRQHandler+0x158>
 8002670:	2301      	movs	r3, #1
 8002672:	e000      	b.n	8002676 <HAL_HCD_IRQHandler+0x15a>
 8002674:	2300      	movs	r3, #0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d012      	beq.n	80026a0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	699a      	ldr	r2, [r3, #24]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0210 	bic.w	r2, r2, #16
 8002688:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 ffa1 	bl	80035d2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699a      	ldr	r2, [r3, #24]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0210 	orr.w	r2, r2, #16
 800269e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f002 fd97 	bl	80051d8 <USB_ReadInterrupts>
 80026aa:	4603      	mov	r3, r0
 80026ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026b4:	d13a      	bne.n	800272c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f003 f9cc 	bl	8005a58 <USB_HC_ReadInterrupt>
 80026c0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	e025      	b.n	8002714 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	fa22 f303 	lsr.w	r3, r2, r3
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d018      	beq.n	800270e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	015a      	lsls	r2, r3, #5
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026f2:	d106      	bne.n	8002702 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	4619      	mov	r1, r3
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f8ab 	bl	8002856 <HCD_HC_IN_IRQHandler>
 8002700:	e005      	b.n	800270e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	b2db      	uxtb	r3, r3
 8002706:	4619      	mov	r1, r3
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 fbf9 	bl	8002f00 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	3301      	adds	r3, #1
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	429a      	cmp	r2, r3
 800271c:	d3d4      	bcc.n	80026c8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002726:	615a      	str	r2, [r3, #20]
 8002728:	e000      	b.n	800272c <HAL_HCD_IRQHandler+0x210>
      return;
 800272a:	bf00      	nop
    }
  }
}
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_HCD_Start+0x16>
 8002744:	2302      	movs	r3, #2
 8002746:	e013      	b.n	8002770 <HAL_HCD_Start+0x3e>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2101      	movs	r1, #1
 8002756:	4618      	mov	r0, r3
 8002758:	f002 feb8 	bl	80054cc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f002 fbd0 	bl	8004f06 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_HCD_Stop+0x16>
 800278a:	2302      	movs	r3, #2
 800278c:	e00d      	b.n	80027aa <HAL_HCD_Stop+0x32>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f003 faa6 	bl	8005cec <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f002 fe5a 	bl	8005478 <USB_ResetPort>
 80027c4:	4603      	mov	r3, r0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	460b      	mov	r3, r1
 80027d8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80027da:	78fb      	ldrb	r3, [r7, #3]
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	212c      	movs	r1, #44	; 0x2c
 80027e0:	fb01 f303 	mul.w	r3, r1, r3
 80027e4:	4413      	add	r3, r2
 80027e6:	3360      	adds	r3, #96	; 0x60
 80027e8:	781b      	ldrb	r3, [r3, #0]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	460b      	mov	r3, r1
 8002800:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002802:	78fb      	ldrb	r3, [r7, #3]
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	212c      	movs	r1, #44	; 0x2c
 8002808:	fb01 f303 	mul.w	r3, r1, r3
 800280c:	4413      	add	r3, r2
 800280e:	3350      	adds	r3, #80	; 0x50
 8002810:	681b      	ldr	r3, [r3, #0]
}
 8002812:	4618      	mov	r0, r3
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f002 fe9e 	bl	800556c <USB_GetCurrentFrame>
 8002830:	4603      	mov	r3, r0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f002 fe79 	bl	800553e <USB_GetHostSpeed>
 800284c:	4603      	mov	r3, r0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b086      	sub	sp, #24
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
 800285e:	460b      	mov	r3, r1
 8002860:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800286c:	78fb      	ldrb	r3, [r7, #3]
 800286e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4413      	add	r3, r2
 8002878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	2b04      	cmp	r3, #4
 8002884:	d11a      	bne.n	80028bc <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	015a      	lsls	r2, r3, #5
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	4413      	add	r3, r2
 800288e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002892:	461a      	mov	r2, r3
 8002894:	2304      	movs	r3, #4
 8002896:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	212c      	movs	r1, #44	; 0x2c
 800289e:	fb01 f303 	mul.w	r3, r1, r3
 80028a2:	4413      	add	r3, r2
 80028a4:	3361      	adds	r3, #97	; 0x61
 80028a6:	2206      	movs	r2, #6
 80028a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	4611      	mov	r1, r2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f003 f8e0 	bl	8005a7a <USB_HC_Halt>
 80028ba:	e0af      	b.n	8002a1c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	015a      	lsls	r2, r3, #5
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028d2:	d11b      	bne.n	800290c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	015a      	lsls	r2, r3, #5
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4413      	add	r3, r2
 80028dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e0:	461a      	mov	r2, r3
 80028e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	212c      	movs	r1, #44	; 0x2c
 80028ee:	fb01 f303 	mul.w	r3, r1, r3
 80028f2:	4413      	add	r3, r2
 80028f4:	3361      	adds	r3, #97	; 0x61
 80028f6:	2207      	movs	r2, #7
 80028f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f003 f8b8 	bl	8005a7a <USB_HC_Halt>
 800290a:	e087      	b.n	8002a1c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	015a      	lsls	r2, r3, #5
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4413      	add	r3, r2
 8002914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 0320 	and.w	r3, r3, #32
 800291e:	2b20      	cmp	r3, #32
 8002920:	d109      	bne.n	8002936 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	015a      	lsls	r2, r3, #5
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4413      	add	r3, r2
 800292a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292e:	461a      	mov	r2, r3
 8002930:	2320      	movs	r3, #32
 8002932:	6093      	str	r3, [r2, #8]
 8002934:	e072      	b.n	8002a1c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	015a      	lsls	r2, r3, #5
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4413      	add	r3, r2
 800293e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 0308 	and.w	r3, r3, #8
 8002948:	2b08      	cmp	r3, #8
 800294a:	d11a      	bne.n	8002982 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4413      	add	r3, r2
 8002954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002958:	461a      	mov	r2, r3
 800295a:	2308      	movs	r3, #8
 800295c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	212c      	movs	r1, #44	; 0x2c
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	4413      	add	r3, r2
 800296a:	3361      	adds	r3, #97	; 0x61
 800296c:	2205      	movs	r2, #5
 800296e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	4611      	mov	r1, r2
 800297a:	4618      	mov	r0, r3
 800297c:	f003 f87d 	bl	8005a7a <USB_HC_Halt>
 8002980:	e04c      	b.n	8002a1c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	015a      	lsls	r2, r3, #5
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4413      	add	r3, r2
 800298a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002998:	d11b      	bne.n	80029d2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	015a      	lsls	r2, r3, #5
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	4413      	add	r3, r2
 80029a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a6:	461a      	mov	r2, r3
 80029a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	212c      	movs	r1, #44	; 0x2c
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	3361      	adds	r3, #97	; 0x61
 80029bc:	2208      	movs	r2, #8
 80029be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	4611      	mov	r1, r2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f003 f855 	bl	8005a7a <USB_HC_Halt>
 80029d0:	e024      	b.n	8002a1c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	015a      	lsls	r2, r3, #5
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	4413      	add	r3, r2
 80029da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e4:	2b80      	cmp	r3, #128	; 0x80
 80029e6:	d119      	bne.n	8002a1c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	015a      	lsls	r2, r3, #5
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4413      	add	r3, r2
 80029f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f4:	461a      	mov	r2, r3
 80029f6:	2380      	movs	r3, #128	; 0x80
 80029f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	212c      	movs	r1, #44	; 0x2c
 8002a00:	fb01 f303 	mul.w	r3, r1, r3
 8002a04:	4413      	add	r3, r2
 8002a06:	3361      	adds	r3, #97	; 0x61
 8002a08:	2206      	movs	r2, #6
 8002a0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	4611      	mov	r1, r2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f003 f82f 	bl	8005a7a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	015a      	lsls	r2, r3, #5
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a32:	d112      	bne.n	8002a5a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	4611      	mov	r1, r2
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f003 f81b 	bl	8005a7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	015a      	lsls	r2, r3, #5
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a50:	461a      	mov	r2, r3
 8002a52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a56:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002a58:	e24e      	b.n	8002ef8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	015a      	lsls	r2, r3, #5
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	f040 80df 	bne.w	8002c30 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d019      	beq.n	8002aae <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	212c      	movs	r1, #44	; 0x2c
 8002a80:	fb01 f303 	mul.w	r3, r1, r3
 8002a84:	4413      	add	r3, r2
 8002a86:	3348      	adds	r3, #72	; 0x48
 8002a88:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	0159      	lsls	r1, r3, #5
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	440b      	add	r3, r1
 8002a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002a9c:	1ad2      	subs	r2, r2, r3
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	202c      	movs	r0, #44	; 0x2c
 8002aa4:	fb00 f303 	mul.w	r3, r0, r3
 8002aa8:	440b      	add	r3, r1
 8002aaa:	3350      	adds	r3, #80	; 0x50
 8002aac:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	212c      	movs	r1, #44	; 0x2c
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	4413      	add	r3, r2
 8002aba:	3361      	adds	r3, #97	; 0x61
 8002abc:	2201      	movs	r2, #1
 8002abe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	212c      	movs	r1, #44	; 0x2c
 8002ac6:	fb01 f303 	mul.w	r3, r1, r3
 8002aca:	4413      	add	r3, r2
 8002acc:	335c      	adds	r3, #92	; 0x5c
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	015a      	lsls	r2, r3, #5
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4413      	add	r3, r2
 8002ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ade:	461a      	mov	r2, r3
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	212c      	movs	r1, #44	; 0x2c
 8002aea:	fb01 f303 	mul.w	r3, r1, r3
 8002aee:	4413      	add	r3, r2
 8002af0:	333f      	adds	r3, #63	; 0x3f
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d009      	beq.n	8002b0c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	212c      	movs	r1, #44	; 0x2c
 8002afe:	fb01 f303 	mul.w	r3, r1, r3
 8002b02:	4413      	add	r3, r2
 8002b04:	333f      	adds	r3, #63	; 0x3f
 8002b06:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d111      	bne.n	8002b30 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	4611      	mov	r1, r2
 8002b16:	4618      	mov	r0, r3
 8002b18:	f002 ffaf 	bl	8005a7a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b28:	461a      	mov	r2, r3
 8002b2a:	2310      	movs	r3, #16
 8002b2c:	6093      	str	r3, [r2, #8]
 8002b2e:	e03a      	b.n	8002ba6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	212c      	movs	r1, #44	; 0x2c
 8002b36:	fb01 f303 	mul.w	r3, r1, r3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	333f      	adds	r3, #63	; 0x3f
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b03      	cmp	r3, #3
 8002b42:	d009      	beq.n	8002b58 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	212c      	movs	r1, #44	; 0x2c
 8002b4a:	fb01 f303 	mul.w	r3, r1, r3
 8002b4e:	4413      	add	r3, r2
 8002b50:	333f      	adds	r3, #63	; 0x3f
 8002b52:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d126      	bne.n	8002ba6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	015a      	lsls	r2, r3, #5
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	4413      	add	r3, r2
 8002b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	0151      	lsls	r1, r2, #5
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	440a      	add	r2, r1
 8002b6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b76:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	212c      	movs	r1, #44	; 0x2c
 8002b7e:	fb01 f303 	mul.w	r3, r1, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	3360      	adds	r3, #96	; 0x60
 8002b86:	2201      	movs	r2, #1
 8002b88:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	b2d9      	uxtb	r1, r3
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	202c      	movs	r0, #44	; 0x2c
 8002b94:	fb00 f303 	mul.w	r3, r0, r3
 8002b98:	4413      	add	r3, r2
 8002b9a:	3360      	adds	r3, #96	; 0x60
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f005 fa0d 	bl	8007fc0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d12b      	bne.n	8002c06 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	212c      	movs	r1, #44	; 0x2c
 8002bb4:	fb01 f303 	mul.w	r3, r1, r3
 8002bb8:	4413      	add	r3, r2
 8002bba:	3348      	adds	r3, #72	; 0x48
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	202c      	movs	r0, #44	; 0x2c
 8002bc4:	fb00 f202 	mul.w	r2, r0, r2
 8002bc8:	440a      	add	r2, r1
 8002bca:	3240      	adds	r2, #64	; 0x40
 8002bcc:	8812      	ldrh	r2, [r2, #0]
 8002bce:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 818e 	beq.w	8002ef8 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	212c      	movs	r1, #44	; 0x2c
 8002be2:	fb01 f303 	mul.w	r3, r1, r3
 8002be6:	4413      	add	r3, r2
 8002be8:	3354      	adds	r3, #84	; 0x54
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	f083 0301 	eor.w	r3, r3, #1
 8002bf0:	b2d8      	uxtb	r0, r3
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	212c      	movs	r1, #44	; 0x2c
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3354      	adds	r3, #84	; 0x54
 8002c00:	4602      	mov	r2, r0
 8002c02:	701a      	strb	r2, [r3, #0]
}
 8002c04:	e178      	b.n	8002ef8 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	212c      	movs	r1, #44	; 0x2c
 8002c0c:	fb01 f303 	mul.w	r3, r1, r3
 8002c10:	4413      	add	r3, r2
 8002c12:	3354      	adds	r3, #84	; 0x54
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	f083 0301 	eor.w	r3, r3, #1
 8002c1a:	b2d8      	uxtb	r0, r3
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	212c      	movs	r1, #44	; 0x2c
 8002c22:	fb01 f303 	mul.w	r3, r1, r3
 8002c26:	4413      	add	r3, r2
 8002c28:	3354      	adds	r3, #84	; 0x54
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	701a      	strb	r2, [r3, #0]
}
 8002c2e:	e163      	b.n	8002ef8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	015a      	lsls	r2, r3, #5
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4413      	add	r3, r2
 8002c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	f040 80f6 	bne.w	8002e34 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	212c      	movs	r1, #44	; 0x2c
 8002c4e:	fb01 f303 	mul.w	r3, r1, r3
 8002c52:	4413      	add	r3, r2
 8002c54:	3361      	adds	r3, #97	; 0x61
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d109      	bne.n	8002c70 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	212c      	movs	r1, #44	; 0x2c
 8002c62:	fb01 f303 	mul.w	r3, r1, r3
 8002c66:	4413      	add	r3, r2
 8002c68:	3360      	adds	r3, #96	; 0x60
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	701a      	strb	r2, [r3, #0]
 8002c6e:	e0c9      	b.n	8002e04 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	212c      	movs	r1, #44	; 0x2c
 8002c76:	fb01 f303 	mul.w	r3, r1, r3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3361      	adds	r3, #97	; 0x61
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b05      	cmp	r3, #5
 8002c82:	d109      	bne.n	8002c98 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	212c      	movs	r1, #44	; 0x2c
 8002c8a:	fb01 f303 	mul.w	r3, r1, r3
 8002c8e:	4413      	add	r3, r2
 8002c90:	3360      	adds	r3, #96	; 0x60
 8002c92:	2205      	movs	r2, #5
 8002c94:	701a      	strb	r2, [r3, #0]
 8002c96:	e0b5      	b.n	8002e04 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	212c      	movs	r1, #44	; 0x2c
 8002c9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3361      	adds	r3, #97	; 0x61
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b06      	cmp	r3, #6
 8002caa:	d009      	beq.n	8002cc0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	212c      	movs	r1, #44	; 0x2c
 8002cb2:	fb01 f303 	mul.w	r3, r1, r3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3361      	adds	r3, #97	; 0x61
 8002cba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d150      	bne.n	8002d62 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	212c      	movs	r1, #44	; 0x2c
 8002cc6:	fb01 f303 	mul.w	r3, r1, r3
 8002cca:	4413      	add	r3, r2
 8002ccc:	335c      	adds	r3, #92	; 0x5c
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	1c5a      	adds	r2, r3, #1
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	202c      	movs	r0, #44	; 0x2c
 8002cd8:	fb00 f303 	mul.w	r3, r0, r3
 8002cdc:	440b      	add	r3, r1
 8002cde:	335c      	adds	r3, #92	; 0x5c
 8002ce0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	212c      	movs	r1, #44	; 0x2c
 8002ce8:	fb01 f303 	mul.w	r3, r1, r3
 8002cec:	4413      	add	r3, r2
 8002cee:	335c      	adds	r3, #92	; 0x5c
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d912      	bls.n	8002d1c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	212c      	movs	r1, #44	; 0x2c
 8002cfc:	fb01 f303 	mul.w	r3, r1, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	335c      	adds	r3, #92	; 0x5c
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	212c      	movs	r1, #44	; 0x2c
 8002d0e:	fb01 f303 	mul.w	r3, r1, r3
 8002d12:	4413      	add	r3, r2
 8002d14:	3360      	adds	r3, #96	; 0x60
 8002d16:	2204      	movs	r2, #4
 8002d18:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d1a:	e073      	b.n	8002e04 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	212c      	movs	r1, #44	; 0x2c
 8002d22:	fb01 f303 	mul.w	r3, r1, r3
 8002d26:	4413      	add	r3, r2
 8002d28:	3360      	adds	r3, #96	; 0x60
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	015a      	lsls	r2, r3, #5
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d44:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d4c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	015a      	lsls	r2, r3, #5
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4413      	add	r3, r2
 8002d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d60:	e050      	b.n	8002e04 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	212c      	movs	r1, #44	; 0x2c
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3361      	adds	r3, #97	; 0x61
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b03      	cmp	r3, #3
 8002d74:	d122      	bne.n	8002dbc <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	212c      	movs	r1, #44	; 0x2c
 8002d7c:	fb01 f303 	mul.w	r3, r1, r3
 8002d80:	4413      	add	r3, r2
 8002d82:	3360      	adds	r3, #96	; 0x60
 8002d84:	2202      	movs	r2, #2
 8002d86:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	015a      	lsls	r2, r3, #5
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	4413      	add	r3, r2
 8002d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d9e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002da6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	015a      	lsls	r2, r3, #5
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db4:	461a      	mov	r2, r3
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	e023      	b.n	8002e04 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	212c      	movs	r1, #44	; 0x2c
 8002dc2:	fb01 f303 	mul.w	r3, r1, r3
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3361      	adds	r3, #97	; 0x61
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b07      	cmp	r3, #7
 8002dce:	d119      	bne.n	8002e04 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	212c      	movs	r1, #44	; 0x2c
 8002dd6:	fb01 f303 	mul.w	r3, r1, r3
 8002dda:	4413      	add	r3, r2
 8002ddc:	335c      	adds	r3, #92	; 0x5c
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	202c      	movs	r0, #44	; 0x2c
 8002de8:	fb00 f303 	mul.w	r3, r0, r3
 8002dec:	440b      	add	r3, r1
 8002dee:	335c      	adds	r3, #92	; 0x5c
 8002df0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	212c      	movs	r1, #44	; 0x2c
 8002df8:	fb01 f303 	mul.w	r3, r1, r3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3360      	adds	r3, #96	; 0x60
 8002e00:	2204      	movs	r2, #4
 8002e02:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	015a      	lsls	r2, r3, #5
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e10:	461a      	mov	r2, r3
 8002e12:	2302      	movs	r3, #2
 8002e14:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	b2d9      	uxtb	r1, r3
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	202c      	movs	r0, #44	; 0x2c
 8002e20:	fb00 f303 	mul.w	r3, r0, r3
 8002e24:	4413      	add	r3, r2
 8002e26:	3360      	adds	r3, #96	; 0x60
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f005 f8c7 	bl	8007fc0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e32:	e061      	b.n	8002ef8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 0310 	and.w	r3, r3, #16
 8002e46:	2b10      	cmp	r3, #16
 8002e48:	d156      	bne.n	8002ef8 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	212c      	movs	r1, #44	; 0x2c
 8002e50:	fb01 f303 	mul.w	r3, r1, r3
 8002e54:	4413      	add	r3, r2
 8002e56:	333f      	adds	r3, #63	; 0x3f
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	d111      	bne.n	8002e82 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	212c      	movs	r1, #44	; 0x2c
 8002e64:	fb01 f303 	mul.w	r3, r1, r3
 8002e68:	4413      	add	r3, r2
 8002e6a:	335c      	adds	r3, #92	; 0x5c
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	4611      	mov	r1, r2
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f002 fdfd 	bl	8005a7a <USB_HC_Halt>
 8002e80:	e031      	b.n	8002ee6 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	212c      	movs	r1, #44	; 0x2c
 8002e88:	fb01 f303 	mul.w	r3, r1, r3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	333f      	adds	r3, #63	; 0x3f
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d009      	beq.n	8002eaa <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	212c      	movs	r1, #44	; 0x2c
 8002e9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	333f      	adds	r3, #63	; 0x3f
 8002ea4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d11d      	bne.n	8002ee6 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	212c      	movs	r1, #44	; 0x2c
 8002eb0:	fb01 f303 	mul.w	r3, r1, r3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	335c      	adds	r3, #92	; 0x5c
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d110      	bne.n	8002ee6 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	212c      	movs	r1, #44	; 0x2c
 8002eca:	fb01 f303 	mul.w	r3, r1, r3
 8002ece:	4413      	add	r3, r2
 8002ed0:	3361      	adds	r3, #97	; 0x61
 8002ed2:	2203      	movs	r2, #3
 8002ed4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	4611      	mov	r1, r2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f002 fdca 	bl	8005a7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	2310      	movs	r3, #16
 8002ef6:	6093      	str	r3, [r2, #8]
}
 8002ef8:	bf00      	nop
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b088      	sub	sp, #32
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002f16:	78fb      	ldrb	r3, [r7, #3]
 8002f18:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	015a      	lsls	r2, r3, #5
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d11a      	bne.n	8002f66 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	2304      	movs	r3, #4
 8002f40:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	212c      	movs	r1, #44	; 0x2c
 8002f48:	fb01 f303 	mul.w	r3, r1, r3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	3361      	adds	r3, #97	; 0x61
 8002f50:	2206      	movs	r2, #6
 8002f52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	4611      	mov	r1, r2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f002 fd8b 	bl	8005a7a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002f64:	e331      	b.n	80035ca <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	015a      	lsls	r2, r3, #5
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f003 0320 	and.w	r3, r3, #32
 8002f78:	2b20      	cmp	r3, #32
 8002f7a:	d12e      	bne.n	8002fda <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	015a      	lsls	r2, r3, #5
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f88:	461a      	mov	r2, r3
 8002f8a:	2320      	movs	r3, #32
 8002f8c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	212c      	movs	r1, #44	; 0x2c
 8002f94:	fb01 f303 	mul.w	r3, r1, r3
 8002f98:	4413      	add	r3, r2
 8002f9a:	333d      	adds	r3, #61	; 0x3d
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	f040 8313 	bne.w	80035ca <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	212c      	movs	r1, #44	; 0x2c
 8002faa:	fb01 f303 	mul.w	r3, r1, r3
 8002fae:	4413      	add	r3, r2
 8002fb0:	333d      	adds	r3, #61	; 0x3d
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	212c      	movs	r1, #44	; 0x2c
 8002fbc:	fb01 f303 	mul.w	r3, r1, r3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3360      	adds	r3, #96	; 0x60
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f002 fd51 	bl	8005a7a <USB_HC_Halt>
}
 8002fd8:	e2f7      	b.n	80035ca <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	015a      	lsls	r2, r3, #5
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ff0:	d112      	bne.n	8003018 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	015a      	lsls	r2, r3, #5
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ffe:	461a      	mov	r2, r3
 8003000:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003004:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	4611      	mov	r1, r2
 8003010:	4618      	mov	r0, r3
 8003012:	f002 fd32 	bl	8005a7a <USB_HC_Halt>
}
 8003016:	e2d8      	b.n	80035ca <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	4413      	add	r3, r2
 8003020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b01      	cmp	r3, #1
 800302c:	d140      	bne.n	80030b0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	212c      	movs	r1, #44	; 0x2c
 8003034:	fb01 f303 	mul.w	r3, r1, r3
 8003038:	4413      	add	r3, r2
 800303a:	335c      	adds	r3, #92	; 0x5c
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	4413      	add	r3, r2
 8003048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003052:	2b40      	cmp	r3, #64	; 0x40
 8003054:	d111      	bne.n	800307a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	212c      	movs	r1, #44	; 0x2c
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	4413      	add	r3, r2
 8003062:	333d      	adds	r3, #61	; 0x3d
 8003064:	2201      	movs	r2, #1
 8003066:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	015a      	lsls	r2, r3, #5
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	4413      	add	r3, r2
 8003070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003074:	461a      	mov	r2, r3
 8003076:	2340      	movs	r3, #64	; 0x40
 8003078:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	015a      	lsls	r2, r3, #5
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	4413      	add	r3, r2
 8003082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003086:	461a      	mov	r2, r3
 8003088:	2301      	movs	r3, #1
 800308a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	212c      	movs	r1, #44	; 0x2c
 8003092:	fb01 f303 	mul.w	r3, r1, r3
 8003096:	4413      	add	r3, r2
 8003098:	3361      	adds	r3, #97	; 0x61
 800309a:	2201      	movs	r2, #1
 800309c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	b2d2      	uxtb	r2, r2
 80030a6:	4611      	mov	r1, r2
 80030a8:	4618      	mov	r0, r3
 80030aa:	f002 fce6 	bl	8005a7a <USB_HC_Halt>
}
 80030ae:	e28c      	b.n	80035ca <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c2:	2b40      	cmp	r3, #64	; 0x40
 80030c4:	d12c      	bne.n	8003120 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	212c      	movs	r1, #44	; 0x2c
 80030cc:	fb01 f303 	mul.w	r3, r1, r3
 80030d0:	4413      	add	r3, r2
 80030d2:	3361      	adds	r3, #97	; 0x61
 80030d4:	2204      	movs	r2, #4
 80030d6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	212c      	movs	r1, #44	; 0x2c
 80030de:	fb01 f303 	mul.w	r3, r1, r3
 80030e2:	4413      	add	r3, r2
 80030e4:	333d      	adds	r3, #61	; 0x3d
 80030e6:	2201      	movs	r2, #1
 80030e8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	212c      	movs	r1, #44	; 0x2c
 80030f0:	fb01 f303 	mul.w	r3, r1, r3
 80030f4:	4413      	add	r3, r2
 80030f6:	335c      	adds	r3, #92	; 0x5c
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	4611      	mov	r1, r2
 8003106:	4618      	mov	r0, r3
 8003108:	f002 fcb7 	bl	8005a7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	4413      	add	r3, r2
 8003114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003118:	461a      	mov	r2, r3
 800311a:	2340      	movs	r3, #64	; 0x40
 800311c:	6093      	str	r3, [r2, #8]
}
 800311e:	e254      	b.n	80035ca <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	4413      	add	r3, r2
 8003128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b08      	cmp	r3, #8
 8003134:	d11a      	bne.n	800316c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	4413      	add	r3, r2
 800313e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003142:	461a      	mov	r2, r3
 8003144:	2308      	movs	r3, #8
 8003146:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	212c      	movs	r1, #44	; 0x2c
 800314e:	fb01 f303 	mul.w	r3, r1, r3
 8003152:	4413      	add	r3, r2
 8003154:	3361      	adds	r3, #97	; 0x61
 8003156:	2205      	movs	r2, #5
 8003158:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	4611      	mov	r1, r2
 8003164:	4618      	mov	r0, r3
 8003166:	f002 fc88 	bl	8005a7a <USB_HC_Halt>
}
 800316a:	e22e      	b.n	80035ca <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	015a      	lsls	r2, r3, #5
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	4413      	add	r3, r2
 8003174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 0310 	and.w	r3, r3, #16
 800317e:	2b10      	cmp	r3, #16
 8003180:	d140      	bne.n	8003204 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	212c      	movs	r1, #44	; 0x2c
 8003188:	fb01 f303 	mul.w	r3, r1, r3
 800318c:	4413      	add	r3, r2
 800318e:	335c      	adds	r3, #92	; 0x5c
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	212c      	movs	r1, #44	; 0x2c
 800319a:	fb01 f303 	mul.w	r3, r1, r3
 800319e:	4413      	add	r3, r2
 80031a0:	3361      	adds	r3, #97	; 0x61
 80031a2:	2203      	movs	r2, #3
 80031a4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	212c      	movs	r1, #44	; 0x2c
 80031ac:	fb01 f303 	mul.w	r3, r1, r3
 80031b0:	4413      	add	r3, r2
 80031b2:	333d      	adds	r3, #61	; 0x3d
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d112      	bne.n	80031e0 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	212c      	movs	r1, #44	; 0x2c
 80031c0:	fb01 f303 	mul.w	r3, r1, r3
 80031c4:	4413      	add	r3, r2
 80031c6:	333c      	adds	r3, #60	; 0x3c
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d108      	bne.n	80031e0 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	212c      	movs	r1, #44	; 0x2c
 80031d4:	fb01 f303 	mul.w	r3, r1, r3
 80031d8:	4413      	add	r3, r2
 80031da:	333d      	adds	r3, #61	; 0x3d
 80031dc:	2201      	movs	r2, #1
 80031de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	4611      	mov	r1, r2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f002 fc45 	bl	8005a7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	015a      	lsls	r2, r3, #5
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	4413      	add	r3, r2
 80031f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031fc:	461a      	mov	r2, r3
 80031fe:	2310      	movs	r3, #16
 8003200:	6093      	str	r3, [r2, #8]
}
 8003202:	e1e2      	b.n	80035ca <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	015a      	lsls	r2, r3, #5
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	4413      	add	r3, r2
 800320c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003216:	2b80      	cmp	r3, #128	; 0x80
 8003218:	d164      	bne.n	80032e4 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d111      	bne.n	8003246 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	212c      	movs	r1, #44	; 0x2c
 8003228:	fb01 f303 	mul.w	r3, r1, r3
 800322c:	4413      	add	r3, r2
 800322e:	3361      	adds	r3, #97	; 0x61
 8003230:	2206      	movs	r2, #6
 8003232:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	4611      	mov	r1, r2
 800323e:	4618      	mov	r0, r3
 8003240:	f002 fc1b 	bl	8005a7a <USB_HC_Halt>
 8003244:	e044      	b.n	80032d0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	212c      	movs	r1, #44	; 0x2c
 800324c:	fb01 f303 	mul.w	r3, r1, r3
 8003250:	4413      	add	r3, r2
 8003252:	335c      	adds	r3, #92	; 0x5c
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	1c5a      	adds	r2, r3, #1
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	202c      	movs	r0, #44	; 0x2c
 800325e:	fb00 f303 	mul.w	r3, r0, r3
 8003262:	440b      	add	r3, r1
 8003264:	335c      	adds	r3, #92	; 0x5c
 8003266:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	212c      	movs	r1, #44	; 0x2c
 800326e:	fb01 f303 	mul.w	r3, r1, r3
 8003272:	4413      	add	r3, r2
 8003274:	335c      	adds	r3, #92	; 0x5c
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2b02      	cmp	r3, #2
 800327a:	d920      	bls.n	80032be <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	212c      	movs	r1, #44	; 0x2c
 8003282:	fb01 f303 	mul.w	r3, r1, r3
 8003286:	4413      	add	r3, r2
 8003288:	335c      	adds	r3, #92	; 0x5c
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	212c      	movs	r1, #44	; 0x2c
 8003294:	fb01 f303 	mul.w	r3, r1, r3
 8003298:	4413      	add	r3, r2
 800329a:	3360      	adds	r3, #96	; 0x60
 800329c:	2204      	movs	r2, #4
 800329e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	b2d9      	uxtb	r1, r3
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	202c      	movs	r0, #44	; 0x2c
 80032aa:	fb00 f303 	mul.w	r3, r0, r3
 80032ae:	4413      	add	r3, r2
 80032b0:	3360      	adds	r3, #96	; 0x60
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	461a      	mov	r2, r3
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f004 fe82 	bl	8007fc0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80032bc:	e008      	b.n	80032d0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	212c      	movs	r1, #44	; 0x2c
 80032c4:	fb01 f303 	mul.w	r3, r1, r3
 80032c8:	4413      	add	r3, r2
 80032ca:	3360      	adds	r3, #96	; 0x60
 80032cc:	2202      	movs	r2, #2
 80032ce:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032dc:	461a      	mov	r2, r3
 80032de:	2380      	movs	r3, #128	; 0x80
 80032e0:	6093      	str	r3, [r2, #8]
}
 80032e2:	e172      	b.n	80035ca <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	015a      	lsls	r2, r3, #5
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032fa:	d11b      	bne.n	8003334 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	212c      	movs	r1, #44	; 0x2c
 8003302:	fb01 f303 	mul.w	r3, r1, r3
 8003306:	4413      	add	r3, r2
 8003308:	3361      	adds	r3, #97	; 0x61
 800330a:	2208      	movs	r2, #8
 800330c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	4611      	mov	r1, r2
 8003318:	4618      	mov	r0, r3
 800331a:	f002 fbae 	bl	8005a7a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	4413      	add	r3, r2
 8003326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332a:	461a      	mov	r2, r3
 800332c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003330:	6093      	str	r3, [r2, #8]
}
 8003332:	e14a      	b.n	80035ca <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	4413      	add	r3, r2
 800333c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b02      	cmp	r3, #2
 8003348:	f040 813f 	bne.w	80035ca <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	212c      	movs	r1, #44	; 0x2c
 8003352:	fb01 f303 	mul.w	r3, r1, r3
 8003356:	4413      	add	r3, r2
 8003358:	3361      	adds	r3, #97	; 0x61
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d17d      	bne.n	800345c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	212c      	movs	r1, #44	; 0x2c
 8003366:	fb01 f303 	mul.w	r3, r1, r3
 800336a:	4413      	add	r3, r2
 800336c:	3360      	adds	r3, #96	; 0x60
 800336e:	2201      	movs	r2, #1
 8003370:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	212c      	movs	r1, #44	; 0x2c
 8003378:	fb01 f303 	mul.w	r3, r1, r3
 800337c:	4413      	add	r3, r2
 800337e:	333f      	adds	r3, #63	; 0x3f
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d00a      	beq.n	800339c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	212c      	movs	r1, #44	; 0x2c
 800338c:	fb01 f303 	mul.w	r3, r1, r3
 8003390:	4413      	add	r3, r2
 8003392:	333f      	adds	r3, #63	; 0x3f
 8003394:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003396:	2b03      	cmp	r3, #3
 8003398:	f040 8100 	bne.w	800359c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d113      	bne.n	80033cc <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	212c      	movs	r1, #44	; 0x2c
 80033aa:	fb01 f303 	mul.w	r3, r1, r3
 80033ae:	4413      	add	r3, r2
 80033b0:	3355      	adds	r3, #85	; 0x55
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	f083 0301 	eor.w	r3, r3, #1
 80033b8:	b2d8      	uxtb	r0, r3
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	212c      	movs	r1, #44	; 0x2c
 80033c0:	fb01 f303 	mul.w	r3, r1, r3
 80033c4:	4413      	add	r3, r2
 80033c6:	3355      	adds	r3, #85	; 0x55
 80033c8:	4602      	mov	r2, r0
 80033ca:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	f040 80e3 	bne.w	800359c <HCD_HC_OUT_IRQHandler+0x69c>
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	212c      	movs	r1, #44	; 0x2c
 80033dc:	fb01 f303 	mul.w	r3, r1, r3
 80033e0:	4413      	add	r3, r2
 80033e2:	334c      	adds	r3, #76	; 0x4c
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 80d8 	beq.w	800359c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	212c      	movs	r1, #44	; 0x2c
 80033f2:	fb01 f303 	mul.w	r3, r1, r3
 80033f6:	4413      	add	r3, r2
 80033f8:	334c      	adds	r3, #76	; 0x4c
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	202c      	movs	r0, #44	; 0x2c
 8003402:	fb00 f202 	mul.w	r2, r0, r2
 8003406:	440a      	add	r2, r1
 8003408:	3240      	adds	r2, #64	; 0x40
 800340a:	8812      	ldrh	r2, [r2, #0]
 800340c:	4413      	add	r3, r2
 800340e:	3b01      	subs	r3, #1
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	202c      	movs	r0, #44	; 0x2c
 8003416:	fb00 f202 	mul.w	r2, r0, r2
 800341a:	440a      	add	r2, r1
 800341c:	3240      	adds	r2, #64	; 0x40
 800341e:	8812      	ldrh	r2, [r2, #0]
 8003420:	fbb3 f3f2 	udiv	r3, r3, r2
 8003424:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 80b5 	beq.w	800359c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	212c      	movs	r1, #44	; 0x2c
 8003438:	fb01 f303 	mul.w	r3, r1, r3
 800343c:	4413      	add	r3, r2
 800343e:	3355      	adds	r3, #85	; 0x55
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	f083 0301 	eor.w	r3, r3, #1
 8003446:	b2d8      	uxtb	r0, r3
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	212c      	movs	r1, #44	; 0x2c
 800344e:	fb01 f303 	mul.w	r3, r1, r3
 8003452:	4413      	add	r3, r2
 8003454:	3355      	adds	r3, #85	; 0x55
 8003456:	4602      	mov	r2, r0
 8003458:	701a      	strb	r2, [r3, #0]
 800345a:	e09f      	b.n	800359c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	212c      	movs	r1, #44	; 0x2c
 8003462:	fb01 f303 	mul.w	r3, r1, r3
 8003466:	4413      	add	r3, r2
 8003468:	3361      	adds	r3, #97	; 0x61
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b03      	cmp	r3, #3
 800346e:	d109      	bne.n	8003484 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	212c      	movs	r1, #44	; 0x2c
 8003476:	fb01 f303 	mul.w	r3, r1, r3
 800347a:	4413      	add	r3, r2
 800347c:	3360      	adds	r3, #96	; 0x60
 800347e:	2202      	movs	r2, #2
 8003480:	701a      	strb	r2, [r3, #0]
 8003482:	e08b      	b.n	800359c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	212c      	movs	r1, #44	; 0x2c
 800348a:	fb01 f303 	mul.w	r3, r1, r3
 800348e:	4413      	add	r3, r2
 8003490:	3361      	adds	r3, #97	; 0x61
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b04      	cmp	r3, #4
 8003496:	d109      	bne.n	80034ac <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	212c      	movs	r1, #44	; 0x2c
 800349e:	fb01 f303 	mul.w	r3, r1, r3
 80034a2:	4413      	add	r3, r2
 80034a4:	3360      	adds	r3, #96	; 0x60
 80034a6:	2202      	movs	r2, #2
 80034a8:	701a      	strb	r2, [r3, #0]
 80034aa:	e077      	b.n	800359c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	212c      	movs	r1, #44	; 0x2c
 80034b2:	fb01 f303 	mul.w	r3, r1, r3
 80034b6:	4413      	add	r3, r2
 80034b8:	3361      	adds	r3, #97	; 0x61
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b05      	cmp	r3, #5
 80034be:	d109      	bne.n	80034d4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	212c      	movs	r1, #44	; 0x2c
 80034c6:	fb01 f303 	mul.w	r3, r1, r3
 80034ca:	4413      	add	r3, r2
 80034cc:	3360      	adds	r3, #96	; 0x60
 80034ce:	2205      	movs	r2, #5
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	e063      	b.n	800359c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	212c      	movs	r1, #44	; 0x2c
 80034da:	fb01 f303 	mul.w	r3, r1, r3
 80034de:	4413      	add	r3, r2
 80034e0:	3361      	adds	r3, #97	; 0x61
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b06      	cmp	r3, #6
 80034e6:	d009      	beq.n	80034fc <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	212c      	movs	r1, #44	; 0x2c
 80034ee:	fb01 f303 	mul.w	r3, r1, r3
 80034f2:	4413      	add	r3, r2
 80034f4:	3361      	adds	r3, #97	; 0x61
 80034f6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d14f      	bne.n	800359c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	212c      	movs	r1, #44	; 0x2c
 8003502:	fb01 f303 	mul.w	r3, r1, r3
 8003506:	4413      	add	r3, r2
 8003508:	335c      	adds	r3, #92	; 0x5c
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	1c5a      	adds	r2, r3, #1
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	202c      	movs	r0, #44	; 0x2c
 8003514:	fb00 f303 	mul.w	r3, r0, r3
 8003518:	440b      	add	r3, r1
 800351a:	335c      	adds	r3, #92	; 0x5c
 800351c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	212c      	movs	r1, #44	; 0x2c
 8003524:	fb01 f303 	mul.w	r3, r1, r3
 8003528:	4413      	add	r3, r2
 800352a:	335c      	adds	r3, #92	; 0x5c
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b02      	cmp	r3, #2
 8003530:	d912      	bls.n	8003558 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	212c      	movs	r1, #44	; 0x2c
 8003538:	fb01 f303 	mul.w	r3, r1, r3
 800353c:	4413      	add	r3, r2
 800353e:	335c      	adds	r3, #92	; 0x5c
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	212c      	movs	r1, #44	; 0x2c
 800354a:	fb01 f303 	mul.w	r3, r1, r3
 800354e:	4413      	add	r3, r2
 8003550:	3360      	adds	r3, #96	; 0x60
 8003552:	2204      	movs	r2, #4
 8003554:	701a      	strb	r2, [r3, #0]
 8003556:	e021      	b.n	800359c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	212c      	movs	r1, #44	; 0x2c
 800355e:	fb01 f303 	mul.w	r3, r1, r3
 8003562:	4413      	add	r3, r2
 8003564:	3360      	adds	r3, #96	; 0x60
 8003566:	2202      	movs	r2, #2
 8003568:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	015a      	lsls	r2, r3, #5
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	4413      	add	r3, r2
 8003572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003580:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003588:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	4413      	add	r3, r2
 8003592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003596:	461a      	mov	r2, r3
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	015a      	lsls	r2, r3, #5
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	4413      	add	r3, r2
 80035a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a8:	461a      	mov	r2, r3
 80035aa:	2302      	movs	r3, #2
 80035ac:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	b2d9      	uxtb	r1, r3
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	202c      	movs	r0, #44	; 0x2c
 80035b8:	fb00 f303 	mul.w	r3, r0, r3
 80035bc:	4413      	add	r3, r2
 80035be:	3360      	adds	r3, #96	; 0x60
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	461a      	mov	r2, r3
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f004 fcfb 	bl	8007fc0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80035ca:	bf00      	nop
 80035cc:	3720      	adds	r7, #32
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b08a      	sub	sp, #40	; 0x28
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	0c5b      	lsrs	r3, r3, #17
 80035f8:	f003 030f 	and.w	r3, r3, #15
 80035fc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	091b      	lsrs	r3, r3, #4
 8003602:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003606:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	2b02      	cmp	r3, #2
 800360c:	d004      	beq.n	8003618 <HCD_RXQLVL_IRQHandler+0x46>
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	2b05      	cmp	r3, #5
 8003612:	f000 80a9 	beq.w	8003768 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003616:	e0aa      	b.n	800376e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 80a6 	beq.w	800376c <HCD_RXQLVL_IRQHandler+0x19a>
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	212c      	movs	r1, #44	; 0x2c
 8003626:	fb01 f303 	mul.w	r3, r1, r3
 800362a:	4413      	add	r3, r2
 800362c:	3344      	adds	r3, #68	; 0x44
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 809b 	beq.w	800376c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	212c      	movs	r1, #44	; 0x2c
 800363c:	fb01 f303 	mul.w	r3, r1, r3
 8003640:	4413      	add	r3, r2
 8003642:	3350      	adds	r3, #80	; 0x50
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	441a      	add	r2, r3
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	202c      	movs	r0, #44	; 0x2c
 8003650:	fb00 f303 	mul.w	r3, r0, r3
 8003654:	440b      	add	r3, r1
 8003656:	334c      	adds	r3, #76	; 0x4c
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d87a      	bhi.n	8003754 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6818      	ldr	r0, [r3, #0]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	212c      	movs	r1, #44	; 0x2c
 8003668:	fb01 f303 	mul.w	r3, r1, r3
 800366c:	4413      	add	r3, r2
 800366e:	3344      	adds	r3, #68	; 0x44
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	b292      	uxth	r2, r2
 8003676:	4619      	mov	r1, r3
 8003678:	f001 fd56 	bl	8005128 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	212c      	movs	r1, #44	; 0x2c
 8003682:	fb01 f303 	mul.w	r3, r1, r3
 8003686:	4413      	add	r3, r2
 8003688:	3344      	adds	r3, #68	; 0x44
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	441a      	add	r2, r3
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	202c      	movs	r0, #44	; 0x2c
 8003696:	fb00 f303 	mul.w	r3, r0, r3
 800369a:	440b      	add	r3, r1
 800369c:	3344      	adds	r3, #68	; 0x44
 800369e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	212c      	movs	r1, #44	; 0x2c
 80036a6:	fb01 f303 	mul.w	r3, r1, r3
 80036aa:	4413      	add	r3, r2
 80036ac:	3350      	adds	r3, #80	; 0x50
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	441a      	add	r2, r3
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	202c      	movs	r0, #44	; 0x2c
 80036ba:	fb00 f303 	mul.w	r3, r0, r3
 80036be:	440b      	add	r3, r1
 80036c0:	3350      	adds	r3, #80	; 0x50
 80036c2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	015a      	lsls	r2, r3, #5
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	4413      	add	r3, r2
 80036cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	0cdb      	lsrs	r3, r3, #19
 80036d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036d8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	212c      	movs	r1, #44	; 0x2c
 80036e0:	fb01 f303 	mul.w	r3, r1, r3
 80036e4:	4413      	add	r3, r2
 80036e6:	3340      	adds	r3, #64	; 0x40
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d13c      	bne.n	800376c <HCD_RXQLVL_IRQHandler+0x19a>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d039      	beq.n	800376c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800370e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003716:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	4413      	add	r3, r2
 8003720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003724:	461a      	mov	r2, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	212c      	movs	r1, #44	; 0x2c
 8003730:	fb01 f303 	mul.w	r3, r1, r3
 8003734:	4413      	add	r3, r2
 8003736:	3354      	adds	r3, #84	; 0x54
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	f083 0301 	eor.w	r3, r3, #1
 800373e:	b2d8      	uxtb	r0, r3
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	212c      	movs	r1, #44	; 0x2c
 8003746:	fb01 f303 	mul.w	r3, r1, r3
 800374a:	4413      	add	r3, r2
 800374c:	3354      	adds	r3, #84	; 0x54
 800374e:	4602      	mov	r2, r0
 8003750:	701a      	strb	r2, [r3, #0]
      break;
 8003752:	e00b      	b.n	800376c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	212c      	movs	r1, #44	; 0x2c
 800375a:	fb01 f303 	mul.w	r3, r1, r3
 800375e:	4413      	add	r3, r2
 8003760:	3360      	adds	r3, #96	; 0x60
 8003762:	2204      	movs	r2, #4
 8003764:	701a      	strb	r2, [r3, #0]
      break;
 8003766:	e001      	b.n	800376c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003768:	bf00      	nop
 800376a:	e000      	b.n	800376e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800376c:	bf00      	nop
  }
}
 800376e:	bf00      	nop
 8003770:	3728      	adds	r7, #40	; 0x28
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b086      	sub	sp, #24
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80037a2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d10b      	bne.n	80037c6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d102      	bne.n	80037be <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f004 fbe5 	bl	8007f88 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f043 0302 	orr.w	r3, r3, #2
 80037c4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f003 0308 	and.w	r3, r3, #8
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d132      	bne.n	8003836 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f043 0308 	orr.w	r3, r3, #8
 80037d6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f003 0304 	and.w	r3, r3, #4
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d126      	bne.n	8003830 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d113      	bne.n	8003812 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80037f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037f4:	d106      	bne.n	8003804 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2102      	movs	r1, #2
 80037fc:	4618      	mov	r0, r3
 80037fe:	f001 fe01 	bl	8005404 <USB_InitFSLSPClkSel>
 8003802:	e011      	b.n	8003828 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2101      	movs	r1, #1
 800380a:	4618      	mov	r0, r3
 800380c:	f001 fdfa 	bl	8005404 <USB_InitFSLSPClkSel>
 8003810:	e00a      	b.n	8003828 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d106      	bne.n	8003828 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003820:	461a      	mov	r2, r3
 8003822:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003826:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f004 fbd7 	bl	8007fdc <HAL_HCD_PortEnabled_Callback>
 800382e:	e002      	b.n	8003836 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f004 fbe1 	bl	8007ff8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f003 0320 	and.w	r3, r3, #32
 800383c:	2b20      	cmp	r3, #32
 800383e:	d103      	bne.n	8003848 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f043 0320 	orr.w	r3, r3, #32
 8003846:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800384e:	461a      	mov	r2, r3
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	6013      	str	r3, [r2, #0]
}
 8003854:	bf00      	nop
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e12b      	b.n	8003ac6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d106      	bne.n	8003888 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fd fedc 	bl	8001640 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2224      	movs	r2, #36	; 0x24
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0201 	bic.w	r2, r2, #1
 800389e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038c0:	f000 fd80 	bl	80043c4 <HAL_RCC_GetPCLK1Freq>
 80038c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	4a81      	ldr	r2, [pc, #516]	; (8003ad0 <HAL_I2C_Init+0x274>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d807      	bhi.n	80038e0 <HAL_I2C_Init+0x84>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4a80      	ldr	r2, [pc, #512]	; (8003ad4 <HAL_I2C_Init+0x278>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	bf94      	ite	ls
 80038d8:	2301      	movls	r3, #1
 80038da:	2300      	movhi	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	e006      	b.n	80038ee <HAL_I2C_Init+0x92>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4a7d      	ldr	r2, [pc, #500]	; (8003ad8 <HAL_I2C_Init+0x27c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	bf94      	ite	ls
 80038e8:	2301      	movls	r3, #1
 80038ea:	2300      	movhi	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e0e7      	b.n	8003ac6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4a78      	ldr	r2, [pc, #480]	; (8003adc <HAL_I2C_Init+0x280>)
 80038fa:	fba2 2303 	umull	r2, r3, r2, r3
 80038fe:	0c9b      	lsrs	r3, r3, #18
 8003900:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	430a      	orrs	r2, r1
 8003914:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	4a6a      	ldr	r2, [pc, #424]	; (8003ad0 <HAL_I2C_Init+0x274>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d802      	bhi.n	8003930 <HAL_I2C_Init+0xd4>
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	3301      	adds	r3, #1
 800392e:	e009      	b.n	8003944 <HAL_I2C_Init+0xe8>
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003936:	fb02 f303 	mul.w	r3, r2, r3
 800393a:	4a69      	ldr	r2, [pc, #420]	; (8003ae0 <HAL_I2C_Init+0x284>)
 800393c:	fba2 2303 	umull	r2, r3, r2, r3
 8003940:	099b      	lsrs	r3, r3, #6
 8003942:	3301      	adds	r3, #1
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6812      	ldr	r2, [r2, #0]
 8003948:	430b      	orrs	r3, r1
 800394a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003956:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	495c      	ldr	r1, [pc, #368]	; (8003ad0 <HAL_I2C_Init+0x274>)
 8003960:	428b      	cmp	r3, r1
 8003962:	d819      	bhi.n	8003998 <HAL_I2C_Init+0x13c>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	1e59      	subs	r1, r3, #1
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003972:	1c59      	adds	r1, r3, #1
 8003974:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003978:	400b      	ands	r3, r1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00a      	beq.n	8003994 <HAL_I2C_Init+0x138>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	1e59      	subs	r1, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	fbb1 f3f3 	udiv	r3, r1, r3
 800398c:	3301      	adds	r3, #1
 800398e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003992:	e051      	b.n	8003a38 <HAL_I2C_Init+0x1dc>
 8003994:	2304      	movs	r3, #4
 8003996:	e04f      	b.n	8003a38 <HAL_I2C_Init+0x1dc>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d111      	bne.n	80039c4 <HAL_I2C_Init+0x168>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	1e58      	subs	r0, r3, #1
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6859      	ldr	r1, [r3, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	440b      	add	r3, r1
 80039ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80039b2:	3301      	adds	r3, #1
 80039b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bf0c      	ite	eq
 80039bc:	2301      	moveq	r3, #1
 80039be:	2300      	movne	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	e012      	b.n	80039ea <HAL_I2C_Init+0x18e>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	1e58      	subs	r0, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6859      	ldr	r1, [r3, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	0099      	lsls	r1, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039da:	3301      	adds	r3, #1
 80039dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	bf0c      	ite	eq
 80039e4:	2301      	moveq	r3, #1
 80039e6:	2300      	movne	r3, #0
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_I2C_Init+0x196>
 80039ee:	2301      	movs	r3, #1
 80039f0:	e022      	b.n	8003a38 <HAL_I2C_Init+0x1dc>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10e      	bne.n	8003a18 <HAL_I2C_Init+0x1bc>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	1e58      	subs	r0, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6859      	ldr	r1, [r3, #4]
 8003a02:	460b      	mov	r3, r1
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	440b      	add	r3, r1
 8003a08:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a16:	e00f      	b.n	8003a38 <HAL_I2C_Init+0x1dc>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	1e58      	subs	r0, r3, #1
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6859      	ldr	r1, [r3, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	0099      	lsls	r1, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a2e:	3301      	adds	r3, #1
 8003a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	6809      	ldr	r1, [r1, #0]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	69da      	ldr	r2, [r3, #28]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6911      	ldr	r1, [r2, #16]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	68d2      	ldr	r2, [r2, #12]
 8003a72:	4311      	orrs	r1, r2
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6812      	ldr	r2, [r2, #0]
 8003a78:	430b      	orrs	r3, r1
 8003a7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	695a      	ldr	r2, [r3, #20]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0201 	orr.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	000186a0 	.word	0x000186a0
 8003ad4:	001e847f 	.word	0x001e847f
 8003ad8:	003d08ff 	.word	0x003d08ff
 8003adc:	431bde83 	.word	0x431bde83
 8003ae0:	10624dd3 	.word	0x10624dd3

08003ae4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e267      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d075      	beq.n	8003bee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b02:	4b88      	ldr	r3, [pc, #544]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 030c 	and.w	r3, r3, #12
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d00c      	beq.n	8003b28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b0e:	4b85      	ldr	r3, [pc, #532]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d112      	bne.n	8003b40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b1a:	4b82      	ldr	r3, [pc, #520]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b26:	d10b      	bne.n	8003b40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b28:	4b7e      	ldr	r3, [pc, #504]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d05b      	beq.n	8003bec <HAL_RCC_OscConfig+0x108>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d157      	bne.n	8003bec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e242      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b48:	d106      	bne.n	8003b58 <HAL_RCC_OscConfig+0x74>
 8003b4a:	4b76      	ldr	r3, [pc, #472]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a75      	ldr	r2, [pc, #468]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b54:	6013      	str	r3, [r2, #0]
 8003b56:	e01d      	b.n	8003b94 <HAL_RCC_OscConfig+0xb0>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b60:	d10c      	bne.n	8003b7c <HAL_RCC_OscConfig+0x98>
 8003b62:	4b70      	ldr	r3, [pc, #448]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a6f      	ldr	r2, [pc, #444]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	4b6d      	ldr	r3, [pc, #436]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a6c      	ldr	r2, [pc, #432]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b78:	6013      	str	r3, [r2, #0]
 8003b7a:	e00b      	b.n	8003b94 <HAL_RCC_OscConfig+0xb0>
 8003b7c:	4b69      	ldr	r3, [pc, #420]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a68      	ldr	r2, [pc, #416]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b86:	6013      	str	r3, [r2, #0]
 8003b88:	4b66      	ldr	r3, [pc, #408]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a65      	ldr	r2, [pc, #404]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d013      	beq.n	8003bc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9c:	f7fd ff5c 	bl	8001a58 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ba4:	f7fd ff58 	bl	8001a58 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b64      	cmp	r3, #100	; 0x64
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e207      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb6:	4b5b      	ldr	r3, [pc, #364]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0f0      	beq.n	8003ba4 <HAL_RCC_OscConfig+0xc0>
 8003bc2:	e014      	b.n	8003bee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc4:	f7fd ff48 	bl	8001a58 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bcc:	f7fd ff44 	bl	8001a58 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b64      	cmp	r3, #100	; 0x64
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e1f3      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bde:	4b51      	ldr	r3, [pc, #324]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1f0      	bne.n	8003bcc <HAL_RCC_OscConfig+0xe8>
 8003bea:	e000      	b.n	8003bee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d063      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bfa:	4b4a      	ldr	r3, [pc, #296]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 030c 	and.w	r3, r3, #12
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00b      	beq.n	8003c1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c06:	4b47      	ldr	r3, [pc, #284]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d11c      	bne.n	8003c4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c12:	4b44      	ldr	r3, [pc, #272]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d116      	bne.n	8003c4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c1e:	4b41      	ldr	r3, [pc, #260]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d005      	beq.n	8003c36 <HAL_RCC_OscConfig+0x152>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d001      	beq.n	8003c36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e1c7      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c36:	4b3b      	ldr	r3, [pc, #236]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	4937      	ldr	r1, [pc, #220]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c4a:	e03a      	b.n	8003cc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d020      	beq.n	8003c96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c54:	4b34      	ldr	r3, [pc, #208]	; (8003d28 <HAL_RCC_OscConfig+0x244>)
 8003c56:	2201      	movs	r2, #1
 8003c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5a:	f7fd fefd 	bl	8001a58 <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c62:	f7fd fef9 	bl	8001a58 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e1a8      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c74:	4b2b      	ldr	r3, [pc, #172]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0f0      	beq.n	8003c62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c80:	4b28      	ldr	r3, [pc, #160]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	4925      	ldr	r1, [pc, #148]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	600b      	str	r3, [r1, #0]
 8003c94:	e015      	b.n	8003cc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c96:	4b24      	ldr	r3, [pc, #144]	; (8003d28 <HAL_RCC_OscConfig+0x244>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9c:	f7fd fedc 	bl	8001a58 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ca4:	f7fd fed8 	bl	8001a58 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e187      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cb6:	4b1b      	ldr	r3, [pc, #108]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1f0      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d036      	beq.n	8003d3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d016      	beq.n	8003d04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cd6:	4b15      	ldr	r3, [pc, #84]	; (8003d2c <HAL_RCC_OscConfig+0x248>)
 8003cd8:	2201      	movs	r2, #1
 8003cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cdc:	f7fd febc 	bl	8001a58 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ce4:	f7fd feb8 	bl	8001a58 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e167      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cf6:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <HAL_RCC_OscConfig+0x240>)
 8003cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0f0      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x200>
 8003d02:	e01b      	b.n	8003d3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d04:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <HAL_RCC_OscConfig+0x248>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d0a:	f7fd fea5 	bl	8001a58 <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d10:	e00e      	b.n	8003d30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d12:	f7fd fea1 	bl	8001a58 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d907      	bls.n	8003d30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e150      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
 8003d24:	40023800 	.word	0x40023800
 8003d28:	42470000 	.word	0x42470000
 8003d2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d30:	4b88      	ldr	r3, [pc, #544]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1ea      	bne.n	8003d12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 8097 	beq.w	8003e78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d4e:	4b81      	ldr	r3, [pc, #516]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10f      	bne.n	8003d7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	4b7d      	ldr	r3, [pc, #500]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	4a7c      	ldr	r2, [pc, #496]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d68:	6413      	str	r3, [r2, #64]	; 0x40
 8003d6a:	4b7a      	ldr	r3, [pc, #488]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d72:	60bb      	str	r3, [r7, #8]
 8003d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d76:	2301      	movs	r3, #1
 8003d78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7a:	4b77      	ldr	r3, [pc, #476]	; (8003f58 <HAL_RCC_OscConfig+0x474>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d118      	bne.n	8003db8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d86:	4b74      	ldr	r3, [pc, #464]	; (8003f58 <HAL_RCC_OscConfig+0x474>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a73      	ldr	r2, [pc, #460]	; (8003f58 <HAL_RCC_OscConfig+0x474>)
 8003d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d92:	f7fd fe61 	bl	8001a58 <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d98:	e008      	b.n	8003dac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d9a:	f7fd fe5d 	bl	8001a58 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e10c      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dac:	4b6a      	ldr	r3, [pc, #424]	; (8003f58 <HAL_RCC_OscConfig+0x474>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0f0      	beq.n	8003d9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d106      	bne.n	8003dce <HAL_RCC_OscConfig+0x2ea>
 8003dc0:	4b64      	ldr	r3, [pc, #400]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc4:	4a63      	ldr	r2, [pc, #396]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003dc6:	f043 0301 	orr.w	r3, r3, #1
 8003dca:	6713      	str	r3, [r2, #112]	; 0x70
 8003dcc:	e01c      	b.n	8003e08 <HAL_RCC_OscConfig+0x324>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	2b05      	cmp	r3, #5
 8003dd4:	d10c      	bne.n	8003df0 <HAL_RCC_OscConfig+0x30c>
 8003dd6:	4b5f      	ldr	r3, [pc, #380]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dda:	4a5e      	ldr	r2, [pc, #376]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003ddc:	f043 0304 	orr.w	r3, r3, #4
 8003de0:	6713      	str	r3, [r2, #112]	; 0x70
 8003de2:	4b5c      	ldr	r3, [pc, #368]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de6:	4a5b      	ldr	r2, [pc, #364]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003de8:	f043 0301 	orr.w	r3, r3, #1
 8003dec:	6713      	str	r3, [r2, #112]	; 0x70
 8003dee:	e00b      	b.n	8003e08 <HAL_RCC_OscConfig+0x324>
 8003df0:	4b58      	ldr	r3, [pc, #352]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df4:	4a57      	ldr	r2, [pc, #348]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003df6:	f023 0301 	bic.w	r3, r3, #1
 8003dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8003dfc:	4b55      	ldr	r3, [pc, #340]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e00:	4a54      	ldr	r2, [pc, #336]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003e02:	f023 0304 	bic.w	r3, r3, #4
 8003e06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d015      	beq.n	8003e3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e10:	f7fd fe22 	bl	8001a58 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e16:	e00a      	b.n	8003e2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e18:	f7fd fe1e 	bl	8001a58 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e0cb      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e2e:	4b49      	ldr	r3, [pc, #292]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0ee      	beq.n	8003e18 <HAL_RCC_OscConfig+0x334>
 8003e3a:	e014      	b.n	8003e66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e3c:	f7fd fe0c 	bl	8001a58 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e42:	e00a      	b.n	8003e5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e44:	f7fd fe08 	bl	8001a58 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e0b5      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e5a:	4b3e      	ldr	r3, [pc, #248]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1ee      	bne.n	8003e44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e66:	7dfb      	ldrb	r3, [r7, #23]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d105      	bne.n	8003e78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e6c:	4b39      	ldr	r3, [pc, #228]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e70:	4a38      	ldr	r2, [pc, #224]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003e72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 80a1 	beq.w	8003fc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e82:	4b34      	ldr	r3, [pc, #208]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 030c 	and.w	r3, r3, #12
 8003e8a:	2b08      	cmp	r3, #8
 8003e8c:	d05c      	beq.n	8003f48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d141      	bne.n	8003f1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e96:	4b31      	ldr	r3, [pc, #196]	; (8003f5c <HAL_RCC_OscConfig+0x478>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9c:	f7fd fddc 	bl	8001a58 <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ea4:	f7fd fdd8 	bl	8001a58 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e087      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb6:	4b27      	ldr	r3, [pc, #156]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1f0      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69da      	ldr	r2, [r3, #28]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	019b      	lsls	r3, r3, #6
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed8:	085b      	lsrs	r3, r3, #1
 8003eda:	3b01      	subs	r3, #1
 8003edc:	041b      	lsls	r3, r3, #16
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee4:	061b      	lsls	r3, r3, #24
 8003ee6:	491b      	ldr	r1, [pc, #108]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003eec:	4b1b      	ldr	r3, [pc, #108]	; (8003f5c <HAL_RCC_OscConfig+0x478>)
 8003eee:	2201      	movs	r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef2:	f7fd fdb1 	bl	8001a58 <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003efa:	f7fd fdad 	bl	8001a58 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e05c      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f0c:	4b11      	ldr	r3, [pc, #68]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0f0      	beq.n	8003efa <HAL_RCC_OscConfig+0x416>
 8003f18:	e054      	b.n	8003fc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f1a:	4b10      	ldr	r3, [pc, #64]	; (8003f5c <HAL_RCC_OscConfig+0x478>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f20:	f7fd fd9a 	bl	8001a58 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f28:	f7fd fd96 	bl	8001a58 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e045      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f3a:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <HAL_RCC_OscConfig+0x470>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1f0      	bne.n	8003f28 <HAL_RCC_OscConfig+0x444>
 8003f46:	e03d      	b.n	8003fc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d107      	bne.n	8003f60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e038      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
 8003f54:	40023800 	.word	0x40023800
 8003f58:	40007000 	.word	0x40007000
 8003f5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f60:	4b1b      	ldr	r3, [pc, #108]	; (8003fd0 <HAL_RCC_OscConfig+0x4ec>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d028      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d121      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d11a      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f90:	4013      	ands	r3, r2
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d111      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa6:	085b      	lsrs	r3, r3, #1
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d107      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d001      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e000      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3718      	adds	r7, #24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	40023800 	.word	0x40023800

08003fd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e0cc      	b.n	8004182 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fe8:	4b68      	ldr	r3, [pc, #416]	; (800418c <HAL_RCC_ClockConfig+0x1b8>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d90c      	bls.n	8004010 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff6:	4b65      	ldr	r3, [pc, #404]	; (800418c <HAL_RCC_ClockConfig+0x1b8>)
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ffe:	4b63      	ldr	r3, [pc, #396]	; (800418c <HAL_RCC_ClockConfig+0x1b8>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0307 	and.w	r3, r3, #7
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	429a      	cmp	r2, r3
 800400a:	d001      	beq.n	8004010 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e0b8      	b.n	8004182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d020      	beq.n	800405e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	d005      	beq.n	8004034 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004028:	4b59      	ldr	r3, [pc, #356]	; (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	4a58      	ldr	r2, [pc, #352]	; (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 800402e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004032:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0308 	and.w	r3, r3, #8
 800403c:	2b00      	cmp	r3, #0
 800403e:	d005      	beq.n	800404c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004040:	4b53      	ldr	r3, [pc, #332]	; (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	4a52      	ldr	r2, [pc, #328]	; (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 8004046:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800404a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800404c:	4b50      	ldr	r3, [pc, #320]	; (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	494d      	ldr	r1, [pc, #308]	; (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 800405a:	4313      	orrs	r3, r2
 800405c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d044      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d107      	bne.n	8004082 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004072:	4b47      	ldr	r3, [pc, #284]	; (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d119      	bne.n	80040b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e07f      	b.n	8004182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d003      	beq.n	8004092 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800408e:	2b03      	cmp	r3, #3
 8004090:	d107      	bne.n	80040a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004092:	4b3f      	ldr	r3, [pc, #252]	; (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d109      	bne.n	80040b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e06f      	b.n	8004182 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040a2:	4b3b      	ldr	r3, [pc, #236]	; (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e067      	b.n	8004182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040b2:	4b37      	ldr	r3, [pc, #220]	; (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f023 0203 	bic.w	r2, r3, #3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	4934      	ldr	r1, [pc, #208]	; (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040c4:	f7fd fcc8 	bl	8001a58 <HAL_GetTick>
 80040c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ca:	e00a      	b.n	80040e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040cc:	f7fd fcc4 	bl	8001a58 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040da:	4293      	cmp	r3, r2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e04f      	b.n	8004182 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e2:	4b2b      	ldr	r3, [pc, #172]	; (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 020c 	and.w	r2, r3, #12
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d1eb      	bne.n	80040cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040f4:	4b25      	ldr	r3, [pc, #148]	; (800418c <HAL_RCC_ClockConfig+0x1b8>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d20c      	bcs.n	800411c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004102:	4b22      	ldr	r3, [pc, #136]	; (800418c <HAL_RCC_ClockConfig+0x1b8>)
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800410a:	4b20      	ldr	r3, [pc, #128]	; (800418c <HAL_RCC_ClockConfig+0x1b8>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0307 	and.w	r3, r3, #7
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	429a      	cmp	r2, r3
 8004116:	d001      	beq.n	800411c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e032      	b.n	8004182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0304 	and.w	r3, r3, #4
 8004124:	2b00      	cmp	r3, #0
 8004126:	d008      	beq.n	800413a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004128:	4b19      	ldr	r3, [pc, #100]	; (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	4916      	ldr	r1, [pc, #88]	; (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 8004136:	4313      	orrs	r3, r2
 8004138:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0308 	and.w	r3, r3, #8
 8004142:	2b00      	cmp	r3, #0
 8004144:	d009      	beq.n	800415a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004146:	4b12      	ldr	r3, [pc, #72]	; (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	490e      	ldr	r1, [pc, #56]	; (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	4313      	orrs	r3, r2
 8004158:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800415a:	f000 f821 	bl	80041a0 <HAL_RCC_GetSysClockFreq>
 800415e:	4602      	mov	r2, r0
 8004160:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <HAL_RCC_ClockConfig+0x1bc>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	091b      	lsrs	r3, r3, #4
 8004166:	f003 030f 	and.w	r3, r3, #15
 800416a:	490a      	ldr	r1, [pc, #40]	; (8004194 <HAL_RCC_ClockConfig+0x1c0>)
 800416c:	5ccb      	ldrb	r3, [r1, r3]
 800416e:	fa22 f303 	lsr.w	r3, r2, r3
 8004172:	4a09      	ldr	r2, [pc, #36]	; (8004198 <HAL_RCC_ClockConfig+0x1c4>)
 8004174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004176:	4b09      	ldr	r3, [pc, #36]	; (800419c <HAL_RCC_ClockConfig+0x1c8>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f7fd fc28 	bl	80019d0 <HAL_InitTick>

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	40023c00 	.word	0x40023c00
 8004190:	40023800 	.word	0x40023800
 8004194:	0800946c 	.word	0x0800946c
 8004198:	20000000 	.word	0x20000000
 800419c:	20000004 	.word	0x20000004

080041a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041a4:	b094      	sub	sp, #80	; 0x50
 80041a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	647b      	str	r3, [r7, #68]	; 0x44
 80041ac:	2300      	movs	r3, #0
 80041ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041b0:	2300      	movs	r3, #0
 80041b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041b8:	4b79      	ldr	r3, [pc, #484]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 030c 	and.w	r3, r3, #12
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d00d      	beq.n	80041e0 <HAL_RCC_GetSysClockFreq+0x40>
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	f200 80e1 	bhi.w	800438c <HAL_RCC_GetSysClockFreq+0x1ec>
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <HAL_RCC_GetSysClockFreq+0x34>
 80041ce:	2b04      	cmp	r3, #4
 80041d0:	d003      	beq.n	80041da <HAL_RCC_GetSysClockFreq+0x3a>
 80041d2:	e0db      	b.n	800438c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041d4:	4b73      	ldr	r3, [pc, #460]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80041d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80041d8:	e0db      	b.n	8004392 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041da:	4b73      	ldr	r3, [pc, #460]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80041dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041de:	e0d8      	b.n	8004392 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041e0:	4b6f      	ldr	r3, [pc, #444]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041ea:	4b6d      	ldr	r3, [pc, #436]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d063      	beq.n	80042be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041f6:	4b6a      	ldr	r3, [pc, #424]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	099b      	lsrs	r3, r3, #6
 80041fc:	2200      	movs	r2, #0
 80041fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004200:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004208:	633b      	str	r3, [r7, #48]	; 0x30
 800420a:	2300      	movs	r3, #0
 800420c:	637b      	str	r3, [r7, #52]	; 0x34
 800420e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004212:	4622      	mov	r2, r4
 8004214:	462b      	mov	r3, r5
 8004216:	f04f 0000 	mov.w	r0, #0
 800421a:	f04f 0100 	mov.w	r1, #0
 800421e:	0159      	lsls	r1, r3, #5
 8004220:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004224:	0150      	lsls	r0, r2, #5
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	4621      	mov	r1, r4
 800422c:	1a51      	subs	r1, r2, r1
 800422e:	6139      	str	r1, [r7, #16]
 8004230:	4629      	mov	r1, r5
 8004232:	eb63 0301 	sbc.w	r3, r3, r1
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	f04f 0200 	mov.w	r2, #0
 800423c:	f04f 0300 	mov.w	r3, #0
 8004240:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004244:	4659      	mov	r1, fp
 8004246:	018b      	lsls	r3, r1, #6
 8004248:	4651      	mov	r1, sl
 800424a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800424e:	4651      	mov	r1, sl
 8004250:	018a      	lsls	r2, r1, #6
 8004252:	4651      	mov	r1, sl
 8004254:	ebb2 0801 	subs.w	r8, r2, r1
 8004258:	4659      	mov	r1, fp
 800425a:	eb63 0901 	sbc.w	r9, r3, r1
 800425e:	f04f 0200 	mov.w	r2, #0
 8004262:	f04f 0300 	mov.w	r3, #0
 8004266:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800426a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800426e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004272:	4690      	mov	r8, r2
 8004274:	4699      	mov	r9, r3
 8004276:	4623      	mov	r3, r4
 8004278:	eb18 0303 	adds.w	r3, r8, r3
 800427c:	60bb      	str	r3, [r7, #8]
 800427e:	462b      	mov	r3, r5
 8004280:	eb49 0303 	adc.w	r3, r9, r3
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	f04f 0300 	mov.w	r3, #0
 800428e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004292:	4629      	mov	r1, r5
 8004294:	024b      	lsls	r3, r1, #9
 8004296:	4621      	mov	r1, r4
 8004298:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800429c:	4621      	mov	r1, r4
 800429e:	024a      	lsls	r2, r1, #9
 80042a0:	4610      	mov	r0, r2
 80042a2:	4619      	mov	r1, r3
 80042a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042a6:	2200      	movs	r2, #0
 80042a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80042aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042b0:	f7fb ffe6 	bl	8000280 <__aeabi_uldivmod>
 80042b4:	4602      	mov	r2, r0
 80042b6:	460b      	mov	r3, r1
 80042b8:	4613      	mov	r3, r2
 80042ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042bc:	e058      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042be:	4b38      	ldr	r3, [pc, #224]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	099b      	lsrs	r3, r3, #6
 80042c4:	2200      	movs	r2, #0
 80042c6:	4618      	mov	r0, r3
 80042c8:	4611      	mov	r1, r2
 80042ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042ce:	623b      	str	r3, [r7, #32]
 80042d0:	2300      	movs	r3, #0
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24
 80042d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042d8:	4642      	mov	r2, r8
 80042da:	464b      	mov	r3, r9
 80042dc:	f04f 0000 	mov.w	r0, #0
 80042e0:	f04f 0100 	mov.w	r1, #0
 80042e4:	0159      	lsls	r1, r3, #5
 80042e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042ea:	0150      	lsls	r0, r2, #5
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	4641      	mov	r1, r8
 80042f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80042f6:	4649      	mov	r1, r9
 80042f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80042fc:	f04f 0200 	mov.w	r2, #0
 8004300:	f04f 0300 	mov.w	r3, #0
 8004304:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004308:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800430c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004310:	ebb2 040a 	subs.w	r4, r2, sl
 8004314:	eb63 050b 	sbc.w	r5, r3, fp
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	f04f 0300 	mov.w	r3, #0
 8004320:	00eb      	lsls	r3, r5, #3
 8004322:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004326:	00e2      	lsls	r2, r4, #3
 8004328:	4614      	mov	r4, r2
 800432a:	461d      	mov	r5, r3
 800432c:	4643      	mov	r3, r8
 800432e:	18e3      	adds	r3, r4, r3
 8004330:	603b      	str	r3, [r7, #0]
 8004332:	464b      	mov	r3, r9
 8004334:	eb45 0303 	adc.w	r3, r5, r3
 8004338:	607b      	str	r3, [r7, #4]
 800433a:	f04f 0200 	mov.w	r2, #0
 800433e:	f04f 0300 	mov.w	r3, #0
 8004342:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004346:	4629      	mov	r1, r5
 8004348:	028b      	lsls	r3, r1, #10
 800434a:	4621      	mov	r1, r4
 800434c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004350:	4621      	mov	r1, r4
 8004352:	028a      	lsls	r2, r1, #10
 8004354:	4610      	mov	r0, r2
 8004356:	4619      	mov	r1, r3
 8004358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800435a:	2200      	movs	r2, #0
 800435c:	61bb      	str	r3, [r7, #24]
 800435e:	61fa      	str	r2, [r7, #28]
 8004360:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004364:	f7fb ff8c 	bl	8000280 <__aeabi_uldivmod>
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4613      	mov	r3, r2
 800436e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004370:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	0c1b      	lsrs	r3, r3, #16
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	3301      	adds	r3, #1
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004380:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004384:	fbb2 f3f3 	udiv	r3, r2, r3
 8004388:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800438a:	e002      	b.n	8004392 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800438c:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800438e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004394:	4618      	mov	r0, r3
 8004396:	3750      	adds	r7, #80	; 0x50
 8004398:	46bd      	mov	sp, r7
 800439a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800439e:	bf00      	nop
 80043a0:	40023800 	.word	0x40023800
 80043a4:	00f42400 	.word	0x00f42400
 80043a8:	007a1200 	.word	0x007a1200

080043ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043b0:	4b03      	ldr	r3, [pc, #12]	; (80043c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043b2:	681b      	ldr	r3, [r3, #0]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	20000000 	.word	0x20000000

080043c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043c8:	f7ff fff0 	bl	80043ac <HAL_RCC_GetHCLKFreq>
 80043cc:	4602      	mov	r2, r0
 80043ce:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	0a9b      	lsrs	r3, r3, #10
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	4903      	ldr	r1, [pc, #12]	; (80043e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043da:	5ccb      	ldrb	r3, [r1, r3]
 80043dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40023800 	.word	0x40023800
 80043e8:	0800947c 	.word	0x0800947c

080043ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e07b      	b.n	80044f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004402:	2b00      	cmp	r3, #0
 8004404:	d108      	bne.n	8004418 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800440e:	d009      	beq.n	8004424 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	61da      	str	r2, [r3, #28]
 8004416:	e005      	b.n	8004424 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d106      	bne.n	8004444 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7fd f946 	bl	80016d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800445a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800446c:	431a      	orrs	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	431a      	orrs	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a8:	ea42 0103 	orr.w	r1, r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	0c1b      	lsrs	r3, r3, #16
 80044c2:	f003 0104 	and.w	r1, r3, #4
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	f003 0210 	and.w	r2, r3, #16
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	69da      	ldr	r2, [r3, #28]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b088      	sub	sp, #32
 8004502:	af00      	add	r7, sp, #0
 8004504:	60f8      	str	r0, [r7, #12]
 8004506:	60b9      	str	r1, [r7, #8]
 8004508:	603b      	str	r3, [r7, #0]
 800450a:	4613      	mov	r3, r2
 800450c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004518:	2b01      	cmp	r3, #1
 800451a:	d101      	bne.n	8004520 <HAL_SPI_Transmit+0x22>
 800451c:	2302      	movs	r3, #2
 800451e:	e126      	b.n	800476e <HAL_SPI_Transmit+0x270>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004528:	f7fd fa96 	bl	8001a58 <HAL_GetTick>
 800452c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800452e:	88fb      	ldrh	r3, [r7, #6]
 8004530:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b01      	cmp	r3, #1
 800453c:	d002      	beq.n	8004544 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800453e:	2302      	movs	r3, #2
 8004540:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004542:	e10b      	b.n	800475c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <HAL_SPI_Transmit+0x52>
 800454a:	88fb      	ldrh	r3, [r7, #6]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d102      	bne.n	8004556 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004554:	e102      	b.n	800475c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2203      	movs	r2, #3
 800455a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	88fa      	ldrh	r2, [r7, #6]
 800456e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	88fa      	ldrh	r2, [r7, #6]
 8004574:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800459c:	d10f      	bne.n	80045be <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c8:	2b40      	cmp	r3, #64	; 0x40
 80045ca:	d007      	beq.n	80045dc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045e4:	d14b      	bne.n	800467e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d002      	beq.n	80045f4 <HAL_SPI_Transmit+0xf6>
 80045ee:	8afb      	ldrh	r3, [r7, #22]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d13e      	bne.n	8004672 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f8:	881a      	ldrh	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004604:	1c9a      	adds	r2, r3, #2
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800460e:	b29b      	uxth	r3, r3
 8004610:	3b01      	subs	r3, #1
 8004612:	b29a      	uxth	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004618:	e02b      	b.n	8004672 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b02      	cmp	r3, #2
 8004626:	d112      	bne.n	800464e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462c:	881a      	ldrh	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004638:	1c9a      	adds	r2, r3, #2
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004642:	b29b      	uxth	r3, r3
 8004644:	3b01      	subs	r3, #1
 8004646:	b29a      	uxth	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	86da      	strh	r2, [r3, #54]	; 0x36
 800464c:	e011      	b.n	8004672 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800464e:	f7fd fa03 	bl	8001a58 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	429a      	cmp	r2, r3
 800465c:	d803      	bhi.n	8004666 <HAL_SPI_Transmit+0x168>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004664:	d102      	bne.n	800466c <HAL_SPI_Transmit+0x16e>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d102      	bne.n	8004672 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004670:	e074      	b.n	800475c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004676:	b29b      	uxth	r3, r3
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1ce      	bne.n	800461a <HAL_SPI_Transmit+0x11c>
 800467c:	e04c      	b.n	8004718 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d002      	beq.n	800468c <HAL_SPI_Transmit+0x18e>
 8004686:	8afb      	ldrh	r3, [r7, #22]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d140      	bne.n	800470e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	330c      	adds	r3, #12
 8004696:	7812      	ldrb	r2, [r2, #0]
 8004698:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	1c5a      	adds	r2, r3, #1
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	3b01      	subs	r3, #1
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80046b2:	e02c      	b.n	800470e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d113      	bne.n	80046ea <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	330c      	adds	r3, #12
 80046cc:	7812      	ldrb	r2, [r2, #0]
 80046ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046de:	b29b      	uxth	r3, r3
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80046e8:	e011      	b.n	800470e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046ea:	f7fd f9b5 	bl	8001a58 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d803      	bhi.n	8004702 <HAL_SPI_Transmit+0x204>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004700:	d102      	bne.n	8004708 <HAL_SPI_Transmit+0x20a>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d102      	bne.n	800470e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800470c:	e026      	b.n	800475c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004712:	b29b      	uxth	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1cd      	bne.n	80046b4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	6839      	ldr	r1, [r7, #0]
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 f8b3 	bl	8004888 <SPI_EndRxTxTransaction>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2220      	movs	r2, #32
 800472c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10a      	bne.n	800474c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004736:	2300      	movs	r3, #0
 8004738:	613b      	str	r3, [r7, #16]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	613b      	str	r3, [r7, #16]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	613b      	str	r3, [r7, #16]
 800474a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004750:	2b00      	cmp	r3, #0
 8004752:	d002      	beq.n	800475a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	77fb      	strb	r3, [r7, #31]
 8004758:	e000      	b.n	800475c <HAL_SPI_Transmit+0x25e>
  }

error:
 800475a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800476c:	7ffb      	ldrb	r3, [r7, #31]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3720      	adds	r7, #32
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b088      	sub	sp, #32
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	603b      	str	r3, [r7, #0]
 8004784:	4613      	mov	r3, r2
 8004786:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004788:	f7fd f966 	bl	8001a58 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004790:	1a9b      	subs	r3, r3, r2
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	4413      	add	r3, r2
 8004796:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004798:	f7fd f95e 	bl	8001a58 <HAL_GetTick>
 800479c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800479e:	4b39      	ldr	r3, [pc, #228]	; (8004884 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	015b      	lsls	r3, r3, #5
 80047a4:	0d1b      	lsrs	r3, r3, #20
 80047a6:	69fa      	ldr	r2, [r7, #28]
 80047a8:	fb02 f303 	mul.w	r3, r2, r3
 80047ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047ae:	e054      	b.n	800485a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047b6:	d050      	beq.n	800485a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047b8:	f7fd f94e 	bl	8001a58 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	69fa      	ldr	r2, [r7, #28]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d902      	bls.n	80047ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d13d      	bne.n	800484a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047e6:	d111      	bne.n	800480c <SPI_WaitFlagStateUntilTimeout+0x94>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047f0:	d004      	beq.n	80047fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047fa:	d107      	bne.n	800480c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800480a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004814:	d10f      	bne.n	8004836 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004834:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e017      	b.n	800487a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	3b01      	subs	r3, #1
 8004858:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	4013      	ands	r3, r2
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	429a      	cmp	r2, r3
 8004868:	bf0c      	ite	eq
 800486a:	2301      	moveq	r3, #1
 800486c:	2300      	movne	r3, #0
 800486e:	b2db      	uxtb	r3, r3
 8004870:	461a      	mov	r2, r3
 8004872:	79fb      	ldrb	r3, [r7, #7]
 8004874:	429a      	cmp	r2, r3
 8004876:	d19b      	bne.n	80047b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3720      	adds	r7, #32
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	20000000 	.word	0x20000000

08004888 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b088      	sub	sp, #32
 800488c:	af02      	add	r7, sp, #8
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004894:	4b1b      	ldr	r3, [pc, #108]	; (8004904 <SPI_EndRxTxTransaction+0x7c>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a1b      	ldr	r2, [pc, #108]	; (8004908 <SPI_EndRxTxTransaction+0x80>)
 800489a:	fba2 2303 	umull	r2, r3, r2, r3
 800489e:	0d5b      	lsrs	r3, r3, #21
 80048a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048a4:	fb02 f303 	mul.w	r3, r2, r3
 80048a8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048b2:	d112      	bne.n	80048da <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2200      	movs	r2, #0
 80048bc:	2180      	movs	r1, #128	; 0x80
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f7ff ff5a 	bl	8004778 <SPI_WaitFlagStateUntilTimeout>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d016      	beq.n	80048f8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ce:	f043 0220 	orr.w	r2, r3, #32
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e00f      	b.n	80048fa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00a      	beq.n	80048f6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	3b01      	subs	r3, #1
 80048e4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f0:	2b80      	cmp	r3, #128	; 0x80
 80048f2:	d0f2      	beq.n	80048da <SPI_EndRxTxTransaction+0x52>
 80048f4:	e000      	b.n	80048f8 <SPI_EndRxTxTransaction+0x70>
        break;
 80048f6:	bf00      	nop
  }

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	20000000 	.word	0x20000000
 8004908:	165e9f81 	.word	0x165e9f81

0800490c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e041      	b.n	80049a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d106      	bne.n	8004938 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7fc ff4a 	bl	80017cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2202      	movs	r2, #2
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3304      	adds	r3, #4
 8004948:	4619      	mov	r1, r3
 800494a:	4610      	mov	r0, r2
 800494c:	f000 f9e6 	bl	8004d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b083      	sub	sp, #12
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6a1a      	ldr	r2, [r3, #32]
 80049b8:	f241 1311 	movw	r3, #4369	; 0x1111
 80049bc:	4013      	ands	r3, r2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10f      	bne.n	80049e2 <HAL_TIM_Base_Stop+0x38>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6a1a      	ldr	r2, [r3, #32]
 80049c8:	f240 4344 	movw	r3, #1092	; 0x444
 80049cc:	4013      	ands	r3, r2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d107      	bne.n	80049e2 <HAL_TIM_Base_Stop+0x38>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 0201 	bic.w	r2, r2, #1
 80049e0:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d001      	beq.n	8004a10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e044      	b.n	8004a9a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2202      	movs	r2, #2
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68da      	ldr	r2, [r3, #12]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f042 0201 	orr.w	r2, r2, #1
 8004a26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a1e      	ldr	r2, [pc, #120]	; (8004aa8 <HAL_TIM_Base_Start_IT+0xb0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d018      	beq.n	8004a64 <HAL_TIM_Base_Start_IT+0x6c>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a3a:	d013      	beq.n	8004a64 <HAL_TIM_Base_Start_IT+0x6c>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a1a      	ldr	r2, [pc, #104]	; (8004aac <HAL_TIM_Base_Start_IT+0xb4>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d00e      	beq.n	8004a64 <HAL_TIM_Base_Start_IT+0x6c>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a19      	ldr	r2, [pc, #100]	; (8004ab0 <HAL_TIM_Base_Start_IT+0xb8>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d009      	beq.n	8004a64 <HAL_TIM_Base_Start_IT+0x6c>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a17      	ldr	r2, [pc, #92]	; (8004ab4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d004      	beq.n	8004a64 <HAL_TIM_Base_Start_IT+0x6c>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a16      	ldr	r2, [pc, #88]	; (8004ab8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d111      	bne.n	8004a88 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2b06      	cmp	r3, #6
 8004a74:	d010      	beq.n	8004a98 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f042 0201 	orr.w	r2, r2, #1
 8004a84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a86:	e007      	b.n	8004a98 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0201 	orr.w	r2, r2, #1
 8004a96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3714      	adds	r7, #20
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	40010000 	.word	0x40010000
 8004aac:	40000400 	.word	0x40000400
 8004ab0:	40000800 	.word	0x40000800
 8004ab4:	40000c00 	.word	0x40000c00
 8004ab8:	40014000 	.word	0x40014000

08004abc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d122      	bne.n	8004b18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d11b      	bne.n	8004b18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f06f 0202 	mvn.w	r2, #2
 8004ae8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f8ee 	bl	8004ce0 <HAL_TIM_IC_CaptureCallback>
 8004b04:	e005      	b.n	8004b12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f8e0 	bl	8004ccc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f8f1 	bl	8004cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	f003 0304 	and.w	r3, r3, #4
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d122      	bne.n	8004b6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	d11b      	bne.n	8004b6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f06f 0204 	mvn.w	r2, #4
 8004b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2202      	movs	r2, #2
 8004b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f8c4 	bl	8004ce0 <HAL_TIM_IC_CaptureCallback>
 8004b58:	e005      	b.n	8004b66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f8b6 	bl	8004ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f8c7 	bl	8004cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	f003 0308 	and.w	r3, r3, #8
 8004b76:	2b08      	cmp	r3, #8
 8004b78:	d122      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	f003 0308 	and.w	r3, r3, #8
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	d11b      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f06f 0208 	mvn.w	r2, #8
 8004b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2204      	movs	r2, #4
 8004b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f89a 	bl	8004ce0 <HAL_TIM_IC_CaptureCallback>
 8004bac:	e005      	b.n	8004bba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f88c 	bl	8004ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f89d 	bl	8004cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f003 0310 	and.w	r3, r3, #16
 8004bca:	2b10      	cmp	r3, #16
 8004bcc:	d122      	bne.n	8004c14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f003 0310 	and.w	r3, r3, #16
 8004bd8:	2b10      	cmp	r3, #16
 8004bda:	d11b      	bne.n	8004c14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f06f 0210 	mvn.w	r2, #16
 8004be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2208      	movs	r2, #8
 8004bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f870 	bl	8004ce0 <HAL_TIM_IC_CaptureCallback>
 8004c00:	e005      	b.n	8004c0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f862 	bl	8004ccc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f873 	bl	8004cf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d10e      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d107      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f06f 0201 	mvn.w	r2, #1
 8004c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7fc f8a4 	bl	8000d88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c4a:	2b80      	cmp	r3, #128	; 0x80
 8004c4c:	d10e      	bne.n	8004c6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c58:	2b80      	cmp	r3, #128	; 0x80
 8004c5a:	d107      	bne.n	8004c6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f8e2 	bl	8004e30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c76:	2b40      	cmp	r3, #64	; 0x40
 8004c78:	d10e      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c84:	2b40      	cmp	r3, #64	; 0x40
 8004c86:	d107      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f838 	bl	8004d08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	f003 0320 	and.w	r3, r3, #32
 8004ca2:	2b20      	cmp	r3, #32
 8004ca4:	d10e      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f003 0320 	and.w	r3, r3, #32
 8004cb0:	2b20      	cmp	r3, #32
 8004cb2:	d107      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f06f 0220 	mvn.w	r2, #32
 8004cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f8ac 	bl	8004e1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cc4:	bf00      	nop
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a34      	ldr	r2, [pc, #208]	; (8004e00 <TIM_Base_SetConfig+0xe4>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d00f      	beq.n	8004d54 <TIM_Base_SetConfig+0x38>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d3a:	d00b      	beq.n	8004d54 <TIM_Base_SetConfig+0x38>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a31      	ldr	r2, [pc, #196]	; (8004e04 <TIM_Base_SetConfig+0xe8>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d007      	beq.n	8004d54 <TIM_Base_SetConfig+0x38>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a30      	ldr	r2, [pc, #192]	; (8004e08 <TIM_Base_SetConfig+0xec>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d003      	beq.n	8004d54 <TIM_Base_SetConfig+0x38>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a2f      	ldr	r2, [pc, #188]	; (8004e0c <TIM_Base_SetConfig+0xf0>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d108      	bne.n	8004d66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a25      	ldr	r2, [pc, #148]	; (8004e00 <TIM_Base_SetConfig+0xe4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d01b      	beq.n	8004da6 <TIM_Base_SetConfig+0x8a>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d74:	d017      	beq.n	8004da6 <TIM_Base_SetConfig+0x8a>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a22      	ldr	r2, [pc, #136]	; (8004e04 <TIM_Base_SetConfig+0xe8>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d013      	beq.n	8004da6 <TIM_Base_SetConfig+0x8a>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a21      	ldr	r2, [pc, #132]	; (8004e08 <TIM_Base_SetConfig+0xec>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d00f      	beq.n	8004da6 <TIM_Base_SetConfig+0x8a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a20      	ldr	r2, [pc, #128]	; (8004e0c <TIM_Base_SetConfig+0xf0>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00b      	beq.n	8004da6 <TIM_Base_SetConfig+0x8a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a1f      	ldr	r2, [pc, #124]	; (8004e10 <TIM_Base_SetConfig+0xf4>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d007      	beq.n	8004da6 <TIM_Base_SetConfig+0x8a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a1e      	ldr	r2, [pc, #120]	; (8004e14 <TIM_Base_SetConfig+0xf8>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d003      	beq.n	8004da6 <TIM_Base_SetConfig+0x8a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a1d      	ldr	r2, [pc, #116]	; (8004e18 <TIM_Base_SetConfig+0xfc>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d108      	bne.n	8004db8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a08      	ldr	r2, [pc, #32]	; (8004e00 <TIM_Base_SetConfig+0xe4>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d103      	bne.n	8004dec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	691a      	ldr	r2, [r3, #16]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	615a      	str	r2, [r3, #20]
}
 8004df2:	bf00      	nop
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	40010000 	.word	0x40010000
 8004e04:	40000400 	.word	0x40000400
 8004e08:	40000800 	.word	0x40000800
 8004e0c:	40000c00 	.word	0x40000c00
 8004e10:	40014000 	.word	0x40014000
 8004e14:	40014400 	.word	0x40014400
 8004e18:	40014800 	.word	0x40014800

08004e1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e44:	b084      	sub	sp, #16
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b084      	sub	sp, #16
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
 8004e4e:	f107 001c 	add.w	r0, r7, #28
 8004e52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d122      	bne.n	8004ea2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d105      	bne.n	8004e96 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f9c0 	bl	800521c <USB_CoreReset>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	73fb      	strb	r3, [r7, #15]
 8004ea0:	e01a      	b.n	8004ed8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f9b4 	bl	800521c <USB_CoreReset>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d106      	bne.n	8004ecc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	639a      	str	r2, [r3, #56]	; 0x38
 8004eca:	e005      	b.n	8004ed8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d10b      	bne.n	8004ef6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f043 0206 	orr.w	r2, r3, #6
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f043 0220 	orr.w	r2, r3, #32
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f02:	b004      	add	sp, #16
 8004f04:	4770      	bx	lr

08004f06 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f043 0201 	orr.w	r2, r3, #1
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f023 0201 	bic.w	r2, r3, #1
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b084      	sub	sp, #16
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
 8004f52:	460b      	mov	r3, r1
 8004f54:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f56:	2300      	movs	r3, #0
 8004f58:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f66:	78fb      	ldrb	r3, [r7, #3]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d115      	bne.n	8004f98 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f78:	2001      	movs	r0, #1
 8004f7a:	f7fc fd79 	bl	8001a70 <HAL_Delay>
      ms++;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	3301      	adds	r3, #1
 8004f82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 f93a 	bl	80051fe <USB_GetMode>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d01e      	beq.n	8004fce <USB_SetCurrentMode+0x84>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2b31      	cmp	r3, #49	; 0x31
 8004f94:	d9f0      	bls.n	8004f78 <USB_SetCurrentMode+0x2e>
 8004f96:	e01a      	b.n	8004fce <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f98:	78fb      	ldrb	r3, [r7, #3]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d115      	bne.n	8004fca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004faa:	2001      	movs	r0, #1
 8004fac:	f7fc fd60 	bl	8001a70 <HAL_Delay>
      ms++;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f921 	bl	80051fe <USB_GetMode>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d005      	beq.n	8004fce <USB_SetCurrentMode+0x84>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b31      	cmp	r3, #49	; 0x31
 8004fc6:	d9f0      	bls.n	8004faa <USB_SetCurrentMode+0x60>
 8004fc8:	e001      	b.n	8004fce <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e005      	b.n	8004fda <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2b32      	cmp	r3, #50	; 0x32
 8004fd2:	d101      	bne.n	8004fd8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e000      	b.n	8004fda <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4a13      	ldr	r2, [pc, #76]	; (8005048 <USB_FlushTxFifo+0x64>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d901      	bls.n	8005004 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e01b      	b.n	800503c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	daf2      	bge.n	8004ff2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	019b      	lsls	r3, r3, #6
 8005014:	f043 0220 	orr.w	r2, r3, #32
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	3301      	adds	r3, #1
 8005020:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4a08      	ldr	r2, [pc, #32]	; (8005048 <USB_FlushTxFifo+0x64>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d901      	bls.n	800502e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e006      	b.n	800503c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	f003 0320 	and.w	r3, r3, #32
 8005036:	2b20      	cmp	r3, #32
 8005038:	d0f0      	beq.n	800501c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	00030d40 	.word	0x00030d40

0800504c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	3301      	adds	r3, #1
 800505c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	4a11      	ldr	r2, [pc, #68]	; (80050a8 <USB_FlushRxFifo+0x5c>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d901      	bls.n	800506a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e018      	b.n	800509c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	2b00      	cmp	r3, #0
 8005070:	daf2      	bge.n	8005058 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005072:	2300      	movs	r3, #0
 8005074:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2210      	movs	r2, #16
 800507a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	3301      	adds	r3, #1
 8005080:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	4a08      	ldr	r2, [pc, #32]	; (80050a8 <USB_FlushRxFifo+0x5c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d901      	bls.n	800508e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e006      	b.n	800509c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	f003 0310 	and.w	r3, r3, #16
 8005096:	2b10      	cmp	r3, #16
 8005098:	d0f0      	beq.n	800507c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	00030d40 	.word	0x00030d40

080050ac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b089      	sub	sp, #36	; 0x24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	4611      	mov	r1, r2
 80050b8:	461a      	mov	r2, r3
 80050ba:	460b      	mov	r3, r1
 80050bc:	71fb      	strb	r3, [r7, #7]
 80050be:	4613      	mov	r3, r2
 80050c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80050ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d123      	bne.n	800511a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80050d2:	88bb      	ldrh	r3, [r7, #4]
 80050d4:	3303      	adds	r3, #3
 80050d6:	089b      	lsrs	r3, r3, #2
 80050d8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80050da:	2300      	movs	r3, #0
 80050dc:	61bb      	str	r3, [r7, #24]
 80050de:	e018      	b.n	8005112 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80050e0:	79fb      	ldrb	r3, [r7, #7]
 80050e2:	031a      	lsls	r2, r3, #12
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ec:	461a      	mov	r2, r3
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	3301      	adds	r3, #1
 80050f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	3301      	adds	r3, #1
 80050fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	3301      	adds	r3, #1
 8005104:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	3301      	adds	r3, #1
 800510a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	3301      	adds	r3, #1
 8005110:	61bb      	str	r3, [r7, #24]
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	429a      	cmp	r2, r3
 8005118:	d3e2      	bcc.n	80050e0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3724      	adds	r7, #36	; 0x24
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005128:	b480      	push	{r7}
 800512a:	b08b      	sub	sp, #44	; 0x2c
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	4613      	mov	r3, r2
 8005134:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800513e:	88fb      	ldrh	r3, [r7, #6]
 8005140:	089b      	lsrs	r3, r3, #2
 8005142:	b29b      	uxth	r3, r3
 8005144:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005146:	88fb      	ldrh	r3, [r7, #6]
 8005148:	f003 0303 	and.w	r3, r3, #3
 800514c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800514e:	2300      	movs	r3, #0
 8005150:	623b      	str	r3, [r7, #32]
 8005152:	e014      	b.n	800517e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	3301      	adds	r3, #1
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005168:	3301      	adds	r3, #1
 800516a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	3301      	adds	r3, #1
 8005170:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	3301      	adds	r3, #1
 8005176:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005178:	6a3b      	ldr	r3, [r7, #32]
 800517a:	3301      	adds	r3, #1
 800517c:	623b      	str	r3, [r7, #32]
 800517e:	6a3a      	ldr	r2, [r7, #32]
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	429a      	cmp	r2, r3
 8005184:	d3e6      	bcc.n	8005154 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005186:	8bfb      	ldrh	r3, [r7, #30]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d01e      	beq.n	80051ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005196:	461a      	mov	r2, r3
 8005198:	f107 0310 	add.w	r3, r7, #16
 800519c:	6812      	ldr	r2, [r2, #0]
 800519e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	fa22 f303 	lsr.w	r3, r2, r3
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	701a      	strb	r2, [r3, #0]
      i++;
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	3301      	adds	r3, #1
 80051b6:	623b      	str	r3, [r7, #32]
      pDest++;
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	3301      	adds	r3, #1
 80051bc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80051be:	8bfb      	ldrh	r3, [r7, #30]
 80051c0:	3b01      	subs	r3, #1
 80051c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80051c4:	8bfb      	ldrh	r3, [r7, #30]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1ea      	bne.n	80051a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80051ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	372c      	adds	r7, #44	; 0x2c
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	4013      	ands	r3, r2
 80051ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80051f0:	68fb      	ldr	r3, [r7, #12]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80051fe:	b480      	push	{r7}
 8005200:	b083      	sub	sp, #12
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	f003 0301 	and.w	r3, r3, #1
}
 800520e:	4618      	mov	r0, r3
 8005210:	370c      	adds	r7, #12
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
	...

0800521c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005224:	2300      	movs	r3, #0
 8005226:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	3301      	adds	r3, #1
 800522c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	4a13      	ldr	r2, [pc, #76]	; (8005280 <USB_CoreReset+0x64>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d901      	bls.n	800523a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e01b      	b.n	8005272 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	2b00      	cmp	r3, #0
 8005240:	daf2      	bge.n	8005228 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005242:	2300      	movs	r3, #0
 8005244:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	f043 0201 	orr.w	r2, r3, #1
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	3301      	adds	r3, #1
 8005256:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4a09      	ldr	r2, [pc, #36]	; (8005280 <USB_CoreReset+0x64>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d901      	bls.n	8005264 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e006      	b.n	8005272 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b01      	cmp	r3, #1
 800526e:	d0f0      	beq.n	8005252 <USB_CoreReset+0x36>

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	00030d40 	.word	0x00030d40

08005284 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005284:	b084      	sub	sp, #16
 8005286:	b580      	push	{r7, lr}
 8005288:	b086      	sub	sp, #24
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
 800528e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005292:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052a4:	461a      	mov	r2, r3
 80052a6:	2300      	movs	r3, #0
 80052a8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ba:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d018      	beq.n	800530c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80052da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d10a      	bne.n	80052f6 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052ee:	f043 0304 	orr.w	r3, r3, #4
 80052f2:	6013      	str	r3, [r2, #0]
 80052f4:	e014      	b.n	8005320 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005304:	f023 0304 	bic.w	r3, r3, #4
 8005308:	6013      	str	r3, [r2, #0]
 800530a:	e009      	b.n	8005320 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800531a:	f023 0304 	bic.w	r3, r3, #4
 800531e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005320:	2110      	movs	r1, #16
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7ff fe5e 	bl	8004fe4 <USB_FlushTxFifo>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f7ff fe8a 	bl	800504c <USB_FlushRxFifo>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005342:	2300      	movs	r3, #0
 8005344:	613b      	str	r3, [r7, #16]
 8005346:	e015      	b.n	8005374 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	015a      	lsls	r2, r3, #5
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4413      	add	r3, r2
 8005350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005354:	461a      	mov	r2, r3
 8005356:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800535a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4413      	add	r3, r2
 8005364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005368:	461a      	mov	r2, r3
 800536a:	2300      	movs	r3, #0
 800536c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	3301      	adds	r3, #1
 8005372:	613b      	str	r3, [r7, #16]
 8005374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	429a      	cmp	r2, r3
 800537a:	d3e5      	bcc.n	8005348 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005388:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800538e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00b      	beq.n	80053ae <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f44f 7200 	mov.w	r2, #512	; 0x200
 800539c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a13      	ldr	r2, [pc, #76]	; (80053f0 <USB_HostInit+0x16c>)
 80053a2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a13      	ldr	r2, [pc, #76]	; (80053f4 <USB_HostInit+0x170>)
 80053a8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80053ac:	e009      	b.n	80053c2 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2280      	movs	r2, #128	; 0x80
 80053b2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a10      	ldr	r2, [pc, #64]	; (80053f8 <USB_HostInit+0x174>)
 80053b8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a0f      	ldr	r2, [pc, #60]	; (80053fc <USB_HostInit+0x178>)
 80053be:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80053c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d105      	bne.n	80053d4 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	f043 0210 	orr.w	r2, r3, #16
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	699a      	ldr	r2, [r3, #24]
 80053d8:	4b09      	ldr	r3, [pc, #36]	; (8005400 <USB_HostInit+0x17c>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80053e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3718      	adds	r7, #24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053ec:	b004      	add	sp, #16
 80053ee:	4770      	bx	lr
 80053f0:	01000200 	.word	0x01000200
 80053f4:	00e00300 	.word	0x00e00300
 80053f8:	00600080 	.word	0x00600080
 80053fc:	004000e0 	.word	0x004000e0
 8005400:	a3200008 	.word	0xa3200008

08005404 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	460b      	mov	r3, r1
 800540e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005422:	f023 0303 	bic.w	r3, r3, #3
 8005426:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	78fb      	ldrb	r3, [r7, #3]
 8005432:	f003 0303 	and.w	r3, r3, #3
 8005436:	68f9      	ldr	r1, [r7, #12]
 8005438:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800543c:	4313      	orrs	r3, r2
 800543e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005440:	78fb      	ldrb	r3, [r7, #3]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d107      	bne.n	8005456 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800544c:	461a      	mov	r2, r3
 800544e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005452:	6053      	str	r3, [r2, #4]
 8005454:	e009      	b.n	800546a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005456:	78fb      	ldrb	r3, [r7, #3]
 8005458:	2b02      	cmp	r3, #2
 800545a:	d106      	bne.n	800546a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005462:	461a      	mov	r2, r3
 8005464:	f241 7370 	movw	r3, #6000	; 0x1770
 8005468:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005484:	2300      	movs	r3, #0
 8005486:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005498:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80054a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054a6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80054a8:	2064      	movs	r0, #100	; 0x64
 80054aa:	f7fc fae1 	bl	8001a70 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80054b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054ba:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80054bc:	200a      	movs	r0, #10
 80054be:	f7fc fad7 	bl	8001a70 <HAL_Delay>

  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	460b      	mov	r3, r1
 80054d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80054dc:	2300      	movs	r3, #0
 80054de:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80054f0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d109      	bne.n	8005510 <USB_DriveVbus+0x44>
 80054fc:	78fb      	ldrb	r3, [r7, #3]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d106      	bne.n	8005510 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800550a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800550e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800551a:	d109      	bne.n	8005530 <USB_DriveVbus+0x64>
 800551c:	78fb      	ldrb	r3, [r7, #3]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d106      	bne.n	8005530 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800552a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800552e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800553e:	b480      	push	{r7}
 8005540:	b085      	sub	sp, #20
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800554a:	2300      	movs	r3, #0
 800554c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	0c5b      	lsrs	r3, r3, #17
 800555c:	f003 0303 	and.w	r3, r3, #3
}
 8005560:	4618      	mov	r0, r3
 8005562:	3714      	adds	r7, #20
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	b29b      	uxth	r3, r3
}
 8005582:	4618      	mov	r0, r3
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
	...

08005590 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b088      	sub	sp, #32
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	4608      	mov	r0, r1
 800559a:	4611      	mov	r1, r2
 800559c:	461a      	mov	r2, r3
 800559e:	4603      	mov	r3, r0
 80055a0:	70fb      	strb	r3, [r7, #3]
 80055a2:	460b      	mov	r3, r1
 80055a4:	70bb      	strb	r3, [r7, #2]
 80055a6:	4613      	mov	r3, r2
 80055a8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80055aa:	2300      	movs	r3, #0
 80055ac:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80055b2:	78fb      	ldrb	r3, [r7, #3]
 80055b4:	015a      	lsls	r2, r3, #5
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	4413      	add	r3, r2
 80055ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055be:	461a      	mov	r2, r3
 80055c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055c4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80055c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80055ca:	2b03      	cmp	r3, #3
 80055cc:	d87e      	bhi.n	80056cc <USB_HC_Init+0x13c>
 80055ce:	a201      	add	r2, pc, #4	; (adr r2, 80055d4 <USB_HC_Init+0x44>)
 80055d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d4:	080055e5 	.word	0x080055e5
 80055d8:	0800568f 	.word	0x0800568f
 80055dc:	080055e5 	.word	0x080055e5
 80055e0:	08005651 	.word	0x08005651
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80055e4:	78fb      	ldrb	r3, [r7, #3]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055f0:	461a      	mov	r2, r3
 80055f2:	f240 439d 	movw	r3, #1181	; 0x49d
 80055f6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80055f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	da10      	bge.n	8005622 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005600:	78fb      	ldrb	r3, [r7, #3]
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	4413      	add	r3, r2
 8005608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	78fa      	ldrb	r2, [r7, #3]
 8005610:	0151      	lsls	r1, r2, #5
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	440a      	add	r2, r1
 8005616:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800561a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800561e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005620:	e057      	b.n	80056d2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800562a:	2b00      	cmp	r3, #0
 800562c:	d051      	beq.n	80056d2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800562e:	78fb      	ldrb	r3, [r7, #3]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	4413      	add	r3, r2
 8005636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	78fa      	ldrb	r2, [r7, #3]
 800563e:	0151      	lsls	r1, r2, #5
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	440a      	add	r2, r1
 8005644:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005648:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800564c:	60d3      	str	r3, [r2, #12]
      break;
 800564e:	e040      	b.n	80056d2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005650:	78fb      	ldrb	r3, [r7, #3]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	4413      	add	r3, r2
 8005658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800565c:	461a      	mov	r2, r3
 800565e:	f240 639d 	movw	r3, #1693	; 0x69d
 8005662:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005664:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005668:	2b00      	cmp	r3, #0
 800566a:	da34      	bge.n	80056d6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800566c:	78fb      	ldrb	r3, [r7, #3]
 800566e:	015a      	lsls	r2, r3, #5
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	4413      	add	r3, r2
 8005674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	78fa      	ldrb	r2, [r7, #3]
 800567c:	0151      	lsls	r1, r2, #5
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	440a      	add	r2, r1
 8005682:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800568a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800568c:	e023      	b.n	80056d6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800568e:	78fb      	ldrb	r3, [r7, #3]
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	4413      	add	r3, r2
 8005696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800569a:	461a      	mov	r2, r3
 800569c:	f240 2325 	movw	r3, #549	; 0x225
 80056a0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80056a2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	da17      	bge.n	80056da <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80056aa:	78fb      	ldrb	r3, [r7, #3]
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	78fa      	ldrb	r2, [r7, #3]
 80056ba:	0151      	lsls	r1, r2, #5
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	440a      	add	r2, r1
 80056c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056c4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80056c8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80056ca:	e006      	b.n	80056da <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	77fb      	strb	r3, [r7, #31]
      break;
 80056d0:	e004      	b.n	80056dc <USB_HC_Init+0x14c>
      break;
 80056d2:	bf00      	nop
 80056d4:	e002      	b.n	80056dc <USB_HC_Init+0x14c>
      break;
 80056d6:	bf00      	nop
 80056d8:	e000      	b.n	80056dc <USB_HC_Init+0x14c>
      break;
 80056da:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80056dc:	78fb      	ldrb	r3, [r7, #3]
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	78fa      	ldrb	r2, [r7, #3]
 80056ec:	0151      	lsls	r1, r2, #5
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	440a      	add	r2, r1
 80056f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056f6:	f043 0302 	orr.w	r3, r3, #2
 80056fa:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005702:	699a      	ldr	r2, [r3, #24]
 8005704:	78fb      	ldrb	r3, [r7, #3]
 8005706:	f003 030f 	and.w	r3, r3, #15
 800570a:	2101      	movs	r1, #1
 800570c:	fa01 f303 	lsl.w	r3, r1, r3
 8005710:	6939      	ldr	r1, [r7, #16]
 8005712:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005716:	4313      	orrs	r3, r2
 8005718:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005726:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800572a:	2b00      	cmp	r3, #0
 800572c:	da03      	bge.n	8005736 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800572e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005732:	61bb      	str	r3, [r7, #24]
 8005734:	e001      	b.n	800573a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005736:	2300      	movs	r3, #0
 8005738:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7ff feff 	bl	800553e <USB_GetHostSpeed>
 8005740:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005742:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005746:	2b02      	cmp	r3, #2
 8005748:	d106      	bne.n	8005758 <USB_HC_Init+0x1c8>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2b02      	cmp	r3, #2
 800574e:	d003      	beq.n	8005758 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005750:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005754:	617b      	str	r3, [r7, #20]
 8005756:	e001      	b.n	800575c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005758:	2300      	movs	r3, #0
 800575a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800575c:	787b      	ldrb	r3, [r7, #1]
 800575e:	059b      	lsls	r3, r3, #22
 8005760:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005764:	78bb      	ldrb	r3, [r7, #2]
 8005766:	02db      	lsls	r3, r3, #11
 8005768:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800576c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800576e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005772:	049b      	lsls	r3, r3, #18
 8005774:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005778:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800577a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800577c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005780:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005786:	78fb      	ldrb	r3, [r7, #3]
 8005788:	0159      	lsls	r1, r3, #5
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	440b      	add	r3, r1
 800578e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005792:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005798:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800579a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800579e:	2b03      	cmp	r3, #3
 80057a0:	d003      	beq.n	80057aa <USB_HC_Init+0x21a>
 80057a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d10f      	bne.n	80057ca <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80057aa:	78fb      	ldrb	r3, [r7, #3]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	78fa      	ldrb	r2, [r7, #3]
 80057ba:	0151      	lsls	r1, r2, #5
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	440a      	add	r2, r1
 80057c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057c8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80057ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3720      	adds	r7, #32
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b08c      	sub	sp, #48	; 0x30
 80057d8:	af02      	add	r7, sp, #8
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	4613      	mov	r3, r2
 80057e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	785b      	ldrb	r3, [r3, #1]
 80057ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80057ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057f0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d02d      	beq.n	800585a <USB_HC_StartXfer+0x86>
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	791b      	ldrb	r3, [r3, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d129      	bne.n	800585a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005806:	79fb      	ldrb	r3, [r7, #7]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d117      	bne.n	800583c <USB_HC_StartXfer+0x68>
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	79db      	ldrb	r3, [r3, #7]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <USB_HC_StartXfer+0x48>
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	79db      	ldrb	r3, [r3, #7]
 8005818:	2b02      	cmp	r3, #2
 800581a:	d10f      	bne.n	800583c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	6a3b      	ldr	r3, [r7, #32]
 8005822:	4413      	add	r3, r2
 8005824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	69fa      	ldr	r2, [r7, #28]
 800582c:	0151      	lsls	r1, r2, #5
 800582e:	6a3a      	ldr	r2, [r7, #32]
 8005830:	440a      	add	r2, r1
 8005832:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800583a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800583c:	79fb      	ldrb	r3, [r7, #7]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10b      	bne.n	800585a <USB_HC_StartXfer+0x86>
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	795b      	ldrb	r3, [r3, #5]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d107      	bne.n	800585a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	785b      	ldrb	r3, [r3, #1]
 800584e:	4619      	mov	r1, r3
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f000 fa0f 	bl	8005c74 <USB_DoPing>
      return HAL_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	e0f8      	b.n	8005a4c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d018      	beq.n	8005894 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	8912      	ldrh	r2, [r2, #8]
 800586a:	4413      	add	r3, r2
 800586c:	3b01      	subs	r3, #1
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	8912      	ldrh	r2, [r2, #8]
 8005872:	fbb3 f3f2 	udiv	r3, r3, r2
 8005876:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005878:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800587a:	8b7b      	ldrh	r3, [r7, #26]
 800587c:	429a      	cmp	r2, r3
 800587e:	d90b      	bls.n	8005898 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005880:	8b7b      	ldrh	r3, [r7, #26]
 8005882:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005884:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	8912      	ldrh	r2, [r2, #8]
 800588a:	fb03 f202 	mul.w	r2, r3, r2
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	611a      	str	r2, [r3, #16]
 8005892:	e001      	b.n	8005898 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005894:	2301      	movs	r3, #1
 8005896:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	78db      	ldrb	r3, [r3, #3]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d007      	beq.n	80058b0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80058a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	8912      	ldrh	r2, [r2, #8]
 80058a6:	fb03 f202 	mul.w	r2, r3, r2
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	611a      	str	r2, [r3, #16]
 80058ae:	e003      	b.n	80058b8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	695a      	ldr	r2, [r3, #20]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80058c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058c2:	04d9      	lsls	r1, r3, #19
 80058c4:	4b63      	ldr	r3, [pc, #396]	; (8005a54 <USB_HC_StartXfer+0x280>)
 80058c6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80058c8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	7a9b      	ldrb	r3, [r3, #10]
 80058ce:	075b      	lsls	r3, r3, #29
 80058d0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80058d4:	69f9      	ldr	r1, [r7, #28]
 80058d6:	0148      	lsls	r0, r1, #5
 80058d8:	6a39      	ldr	r1, [r7, #32]
 80058da:	4401      	add	r1, r0
 80058dc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80058e0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80058e2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80058e4:	79fb      	ldrb	r3, [r7, #7]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d009      	beq.n	80058fe <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	68d9      	ldr	r1, [r3, #12]
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	015a      	lsls	r2, r3, #5
 80058f2:	6a3b      	ldr	r3, [r7, #32]
 80058f4:	4413      	add	r3, r2
 80058f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058fa:	460a      	mov	r2, r1
 80058fc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	bf0c      	ite	eq
 800590e:	2301      	moveq	r3, #1
 8005910:	2300      	movne	r3, #0
 8005912:	b2db      	uxtb	r3, r3
 8005914:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	4413      	add	r3, r2
 800591e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	69fa      	ldr	r2, [r7, #28]
 8005926:	0151      	lsls	r1, r2, #5
 8005928:	6a3a      	ldr	r2, [r7, #32]
 800592a:	440a      	add	r2, r1
 800592c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005930:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005934:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	6a3b      	ldr	r3, [r7, #32]
 800593c:	4413      	add	r3, r2
 800593e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	7e7b      	ldrb	r3, [r7, #25]
 8005946:	075b      	lsls	r3, r3, #29
 8005948:	69f9      	ldr	r1, [r7, #28]
 800594a:	0148      	lsls	r0, r1, #5
 800594c:	6a39      	ldr	r1, [r7, #32]
 800594e:	4401      	add	r1, r0
 8005950:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005954:	4313      	orrs	r3, r2
 8005956:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	6a3b      	ldr	r3, [r7, #32]
 800595e:	4413      	add	r3, r2
 8005960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800596e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	78db      	ldrb	r3, [r3, #3]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d004      	beq.n	8005982 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800597e:	613b      	str	r3, [r7, #16]
 8005980:	e003      	b.n	800598a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005988:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005990:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	4413      	add	r3, r2
 800599a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800599e:	461a      	mov	r2, r3
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80059a4:	79fb      	ldrb	r3, [r7, #7]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80059aa:	2300      	movs	r3, #0
 80059ac:	e04e      	b.n	8005a4c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	78db      	ldrb	r3, [r3, #3]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d149      	bne.n	8005a4a <USB_HC_StartXfer+0x276>
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d045      	beq.n	8005a4a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	79db      	ldrb	r3, [r3, #7]
 80059c2:	2b03      	cmp	r3, #3
 80059c4:	d830      	bhi.n	8005a28 <USB_HC_StartXfer+0x254>
 80059c6:	a201      	add	r2, pc, #4	; (adr r2, 80059cc <USB_HC_StartXfer+0x1f8>)
 80059c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059cc:	080059dd 	.word	0x080059dd
 80059d0:	08005a01 	.word	0x08005a01
 80059d4:	080059dd 	.word	0x080059dd
 80059d8:	08005a01 	.word	0x08005a01
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	3303      	adds	r3, #3
 80059e2:	089b      	lsrs	r3, r3, #2
 80059e4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80059e6:	8afa      	ldrh	r2, [r7, #22]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d91c      	bls.n	8005a2c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	f043 0220 	orr.w	r2, r3, #32
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	619a      	str	r2, [r3, #24]
        }
        break;
 80059fe:	e015      	b.n	8005a2c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	3303      	adds	r3, #3
 8005a06:	089b      	lsrs	r3, r3, #2
 8005a08:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005a0a:	8afa      	ldrh	r2, [r7, #22]
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d90a      	bls.n	8005a30 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	619a      	str	r2, [r3, #24]
        }
        break;
 8005a26:	e003      	b.n	8005a30 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005a28:	bf00      	nop
 8005a2a:	e002      	b.n	8005a32 <USB_HC_StartXfer+0x25e>
        break;
 8005a2c:	bf00      	nop
 8005a2e:	e000      	b.n	8005a32 <USB_HC_StartXfer+0x25e>
        break;
 8005a30:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	68d9      	ldr	r1, [r3, #12]
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	785a      	ldrb	r2, [r3, #1]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	2000      	movs	r0, #0
 8005a42:	9000      	str	r0, [sp, #0]
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f7ff fb31 	bl	80050ac <USB_WritePacket>
  }

  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3728      	adds	r7, #40	; 0x28
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	1ff80000 	.word	0x1ff80000

08005a58 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	b29b      	uxth	r3, r3
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b089      	sub	sp, #36	; 0x24
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
 8005a82:	460b      	mov	r3, r1
 8005a84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005a8a:	78fb      	ldrb	r3, [r7, #3]
 8005a8c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	0c9b      	lsrs	r3, r3, #18
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	015a      	lsls	r2, r3, #5
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	0fdb      	lsrs	r3, r3, #31
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f003 0320 	and.w	r3, r3, #32
 8005ac6:	2b20      	cmp	r3, #32
 8005ac8:	d104      	bne.n	8005ad4 <USB_HC_Halt+0x5a>
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d101      	bne.n	8005ad4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	e0c8      	b.n	8005c66 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d002      	beq.n	8005ae0 <USB_HC_Halt+0x66>
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d163      	bne.n	8005ba8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	0151      	lsls	r1, r2, #5
 8005af2:	69fa      	ldr	r2, [r7, #28]
 8005af4:	440a      	add	r2, r1
 8005af6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005afa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005afe:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f003 0320 	and.w	r3, r3, #32
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f040 80ab 	bne.w	8005c64 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b12:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d133      	bne.n	8005b82 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	0151      	lsls	r1, r2, #5
 8005b2c:	69fa      	ldr	r2, [r7, #28]
 8005b2e:	440a      	add	r2, r1
 8005b30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b38:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	0151      	lsls	r1, r2, #5
 8005b4c:	69fa      	ldr	r2, [r7, #28]
 8005b4e:	440a      	add	r2, r1
 8005b50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b58:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b66:	d81d      	bhi.n	8005ba4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b7e:	d0ec      	beq.n	8005b5a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b80:	e070      	b.n	8005c64 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	015a      	lsls	r2, r3, #5
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	4413      	add	r3, r2
 8005b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	0151      	lsls	r1, r2, #5
 8005b94:	69fa      	ldr	r2, [r7, #28]
 8005b96:	440a      	add	r2, r1
 8005b98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ba0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ba2:	e05f      	b.n	8005c64 <USB_HC_Halt+0x1ea>
            break;
 8005ba4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ba6:	e05d      	b.n	8005c64 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	0151      	lsls	r1, r2, #5
 8005bba:	69fa      	ldr	r2, [r7, #28]
 8005bbc:	440a      	add	r2, r1
 8005bbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bc2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bc6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d133      	bne.n	8005c40 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	69ba      	ldr	r2, [r7, #24]
 8005be8:	0151      	lsls	r1, r2, #5
 8005bea:	69fa      	ldr	r2, [r7, #28]
 8005bec:	440a      	add	r2, r1
 8005bee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bf2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bf6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	69ba      	ldr	r2, [r7, #24]
 8005c08:	0151      	lsls	r1, r2, #5
 8005c0a:	69fa      	ldr	r2, [r7, #28]
 8005c0c:	440a      	add	r2, r1
 8005c0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c16:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c24:	d81d      	bhi.n	8005c62 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c3c:	d0ec      	beq.n	8005c18 <USB_HC_Halt+0x19e>
 8005c3e:	e011      	b.n	8005c64 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	0151      	lsls	r1, r2, #5
 8005c52:	69fa      	ldr	r2, [r7, #28]
 8005c54:	440a      	add	r2, r1
 8005c56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c5e:	6013      	str	r3, [r2, #0]
 8005c60:	e000      	b.n	8005c64 <USB_HC_Halt+0x1ea>
          break;
 8005c62:	bf00      	nop
    }
  }

  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3724      	adds	r7, #36	; 0x24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
	...

08005c74 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005c84:	78fb      	ldrb	r3, [r7, #3]
 8005c86:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	04da      	lsls	r2, r3, #19
 8005c90:	4b15      	ldr	r3, [pc, #84]	; (8005ce8 <USB_DoPing+0x74>)
 8005c92:	4013      	ands	r3, r2
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	0151      	lsls	r1, r2, #5
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	440a      	add	r2, r1
 8005c9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ca0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ca4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005cbc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cc4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	371c      	adds	r7, #28
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	1ff80000 	.word	0x1ff80000

08005cec <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b088      	sub	sp, #32
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f7ff f911 	bl	8004f28 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d06:	2110      	movs	r1, #16
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f7ff f96b 	bl	8004fe4 <USB_FlushTxFifo>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f7ff f997 	bl	800504c <USB_FlushRxFifo>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d001      	beq.n	8005d28 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005d28:	2300      	movs	r3, #0
 8005d2a:	61bb      	str	r3, [r7, #24]
 8005d2c:	e01f      	b.n	8005d6e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d44:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d4c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d54:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d62:	461a      	mov	r2, r3
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	61bb      	str	r3, [r7, #24]
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	2b0f      	cmp	r3, #15
 8005d72:	d9dc      	bls.n	8005d2e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005d74:	2300      	movs	r3, #0
 8005d76:	61bb      	str	r3, [r7, #24]
 8005d78:	e034      	b.n	8005de4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	015a      	lsls	r2, r3, #5
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	4413      	add	r3, r2
 8005d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d90:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d98:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005da0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	015a      	lsls	r2, r3, #5
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dae:	461a      	mov	r2, r3
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	3301      	adds	r3, #1
 8005db8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dc0:	d80c      	bhi.n	8005ddc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dd8:	d0ec      	beq.n	8005db4 <USB_StopHost+0xc8>
 8005dda:	e000      	b.n	8005dde <USB_StopHost+0xf2>
        break;
 8005ddc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	3301      	adds	r3, #1
 8005de2:	61bb      	str	r3, [r7, #24]
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	2b0f      	cmp	r3, #15
 8005de8:	d9c7      	bls.n	8005d7a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005df0:	461a      	mov	r2, r3
 8005df2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005df6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005dfe:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7ff f880 	bl	8004f06 <USB_EnableGlobalInt>

  return ret;
 8005e06:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3720      	adds	r7, #32
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005e10:	b590      	push	{r4, r7, lr}
 8005e12:	b089      	sub	sp, #36	; 0x24
 8005e14:	af04      	add	r7, sp, #16
 8005e16:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005e18:	2301      	movs	r3, #1
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	2102      	movs	r1, #2
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 fc66 	bl	80066f0 <USBH_FindInterface>
 8005e24:	4603      	mov	r3, r0
 8005e26:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005e28:	7bfb      	ldrb	r3, [r7, #15]
 8005e2a:	2bff      	cmp	r3, #255	; 0xff
 8005e2c:	d002      	beq.n	8005e34 <USBH_CDC_InterfaceInit+0x24>
 8005e2e:	7bfb      	ldrb	r3, [r7, #15]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d901      	bls.n	8005e38 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005e34:	2302      	movs	r3, #2
 8005e36:	e13d      	b.n	80060b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 fc3b 	bl	80066b8 <USBH_SelectInterface>
 8005e42:	4603      	mov	r3, r0
 8005e44:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005e46:	7bbb      	ldrb	r3, [r7, #14]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d001      	beq.n	8005e50 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	e131      	b.n	80060b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005e56:	2050      	movs	r0, #80	; 0x50
 8005e58:	f002 fafa 	bl	8008450 <malloc>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e66:	69db      	ldr	r3, [r3, #28]
 8005e68:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005e70:	2302      	movs	r3, #2
 8005e72:	e11f      	b.n	80060b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005e74:	2250      	movs	r2, #80	; 0x50
 8005e76:	2100      	movs	r1, #0
 8005e78:	68b8      	ldr	r0, [r7, #8]
 8005e7a:	f002 faf9 	bl	8008470 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005e7e:	7bfb      	ldrb	r3, [r7, #15]
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	211a      	movs	r1, #26
 8005e84:	fb01 f303 	mul.w	r3, r1, r3
 8005e88:	4413      	add	r3, r2
 8005e8a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	b25b      	sxtb	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	da15      	bge.n	8005ec2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005e96:	7bfb      	ldrb	r3, [r7, #15]
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	211a      	movs	r1, #26
 8005e9c:	fb01 f303 	mul.w	r3, r1, r3
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ea6:	781a      	ldrb	r2, [r3, #0]
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005eac:	7bfb      	ldrb	r3, [r7, #15]
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	211a      	movs	r1, #26
 8005eb2:	fb01 f303 	mul.w	r3, r1, r3
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005ebc:	881a      	ldrh	r2, [r3, #0]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	785b      	ldrb	r3, [r3, #1]
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f001 ff2c 	bl	8007d26 <USBH_AllocPipe>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	7819      	ldrb	r1, [r3, #0]
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	7858      	ldrb	r0, [r3, #1]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	8952      	ldrh	r2, [r2, #10]
 8005eee:	9202      	str	r2, [sp, #8]
 8005ef0:	2203      	movs	r2, #3
 8005ef2:	9201      	str	r2, [sp, #4]
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	4623      	mov	r3, r4
 8005ef8:	4602      	mov	r2, r0
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f001 fee4 	bl	8007cc8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	2200      	movs	r2, #0
 8005f06:	4619      	mov	r1, r3
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f002 f9f3 	bl	80082f4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005f0e:	2300      	movs	r3, #0
 8005f10:	2200      	movs	r2, #0
 8005f12:	210a      	movs	r1, #10
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 fbeb 	bl	80066f0 <USBH_FindInterface>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
 8005f20:	2bff      	cmp	r3, #255	; 0xff
 8005f22:	d002      	beq.n	8005f2a <USBH_CDC_InterfaceInit+0x11a>
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d901      	bls.n	8005f2e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	e0c2      	b.n	80060b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005f2e:	7bfb      	ldrb	r3, [r7, #15]
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	211a      	movs	r1, #26
 8005f34:	fb01 f303 	mul.w	r3, r1, r3
 8005f38:	4413      	add	r3, r2
 8005f3a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	b25b      	sxtb	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	da16      	bge.n	8005f74 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	211a      	movs	r1, #26
 8005f4c:	fb01 f303 	mul.w	r3, r1, r3
 8005f50:	4413      	add	r3, r2
 8005f52:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f56:	781a      	ldrb	r2, [r3, #0]
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005f5c:	7bfb      	ldrb	r3, [r7, #15]
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	211a      	movs	r1, #26
 8005f62:	fb01 f303 	mul.w	r3, r1, r3
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005f6c:	881a      	ldrh	r2, [r3, #0]
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	835a      	strh	r2, [r3, #26]
 8005f72:	e015      	b.n	8005fa0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	211a      	movs	r1, #26
 8005f7a:	fb01 f303 	mul.w	r3, r1, r3
 8005f7e:	4413      	add	r3, r2
 8005f80:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f84:	781a      	ldrb	r2, [r3, #0]
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005f8a:	7bfb      	ldrb	r3, [r7, #15]
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	211a      	movs	r1, #26
 8005f90:	fb01 f303 	mul.w	r3, r1, r3
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005f9a:	881a      	ldrh	r2, [r3, #0]
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	211a      	movs	r1, #26
 8005fa6:	fb01 f303 	mul.w	r3, r1, r3
 8005faa:	4413      	add	r3, r2
 8005fac:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	b25b      	sxtb	r3, r3
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	da16      	bge.n	8005fe6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	211a      	movs	r1, #26
 8005fbe:	fb01 f303 	mul.w	r3, r1, r3
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005fc8:	781a      	ldrb	r2, [r3, #0]
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005fce:	7bfb      	ldrb	r3, [r7, #15]
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	211a      	movs	r1, #26
 8005fd4:	fb01 f303 	mul.w	r3, r1, r3
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005fde:	881a      	ldrh	r2, [r3, #0]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	835a      	strh	r2, [r3, #26]
 8005fe4:	e015      	b.n	8006012 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005fe6:	7bfb      	ldrb	r3, [r7, #15]
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	211a      	movs	r1, #26
 8005fec:	fb01 f303 	mul.w	r3, r1, r3
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005ff6:	781a      	ldrb	r2, [r3, #0]
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	211a      	movs	r1, #26
 8006002:	fb01 f303 	mul.w	r3, r1, r3
 8006006:	4413      	add	r3, r2
 8006008:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800600c:	881a      	ldrh	r2, [r3, #0]
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	7b9b      	ldrb	r3, [r3, #14]
 8006016:	4619      	mov	r1, r3
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f001 fe84 	bl	8007d26 <USBH_AllocPipe>
 800601e:	4603      	mov	r3, r0
 8006020:	461a      	mov	r2, r3
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	7bdb      	ldrb	r3, [r3, #15]
 800602a:	4619      	mov	r1, r3
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f001 fe7a 	bl	8007d26 <USBH_AllocPipe>
 8006032:	4603      	mov	r3, r0
 8006034:	461a      	mov	r2, r3
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	7b59      	ldrb	r1, [r3, #13]
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	7b98      	ldrb	r0, [r3, #14]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	8b12      	ldrh	r2, [r2, #24]
 8006052:	9202      	str	r2, [sp, #8]
 8006054:	2202      	movs	r2, #2
 8006056:	9201      	str	r2, [sp, #4]
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	4623      	mov	r3, r4
 800605c:	4602      	mov	r2, r0
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f001 fe32 	bl	8007cc8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	7b19      	ldrb	r1, [r3, #12]
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	7bd8      	ldrb	r0, [r3, #15]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	8b52      	ldrh	r2, [r2, #26]
 800607c:	9202      	str	r2, [sp, #8]
 800607e:	2202      	movs	r2, #2
 8006080:	9201      	str	r2, [sp, #4]
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	4623      	mov	r3, r4
 8006086:	4602      	mov	r2, r0
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f001 fe1d 	bl	8007cc8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	7b5b      	ldrb	r3, [r3, #13]
 800609a:	2200      	movs	r2, #0
 800609c:	4619      	mov	r1, r3
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f002 f928 	bl	80082f4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	7b1b      	ldrb	r3, [r3, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	4619      	mov	r1, r3
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f002 f921 	bl	80082f4 <USBH_LL_SetToggle>

  return USBH_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd90      	pop	{r4, r7, pc}

080060bc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060ca:	69db      	ldr	r3, [r3, #28]
 80060cc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00e      	beq.n	80060f4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	4619      	mov	r1, r3
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f001 fe12 	bl	8007d06 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	4619      	mov	r1, r3
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f001 fe3d 	bl	8007d68 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	7b1b      	ldrb	r3, [r3, #12]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00e      	beq.n	800611a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	7b1b      	ldrb	r3, [r3, #12]
 8006100:	4619      	mov	r1, r3
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f001 fdff 	bl	8007d06 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	7b1b      	ldrb	r3, [r3, #12]
 800610c:	4619      	mov	r1, r3
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f001 fe2a 	bl	8007d68 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	7b5b      	ldrb	r3, [r3, #13]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00e      	beq.n	8006140 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	7b5b      	ldrb	r3, [r3, #13]
 8006126:	4619      	mov	r1, r3
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f001 fdec 	bl	8007d06 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	7b5b      	ldrb	r3, [r3, #13]
 8006132:	4619      	mov	r1, r3
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f001 fe17 	bl	8007d68 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006146:	69db      	ldr	r3, [r3, #28]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00b      	beq.n	8006164 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006152:	69db      	ldr	r3, [r3, #28]
 8006154:	4618      	mov	r0, r3
 8006156:	f002 f983 	bl	8008460 <free>
    phost->pActiveClass->pData = 0U;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006160:	2200      	movs	r2, #0
 8006162:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800617c:	69db      	ldr	r3, [r3, #28]
 800617e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	3340      	adds	r3, #64	; 0x40
 8006184:	4619      	mov	r1, r3
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 f8b1 	bl	80062ee <GetLineCoding>
 800618c:	4603      	mov	r3, r0
 800618e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006190:	7afb      	ldrb	r3, [r7, #11]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d105      	bne.n	80061a2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800619c:	2102      	movs	r1, #2
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80061a2:	7afb      	ldrb	r3, [r7, #11]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80061b4:	2301      	movs	r3, #1
 80061b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80061b8:	2300      	movs	r3, #0
 80061ba:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061c2:	69db      	ldr	r3, [r3, #28]
 80061c4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80061cc:	2b04      	cmp	r3, #4
 80061ce:	d877      	bhi.n	80062c0 <USBH_CDC_Process+0x114>
 80061d0:	a201      	add	r2, pc, #4	; (adr r2, 80061d8 <USBH_CDC_Process+0x2c>)
 80061d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d6:	bf00      	nop
 80061d8:	080061ed 	.word	0x080061ed
 80061dc:	080061f3 	.word	0x080061f3
 80061e0:	08006223 	.word	0x08006223
 80061e4:	08006297 	.word	0x08006297
 80061e8:	080062a5 	.word	0x080062a5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80061ec:	2300      	movs	r3, #0
 80061ee:	73fb      	strb	r3, [r7, #15]
      break;
 80061f0:	e06d      	b.n	80062ce <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061f6:	4619      	mov	r1, r3
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f897 	bl	800632c <SetLineCoding>
 80061fe:	4603      	mov	r3, r0
 8006200:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006202:	7bbb      	ldrb	r3, [r7, #14]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d104      	bne.n	8006212 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	2202      	movs	r2, #2
 800620c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006210:	e058      	b.n	80062c4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006212:	7bbb      	ldrb	r3, [r7, #14]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d055      	beq.n	80062c4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	2204      	movs	r2, #4
 800621c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006220:	e050      	b.n	80062c4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	3340      	adds	r3, #64	; 0x40
 8006226:	4619      	mov	r1, r3
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 f860 	bl	80062ee <GetLineCoding>
 800622e:	4603      	mov	r3, r0
 8006230:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006232:	7bbb      	ldrb	r3, [r7, #14]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d126      	bne.n	8006286 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800624a:	791b      	ldrb	r3, [r3, #4]
 800624c:	429a      	cmp	r2, r3
 800624e:	d13b      	bne.n	80062c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800625a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800625c:	429a      	cmp	r2, r3
 800625e:	d133      	bne.n	80062c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800626a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800626c:	429a      	cmp	r2, r3
 800626e:	d12b      	bne.n	80062c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006278:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800627a:	429a      	cmp	r2, r3
 800627c:	d124      	bne.n	80062c8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f958 	bl	8006534 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006284:	e020      	b.n	80062c8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006286:	7bbb      	ldrb	r3, [r7, #14]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d01d      	beq.n	80062c8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	2204      	movs	r2, #4
 8006290:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006294:	e018      	b.n	80062c8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f867 	bl	800636a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 f8da 	bl	8006456 <CDC_ProcessReception>
      break;
 80062a2:	e014      	b.n	80062ce <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80062a4:	2100      	movs	r1, #0
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 ffef 	bl	800728a <USBH_ClrFeature>
 80062ac:	4603      	mov	r3, r0
 80062ae:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80062b0:	7bbb      	ldrb	r3, [r7, #14]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10a      	bne.n	80062cc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80062be:	e005      	b.n	80062cc <USBH_CDC_Process+0x120>

    default:
      break;
 80062c0:	bf00      	nop
 80062c2:	e004      	b.n	80062ce <USBH_CDC_Process+0x122>
      break;
 80062c4:	bf00      	nop
 80062c6:	e002      	b.n	80062ce <USBH_CDC_Process+0x122>
      break;
 80062c8:	bf00      	nop
 80062ca:	e000      	b.n	80062ce <USBH_CDC_Process+0x122>
      break;
 80062cc:	bf00      	nop

  }

  return status;
 80062ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b082      	sub	sp, #8
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
 80062f6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	22a1      	movs	r2, #161	; 0xa1
 80062fc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2221      	movs	r2, #33	; 0x21
 8006302:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2207      	movs	r2, #7
 8006314:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2207      	movs	r2, #7
 800631a:	4619      	mov	r1, r3
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f001 fa81 	bl	8007824 <USBH_CtlReq>
 8006322:	4603      	mov	r3, r0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3708      	adds	r7, #8
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2221      	movs	r2, #33	; 0x21
 800633a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2220      	movs	r2, #32
 8006340:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2207      	movs	r2, #7
 8006352:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	2207      	movs	r2, #7
 8006358:	4619      	mov	r1, r3
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f001 fa62 	bl	8007824 <USBH_CtlReq>
 8006360:	4603      	mov	r3, r0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b086      	sub	sp, #24
 800636e:	af02      	add	r7, sp, #8
 8006370:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800637c:	2300      	movs	r3, #0
 800637e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006386:	2b01      	cmp	r3, #1
 8006388:	d002      	beq.n	8006390 <CDC_ProcessTransmission+0x26>
 800638a:	2b02      	cmp	r3, #2
 800638c:	d023      	beq.n	80063d6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800638e:	e05e      	b.n	800644e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	8b12      	ldrh	r2, [r2, #24]
 8006398:	4293      	cmp	r3, r2
 800639a:	d90b      	bls.n	80063b4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	69d9      	ldr	r1, [r3, #28]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	8b1a      	ldrh	r2, [r3, #24]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	7b5b      	ldrb	r3, [r3, #13]
 80063a8:	2001      	movs	r0, #1
 80063aa:	9000      	str	r0, [sp, #0]
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f001 fc48 	bl	8007c42 <USBH_BulkSendData>
 80063b2:	e00b      	b.n	80063cc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80063bc:	b29a      	uxth	r2, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	7b5b      	ldrb	r3, [r3, #13]
 80063c2:	2001      	movs	r0, #1
 80063c4:	9000      	str	r0, [sp, #0]
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f001 fc3b 	bl	8007c42 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2202      	movs	r2, #2
 80063d0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80063d4:	e03b      	b.n	800644e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	7b5b      	ldrb	r3, [r3, #13]
 80063da:	4619      	mov	r1, r3
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f001 ff5f 	bl	80082a0 <USBH_LL_GetURBState>
 80063e2:	4603      	mov	r3, r0
 80063e4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80063e6:	7afb      	ldrb	r3, [r7, #11]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d128      	bne.n	800643e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	8b12      	ldrh	r2, [r2, #24]
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d90e      	bls.n	8006416 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	8b12      	ldrh	r2, [r2, #24]
 8006400:	1a9a      	subs	r2, r3, r2
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	69db      	ldr	r3, [r3, #28]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	8b12      	ldrh	r2, [r2, #24]
 800640e:	441a      	add	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	61da      	str	r2, [r3, #28]
 8006414:	e002      	b.n	800641c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006420:	2b00      	cmp	r3, #0
 8006422:	d004      	beq.n	800642e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800642c:	e00e      	b.n	800644c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f868 	bl	800650c <USBH_CDC_TransmitCallback>
      break;
 800643c:	e006      	b.n	800644c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800643e:	7afb      	ldrb	r3, [r7, #11]
 8006440:	2b02      	cmp	r3, #2
 8006442:	d103      	bne.n	800644c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800644c:	bf00      	nop
  }
}
 800644e:	bf00      	nop
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b086      	sub	sp, #24
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006464:	69db      	ldr	r3, [r3, #28]
 8006466:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006468:	2300      	movs	r3, #0
 800646a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006472:	2b03      	cmp	r3, #3
 8006474:	d002      	beq.n	800647c <CDC_ProcessReception+0x26>
 8006476:	2b04      	cmp	r3, #4
 8006478:	d00e      	beq.n	8006498 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800647a:	e043      	b.n	8006504 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	6a19      	ldr	r1, [r3, #32]
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	8b5a      	ldrh	r2, [r3, #26]
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	7b1b      	ldrb	r3, [r3, #12]
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f001 fbff 	bl	8007c8c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	2204      	movs	r2, #4
 8006492:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006496:	e035      	b.n	8006504 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	7b1b      	ldrb	r3, [r3, #12]
 800649c:	4619      	mov	r1, r3
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f001 fefe 	bl	80082a0 <USBH_LL_GetURBState>
 80064a4:	4603      	mov	r3, r0
 80064a6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80064a8:	7cfb      	ldrb	r3, [r7, #19]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d129      	bne.n	8006502 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	7b1b      	ldrb	r3, [r3, #12]
 80064b2:	4619      	mov	r1, r3
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f001 fe61 	bl	800817c <USBH_LL_GetLastXferSize>
 80064ba:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d016      	beq.n	80064f4 <CDC_ProcessReception+0x9e>
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	8b5b      	ldrh	r3, [r3, #26]
 80064ca:	461a      	mov	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d910      	bls.n	80064f4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	1ad2      	subs	r2, r2, r3
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	6a1a      	ldr	r2, [r3, #32]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	441a      	add	r2, r3
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	2203      	movs	r2, #3
 80064ee:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80064f2:	e006      	b.n	8006502 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 f80f 	bl	8006520 <USBH_CDC_ReceiveCallback>
      break;
 8006502:	bf00      	nop
  }
}
 8006504:	bf00      	nop
 8006506:	3718      	adds	r7, #24
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	4613      	mov	r3, r2
 8006554:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d101      	bne.n	8006560 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800655c:	2302      	movs	r3, #2
 800655e:	e029      	b.n	80065b4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	79fa      	ldrb	r2, [r7, #7]
 8006564:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f000 f81f 	bl	80065bc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d003      	beq.n	80065ac <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f001 fd31 	bl	8008014 <USBH_LL_Init>

  return USBH_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80065c8:	2300      	movs	r3, #0
 80065ca:	60fb      	str	r3, [r7, #12]
 80065cc:	e009      	b.n	80065e2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	33e0      	adds	r3, #224	; 0xe0
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4413      	add	r3, r2
 80065d8:	2200      	movs	r2, #0
 80065da:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	3301      	adds	r3, #1
 80065e0:	60fb      	str	r3, [r7, #12]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2b0f      	cmp	r3, #15
 80065e6:	d9f2      	bls.n	80065ce <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80065e8:	2300      	movs	r3, #0
 80065ea:	60fb      	str	r3, [r7, #12]
 80065ec:	e009      	b.n	8006602 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80065f8:	2200      	movs	r2, #0
 80065fa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	3301      	adds	r3, #1
 8006600:	60fb      	str	r3, [r7, #12]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006608:	d3f1      	bcc.n	80065ee <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2240      	movs	r2, #64	; 0x40
 800662e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800666e:	2300      	movs	r3, #0
 8006670:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d016      	beq.n	80066a6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10e      	bne.n	80066a0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006688:	1c59      	adds	r1, r3, #1
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	33de      	adds	r3, #222	; 0xde
 8006694:	6839      	ldr	r1, [r7, #0]
 8006696:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800669a:	2300      	movs	r3, #0
 800669c:	73fb      	strb	r3, [r7, #15]
 800669e:	e004      	b.n	80066aa <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80066a0:	2302      	movs	r3, #2
 80066a2:	73fb      	strb	r3, [r7, #15]
 80066a4:	e001      	b.n	80066aa <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80066a6:	2302      	movs	r3, #2
 80066a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80066aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	460b      	mov	r3, r1
 80066c2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80066c4:	2300      	movs	r3, #0
 80066c6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80066ce:	78fa      	ldrb	r2, [r7, #3]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d204      	bcs.n	80066de <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	78fa      	ldrb	r2, [r7, #3]
 80066d8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80066dc:	e001      	b.n	80066e2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80066de:	2302      	movs	r3, #2
 80066e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80066e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3714      	adds	r7, #20
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	4608      	mov	r0, r1
 80066fa:	4611      	mov	r1, r2
 80066fc:	461a      	mov	r2, r3
 80066fe:	4603      	mov	r3, r0
 8006700:	70fb      	strb	r3, [r7, #3]
 8006702:	460b      	mov	r3, r1
 8006704:	70bb      	strb	r3, [r7, #2]
 8006706:	4613      	mov	r3, r2
 8006708:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800670a:	2300      	movs	r3, #0
 800670c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800670e:	2300      	movs	r3, #0
 8006710:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006718:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800671a:	e025      	b.n	8006768 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800671c:	7dfb      	ldrb	r3, [r7, #23]
 800671e:	221a      	movs	r2, #26
 8006720:	fb02 f303 	mul.w	r3, r2, r3
 8006724:	3308      	adds	r3, #8
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	4413      	add	r3, r2
 800672a:	3302      	adds	r3, #2
 800672c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	795b      	ldrb	r3, [r3, #5]
 8006732:	78fa      	ldrb	r2, [r7, #3]
 8006734:	429a      	cmp	r2, r3
 8006736:	d002      	beq.n	800673e <USBH_FindInterface+0x4e>
 8006738:	78fb      	ldrb	r3, [r7, #3]
 800673a:	2bff      	cmp	r3, #255	; 0xff
 800673c:	d111      	bne.n	8006762 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006742:	78ba      	ldrb	r2, [r7, #2]
 8006744:	429a      	cmp	r2, r3
 8006746:	d002      	beq.n	800674e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006748:	78bb      	ldrb	r3, [r7, #2]
 800674a:	2bff      	cmp	r3, #255	; 0xff
 800674c:	d109      	bne.n	8006762 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006752:	787a      	ldrb	r2, [r7, #1]
 8006754:	429a      	cmp	r2, r3
 8006756:	d002      	beq.n	800675e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006758:	787b      	ldrb	r3, [r7, #1]
 800675a:	2bff      	cmp	r3, #255	; 0xff
 800675c:	d101      	bne.n	8006762 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800675e:	7dfb      	ldrb	r3, [r7, #23]
 8006760:	e006      	b.n	8006770 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006762:	7dfb      	ldrb	r3, [r7, #23]
 8006764:	3301      	adds	r3, #1
 8006766:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006768:	7dfb      	ldrb	r3, [r7, #23]
 800676a:	2b01      	cmp	r3, #1
 800676c:	d9d6      	bls.n	800671c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800676e:	23ff      	movs	r3, #255	; 0xff
}
 8006770:	4618      	mov	r0, r3
 8006772:	371c      	adds	r7, #28
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f001 fc81 	bl	800808c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800678a:	2101      	movs	r1, #1
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f001 fd9a 	bl	80082c6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b088      	sub	sp, #32
 80067a0:	af04      	add	r7, sp, #16
 80067a2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80067a4:	2302      	movs	r3, #2
 80067a6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80067a8:	2300      	movs	r3, #0
 80067aa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d102      	bne.n	80067be <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2203      	movs	r2, #3
 80067bc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	2b0b      	cmp	r3, #11
 80067c6:	f200 81be 	bhi.w	8006b46 <USBH_Process+0x3aa>
 80067ca:	a201      	add	r2, pc, #4	; (adr r2, 80067d0 <USBH_Process+0x34>)
 80067cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d0:	08006801 	.word	0x08006801
 80067d4:	08006833 	.word	0x08006833
 80067d8:	0800689b 	.word	0x0800689b
 80067dc:	08006ae1 	.word	0x08006ae1
 80067e0:	08006b47 	.word	0x08006b47
 80067e4:	0800693f 	.word	0x0800693f
 80067e8:	08006a87 	.word	0x08006a87
 80067ec:	08006975 	.word	0x08006975
 80067f0:	08006995 	.word	0x08006995
 80067f4:	080069b5 	.word	0x080069b5
 80067f8:	080069f9 	.word	0x080069f9
 80067fc:	08006ac9 	.word	0x08006ac9
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006806:	b2db      	uxtb	r3, r3
 8006808:	2b00      	cmp	r3, #0
 800680a:	f000 819e 	beq.w	8006b4a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006814:	20c8      	movs	r0, #200	; 0xc8
 8006816:	f001 fd9d 	bl	8008354 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f001 fc93 	bl	8008146 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006830:	e18b      	b.n	8006b4a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006838:	2b01      	cmp	r3, #1
 800683a:	d107      	bne.n	800684c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2202      	movs	r2, #2
 8006848:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800684a:	e18d      	b.n	8006b68 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006852:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006856:	d914      	bls.n	8006882 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800685e:	3301      	adds	r3, #1
 8006860:	b2da      	uxtb	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800686e:	2b03      	cmp	r3, #3
 8006870:	d903      	bls.n	800687a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	220d      	movs	r2, #13
 8006876:	701a      	strb	r2, [r3, #0]
      break;
 8006878:	e176      	b.n	8006b68 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	701a      	strb	r2, [r3, #0]
      break;
 8006880:	e172      	b.n	8006b68 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006888:	f103 020a 	add.w	r2, r3, #10
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006892:	200a      	movs	r0, #10
 8006894:	f001 fd5e 	bl	8008354 <USBH_Delay>
      break;
 8006898:	e166      	b.n	8006b68 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d005      	beq.n	80068b0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068aa:	2104      	movs	r1, #4
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80068b0:	2064      	movs	r0, #100	; 0x64
 80068b2:	f001 fd4f 	bl	8008354 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f001 fc1e 	bl	80080f8 <USBH_LL_GetSpeed>
 80068bc:	4603      	mov	r3, r0
 80068be:	461a      	mov	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2205      	movs	r2, #5
 80068ca:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80068cc:	2100      	movs	r1, #0
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f001 fa29 	bl	8007d26 <USBH_AllocPipe>
 80068d4:	4603      	mov	r3, r0
 80068d6:	461a      	mov	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80068dc:	2180      	movs	r1, #128	; 0x80
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f001 fa21 	bl	8007d26 <USBH_AllocPipe>
 80068e4:	4603      	mov	r3, r0
 80068e6:	461a      	mov	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	7919      	ldrb	r1, [r3, #4]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006900:	b292      	uxth	r2, r2
 8006902:	9202      	str	r2, [sp, #8]
 8006904:	2200      	movs	r2, #0
 8006906:	9201      	str	r2, [sp, #4]
 8006908:	9300      	str	r3, [sp, #0]
 800690a:	4603      	mov	r3, r0
 800690c:	2280      	movs	r2, #128	; 0x80
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f001 f9da 	bl	8007cc8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	7959      	ldrb	r1, [r3, #5]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006928:	b292      	uxth	r2, r2
 800692a:	9202      	str	r2, [sp, #8]
 800692c:	2200      	movs	r2, #0
 800692e:	9201      	str	r2, [sp, #4]
 8006930:	9300      	str	r3, [sp, #0]
 8006932:	4603      	mov	r3, r0
 8006934:	2200      	movs	r2, #0
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f001 f9c6 	bl	8007cc8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800693c:	e114      	b.n	8006b68 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f918 	bl	8006b74 <USBH_HandleEnum>
 8006944:	4603      	mov	r3, r0
 8006946:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006948:	7bbb      	ldrb	r3, [r7, #14]
 800694a:	b2db      	uxtb	r3, r3
 800694c:	2b00      	cmp	r3, #0
 800694e:	f040 80fe 	bne.w	8006b4e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006960:	2b01      	cmp	r3, #1
 8006962:	d103      	bne.n	800696c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2208      	movs	r2, #8
 8006968:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800696a:	e0f0      	b.n	8006b4e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2207      	movs	r2, #7
 8006970:	701a      	strb	r2, [r3, #0]
      break;
 8006972:	e0ec      	b.n	8006b4e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800697a:	2b00      	cmp	r3, #0
 800697c:	f000 80e9 	beq.w	8006b52 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006986:	2101      	movs	r1, #1
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2208      	movs	r2, #8
 8006990:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006992:	e0de      	b.n	8006b52 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800699a:	b29b      	uxth	r3, r3
 800699c:	4619      	mov	r1, r3
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 fc2c 	bl	80071fc <USBH_SetCfg>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f040 80d5 	bne.w	8006b56 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2209      	movs	r2, #9
 80069b0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80069b2:	e0d0      	b.n	8006b56 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80069ba:	f003 0320 	and.w	r3, r3, #32
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d016      	beq.n	80069f0 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80069c2:	2101      	movs	r1, #1
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fc3c 	bl	8007242 <USBH_SetFeature>
 80069ca:	4603      	mov	r3, r0
 80069cc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80069ce:	7bbb      	ldrb	r3, [r7, #14]
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d103      	bne.n	80069de <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	220a      	movs	r2, #10
 80069da:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80069dc:	e0bd      	b.n	8006b5a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80069de:	7bbb      	ldrb	r3, [r7, #14]
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b03      	cmp	r3, #3
 80069e4:	f040 80b9 	bne.w	8006b5a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	220a      	movs	r2, #10
 80069ec:	701a      	strb	r2, [r3, #0]
      break;
 80069ee:	e0b4      	b.n	8006b5a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	220a      	movs	r2, #10
 80069f4:	701a      	strb	r2, [r3, #0]
      break;
 80069f6:	e0b0      	b.n	8006b5a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 80ad 	beq.w	8006b5e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	73fb      	strb	r3, [r7, #15]
 8006a10:	e016      	b.n	8006a40 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006a12:	7bfa      	ldrb	r2, [r7, #15]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	32de      	adds	r2, #222	; 0xde
 8006a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a1c:	791a      	ldrb	r2, [r3, #4]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d108      	bne.n	8006a3a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006a28:	7bfa      	ldrb	r2, [r7, #15]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	32de      	adds	r2, #222	; 0xde
 8006a2e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006a38:	e005      	b.n	8006a46 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006a3a:	7bfb      	ldrb	r3, [r7, #15]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	73fb      	strb	r3, [r7, #15]
 8006a40:	7bfb      	ldrb	r3, [r7, #15]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d0e5      	beq.n	8006a12 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d016      	beq.n	8006a7e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	4798      	blx	r3
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d109      	bne.n	8006a76 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2206      	movs	r2, #6
 8006a66:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a6e:	2103      	movs	r1, #3
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a74:	e073      	b.n	8006b5e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	220d      	movs	r2, #13
 8006a7a:	701a      	strb	r2, [r3, #0]
      break;
 8006a7c:	e06f      	b.n	8006b5e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	220d      	movs	r2, #13
 8006a82:	701a      	strb	r2, [r3, #0]
      break;
 8006a84:	e06b      	b.n	8006b5e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d017      	beq.n	8006ac0 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	4798      	blx	r3
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006aa0:	7bbb      	ldrb	r3, [r7, #14]
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d103      	bne.n	8006ab0 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	220b      	movs	r2, #11
 8006aac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006aae:	e058      	b.n	8006b62 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006ab0:	7bbb      	ldrb	r3, [r7, #14]
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d154      	bne.n	8006b62 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	220d      	movs	r2, #13
 8006abc:	701a      	strb	r2, [r3, #0]
      break;
 8006abe:	e050      	b.n	8006b62 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	220d      	movs	r2, #13
 8006ac4:	701a      	strb	r2, [r3, #0]
      break;
 8006ac6:	e04c      	b.n	8006b62 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d049      	beq.n	8006b66 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	4798      	blx	r3
      }
      break;
 8006ade:	e042      	b.n	8006b66 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f7ff fd67 	bl	80065bc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d009      	beq.n	8006b0c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d005      	beq.n	8006b22 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b1c:	2105      	movs	r1, #5
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d107      	bne.n	8006b3e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f7ff fe20 	bl	800677c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006b3c:	e014      	b.n	8006b68 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f001 faa4 	bl	800808c <USBH_LL_Start>
      break;
 8006b44:	e010      	b.n	8006b68 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006b46:	bf00      	nop
 8006b48:	e00e      	b.n	8006b68 <USBH_Process+0x3cc>
      break;
 8006b4a:	bf00      	nop
 8006b4c:	e00c      	b.n	8006b68 <USBH_Process+0x3cc>
      break;
 8006b4e:	bf00      	nop
 8006b50:	e00a      	b.n	8006b68 <USBH_Process+0x3cc>
    break;
 8006b52:	bf00      	nop
 8006b54:	e008      	b.n	8006b68 <USBH_Process+0x3cc>
      break;
 8006b56:	bf00      	nop
 8006b58:	e006      	b.n	8006b68 <USBH_Process+0x3cc>
      break;
 8006b5a:	bf00      	nop
 8006b5c:	e004      	b.n	8006b68 <USBH_Process+0x3cc>
      break;
 8006b5e:	bf00      	nop
 8006b60:	e002      	b.n	8006b68 <USBH_Process+0x3cc>
      break;
 8006b62:	bf00      	nop
 8006b64:	e000      	b.n	8006b68 <USBH_Process+0x3cc>
      break;
 8006b66:	bf00      	nop
  }
  return USBH_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop

08006b74 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b088      	sub	sp, #32
 8006b78:	af04      	add	r7, sp, #16
 8006b7a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006b80:	2301      	movs	r3, #1
 8006b82:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	785b      	ldrb	r3, [r3, #1]
 8006b88:	2b07      	cmp	r3, #7
 8006b8a:	f200 81c1 	bhi.w	8006f10 <USBH_HandleEnum+0x39c>
 8006b8e:	a201      	add	r2, pc, #4	; (adr r2, 8006b94 <USBH_HandleEnum+0x20>)
 8006b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b94:	08006bb5 	.word	0x08006bb5
 8006b98:	08006c73 	.word	0x08006c73
 8006b9c:	08006cdd 	.word	0x08006cdd
 8006ba0:	08006d6b 	.word	0x08006d6b
 8006ba4:	08006dd5 	.word	0x08006dd5
 8006ba8:	08006e45 	.word	0x08006e45
 8006bac:	08006e8b 	.word	0x08006e8b
 8006bb0:	08006ed1 	.word	0x08006ed1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006bb4:	2108      	movs	r1, #8
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 fa50 	bl	800705c <USBH_Get_DevDesc>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006bc0:	7bbb      	ldrb	r3, [r7, #14]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d130      	bne.n	8006c28 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	7919      	ldrb	r1, [r3, #4]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006bea:	b292      	uxth	r2, r2
 8006bec:	9202      	str	r2, [sp, #8]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	9201      	str	r2, [sp, #4]
 8006bf2:	9300      	str	r3, [sp, #0]
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2280      	movs	r2, #128	; 0x80
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f001 f865 	bl	8007cc8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	7959      	ldrb	r1, [r3, #5]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006c12:	b292      	uxth	r2, r2
 8006c14:	9202      	str	r2, [sp, #8]
 8006c16:	2200      	movs	r2, #0
 8006c18:	9201      	str	r2, [sp, #4]
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2200      	movs	r2, #0
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f001 f851 	bl	8007cc8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006c26:	e175      	b.n	8006f14 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c28:	7bbb      	ldrb	r3, [r7, #14]
 8006c2a:	2b03      	cmp	r3, #3
 8006c2c:	f040 8172 	bne.w	8006f14 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c36:	3301      	adds	r3, #1
 8006c38:	b2da      	uxtb	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c46:	2b03      	cmp	r3, #3
 8006c48:	d903      	bls.n	8006c52 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	220d      	movs	r2, #13
 8006c4e:	701a      	strb	r2, [r3, #0]
      break;
 8006c50:	e160      	b.n	8006f14 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	795b      	ldrb	r3, [r3, #5]
 8006c56:	4619      	mov	r1, r3
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f001 f885 	bl	8007d68 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	791b      	ldrb	r3, [r3, #4]
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f001 f87f 	bl	8007d68 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	701a      	strb	r2, [r3, #0]
      break;
 8006c70:	e150      	b.n	8006f14 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006c72:	2112      	movs	r1, #18
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f9f1 	bl	800705c <USBH_Get_DevDesc>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c7e:	7bbb      	ldrb	r3, [r7, #14]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d103      	bne.n	8006c8c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2202      	movs	r2, #2
 8006c88:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006c8a:	e145      	b.n	8006f18 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c8c:	7bbb      	ldrb	r3, [r7, #14]
 8006c8e:	2b03      	cmp	r3, #3
 8006c90:	f040 8142 	bne.w	8006f18 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006caa:	2b03      	cmp	r3, #3
 8006cac:	d903      	bls.n	8006cb6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	220d      	movs	r2, #13
 8006cb2:	701a      	strb	r2, [r3, #0]
      break;
 8006cb4:	e130      	b.n	8006f18 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	795b      	ldrb	r3, [r3, #5]
 8006cba:	4619      	mov	r1, r3
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f001 f853 	bl	8007d68 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	791b      	ldrb	r3, [r3, #4]
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f001 f84d 	bl	8007d68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	701a      	strb	r2, [r3, #0]
      break;
 8006cda:	e11d      	b.n	8006f18 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006cdc:	2101      	movs	r1, #1
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 fa68 	bl	80071b4 <USBH_SetAddress>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006ce8:	7bbb      	ldrb	r3, [r7, #14]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d132      	bne.n	8006d54 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006cee:	2002      	movs	r0, #2
 8006cf0:	f001 fb30 	bl	8008354 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2203      	movs	r2, #3
 8006d00:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	7919      	ldrb	r1, [r3, #4]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006d16:	b292      	uxth	r2, r2
 8006d18:	9202      	str	r2, [sp, #8]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	9201      	str	r2, [sp, #4]
 8006d1e:	9300      	str	r3, [sp, #0]
 8006d20:	4603      	mov	r3, r0
 8006d22:	2280      	movs	r2, #128	; 0x80
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 ffcf 	bl	8007cc8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	7959      	ldrb	r1, [r3, #5]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006d3e:	b292      	uxth	r2, r2
 8006d40:	9202      	str	r2, [sp, #8]
 8006d42:	2200      	movs	r2, #0
 8006d44:	9201      	str	r2, [sp, #4]
 8006d46:	9300      	str	r3, [sp, #0]
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 ffbb 	bl	8007cc8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006d52:	e0e3      	b.n	8006f1c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d54:	7bbb      	ldrb	r3, [r7, #14]
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	f040 80e0 	bne.w	8006f1c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	220d      	movs	r2, #13
 8006d60:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	705a      	strb	r2, [r3, #1]
      break;
 8006d68:	e0d8      	b.n	8006f1c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006d6a:	2109      	movs	r1, #9
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f99d 	bl	80070ac <USBH_Get_CfgDesc>
 8006d72:	4603      	mov	r3, r0
 8006d74:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d76:	7bbb      	ldrb	r3, [r7, #14]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d103      	bne.n	8006d84 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2204      	movs	r2, #4
 8006d80:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006d82:	e0cd      	b.n	8006f20 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d84:	7bbb      	ldrb	r3, [r7, #14]
 8006d86:	2b03      	cmp	r3, #3
 8006d88:	f040 80ca 	bne.w	8006f20 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d92:	3301      	adds	r3, #1
 8006d94:	b2da      	uxtb	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006da2:	2b03      	cmp	r3, #3
 8006da4:	d903      	bls.n	8006dae <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	220d      	movs	r2, #13
 8006daa:	701a      	strb	r2, [r3, #0]
      break;
 8006dac:	e0b8      	b.n	8006f20 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	795b      	ldrb	r3, [r3, #5]
 8006db2:	4619      	mov	r1, r3
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 ffd7 	bl	8007d68 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	791b      	ldrb	r3, [r3, #4]
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 ffd1 	bl	8007d68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	701a      	strb	r2, [r3, #0]
      break;
 8006dd2:	e0a5      	b.n	8006f20 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006dda:	4619      	mov	r1, r3
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 f965 	bl	80070ac <USBH_Get_CfgDesc>
 8006de2:	4603      	mov	r3, r0
 8006de4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006de6:	7bbb      	ldrb	r3, [r7, #14]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d103      	bne.n	8006df4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2205      	movs	r2, #5
 8006df0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006df2:	e097      	b.n	8006f24 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006df4:	7bbb      	ldrb	r3, [r7, #14]
 8006df6:	2b03      	cmp	r3, #3
 8006df8:	f040 8094 	bne.w	8006f24 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e02:	3301      	adds	r3, #1
 8006e04:	b2da      	uxtb	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e12:	2b03      	cmp	r3, #3
 8006e14:	d903      	bls.n	8006e1e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	220d      	movs	r2, #13
 8006e1a:	701a      	strb	r2, [r3, #0]
      break;
 8006e1c:	e082      	b.n	8006f24 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	795b      	ldrb	r3, [r3, #5]
 8006e22:	4619      	mov	r1, r3
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 ff9f 	bl	8007d68 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	791b      	ldrb	r3, [r3, #4]
 8006e2e:	4619      	mov	r1, r3
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 ff99 	bl	8007d68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	701a      	strb	r2, [r3, #0]
      break;
 8006e42:	e06f      	b.n	8006f24 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d019      	beq.n	8006e82 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006e5a:	23ff      	movs	r3, #255	; 0xff
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 f949 	bl	80070f4 <USBH_Get_StringDesc>
 8006e62:	4603      	mov	r3, r0
 8006e64:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006e66:	7bbb      	ldrb	r3, [r7, #14]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d103      	bne.n	8006e74 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2206      	movs	r2, #6
 8006e70:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006e72:	e059      	b.n	8006f28 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e74:	7bbb      	ldrb	r3, [r7, #14]
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d156      	bne.n	8006f28 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2206      	movs	r2, #6
 8006e7e:	705a      	strb	r2, [r3, #1]
      break;
 8006e80:	e052      	b.n	8006f28 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2206      	movs	r2, #6
 8006e86:	705a      	strb	r2, [r3, #1]
      break;
 8006e88:	e04e      	b.n	8006f28 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d019      	beq.n	8006ec8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006ea0:	23ff      	movs	r3, #255	; 0xff
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f926 	bl	80070f4 <USBH_Get_StringDesc>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006eac:	7bbb      	ldrb	r3, [r7, #14]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d103      	bne.n	8006eba <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2207      	movs	r2, #7
 8006eb6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006eb8:	e038      	b.n	8006f2c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006eba:	7bbb      	ldrb	r3, [r7, #14]
 8006ebc:	2b03      	cmp	r3, #3
 8006ebe:	d135      	bne.n	8006f2c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2207      	movs	r2, #7
 8006ec4:	705a      	strb	r2, [r3, #1]
      break;
 8006ec6:	e031      	b.n	8006f2c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2207      	movs	r2, #7
 8006ecc:	705a      	strb	r2, [r3, #1]
      break;
 8006ece:	e02d      	b.n	8006f2c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d017      	beq.n	8006f0a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006ee6:	23ff      	movs	r3, #255	; 0xff
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 f903 	bl	80070f4 <USBH_Get_StringDesc>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006ef2:	7bbb      	ldrb	r3, [r7, #14]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d102      	bne.n	8006efe <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006efc:	e018      	b.n	8006f30 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006efe:	7bbb      	ldrb	r3, [r7, #14]
 8006f00:	2b03      	cmp	r3, #3
 8006f02:	d115      	bne.n	8006f30 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006f04:	2300      	movs	r3, #0
 8006f06:	73fb      	strb	r3, [r7, #15]
      break;
 8006f08:	e012      	b.n	8006f30 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	73fb      	strb	r3, [r7, #15]
      break;
 8006f0e:	e00f      	b.n	8006f30 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006f10:	bf00      	nop
 8006f12:	e00e      	b.n	8006f32 <USBH_HandleEnum+0x3be>
      break;
 8006f14:	bf00      	nop
 8006f16:	e00c      	b.n	8006f32 <USBH_HandleEnum+0x3be>
      break;
 8006f18:	bf00      	nop
 8006f1a:	e00a      	b.n	8006f32 <USBH_HandleEnum+0x3be>
      break;
 8006f1c:	bf00      	nop
 8006f1e:	e008      	b.n	8006f32 <USBH_HandleEnum+0x3be>
      break;
 8006f20:	bf00      	nop
 8006f22:	e006      	b.n	8006f32 <USBH_HandleEnum+0x3be>
      break;
 8006f24:	bf00      	nop
 8006f26:	e004      	b.n	8006f32 <USBH_HandleEnum+0x3be>
      break;
 8006f28:	bf00      	nop
 8006f2a:	e002      	b.n	8006f32 <USBH_HandleEnum+0x3be>
      break;
 8006f2c:	bf00      	nop
 8006f2e:	e000      	b.n	8006f32 <USBH_HandleEnum+0x3be>
      break;
 8006f30:	bf00      	nop
  }
  return Status;
 8006f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006f4e:	bf00      	nop
 8006f50:	370c      	adds	r7, #12
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b082      	sub	sp, #8
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f68:	1c5a      	adds	r2, r3, #1
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 f804 	bl	8006f7e <USBH_HandleSof>
}
 8006f76:	bf00      	nop
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b082      	sub	sp, #8
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b0b      	cmp	r3, #11
 8006f8e:	d10a      	bne.n	8006fa6 <USBH_HandleSof+0x28>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d005      	beq.n	8006fa6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	4798      	blx	r3
  }
}
 8006fa6:	bf00      	nop
 8006fa8:	3708      	adds	r7, #8
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b083      	sub	sp, #12
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006fbe:	bf00      	nop
}
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr

08006fca <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b083      	sub	sp, #12
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006fda:	bf00      	nop
}
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b083      	sub	sp, #12
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f001 f844 	bl	80080c2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	791b      	ldrb	r3, [r3, #4]
 800703e:	4619      	mov	r1, r3
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fe91 	bl	8007d68 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	795b      	ldrb	r3, [r3, #5]
 800704a:	4619      	mov	r1, r3
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fe8b 	bl	8007d68 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b086      	sub	sp, #24
 8007060:	af02      	add	r7, sp, #8
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	460b      	mov	r3, r1
 8007066:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800706e:	78fb      	ldrb	r3, [r7, #3]
 8007070:	b29b      	uxth	r3, r3
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	4613      	mov	r3, r2
 8007076:	f44f 7280 	mov.w	r2, #256	; 0x100
 800707a:	2100      	movs	r1, #0
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 f864 	bl	800714a <USBH_GetDescriptor>
 8007082:	4603      	mov	r3, r0
 8007084:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007086:	7bfb      	ldrb	r3, [r7, #15]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10a      	bne.n	80070a2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007098:	78fa      	ldrb	r2, [r7, #3]
 800709a:	b292      	uxth	r2, r2
 800709c:	4619      	mov	r1, r3
 800709e:	f000 f918 	bl	80072d2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80070a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b086      	sub	sp, #24
 80070b0:	af02      	add	r7, sp, #8
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	460b      	mov	r3, r1
 80070b6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	331c      	adds	r3, #28
 80070bc:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80070be:	887b      	ldrh	r3, [r7, #2]
 80070c0:	9300      	str	r3, [sp, #0]
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070c8:	2100      	movs	r1, #0
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 f83d 	bl	800714a <USBH_GetDescriptor>
 80070d0:	4603      	mov	r3, r0
 80070d2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80070d4:	7bfb      	ldrb	r3, [r7, #15]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d107      	bne.n	80070ea <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80070da:	887b      	ldrh	r3, [r7, #2]
 80070dc:	461a      	mov	r2, r3
 80070de:	68b9      	ldr	r1, [r7, #8]
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 f987 	bl	80073f4 <USBH_ParseCfgDesc>
 80070e6:	4603      	mov	r3, r0
 80070e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80070ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b088      	sub	sp, #32
 80070f8:	af02      	add	r7, sp, #8
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	607a      	str	r2, [r7, #4]
 80070fe:	461a      	mov	r2, r3
 8007100:	460b      	mov	r3, r1
 8007102:	72fb      	strb	r3, [r7, #11]
 8007104:	4613      	mov	r3, r2
 8007106:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007108:	7afb      	ldrb	r3, [r7, #11]
 800710a:	b29b      	uxth	r3, r3
 800710c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007110:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007118:	893b      	ldrh	r3, [r7, #8]
 800711a:	9300      	str	r3, [sp, #0]
 800711c:	460b      	mov	r3, r1
 800711e:	2100      	movs	r1, #0
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f000 f812 	bl	800714a <USBH_GetDescriptor>
 8007126:	4603      	mov	r3, r0
 8007128:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800712a:	7dfb      	ldrb	r3, [r7, #23]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d107      	bne.n	8007140 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007136:	893a      	ldrh	r2, [r7, #8]
 8007138:	6879      	ldr	r1, [r7, #4]
 800713a:	4618      	mov	r0, r3
 800713c:	f000 fb24 	bl	8007788 <USBH_ParseStringDesc>
  }

  return status;
 8007140:	7dfb      	ldrb	r3, [r7, #23]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3718      	adds	r7, #24
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b084      	sub	sp, #16
 800714e:	af00      	add	r7, sp, #0
 8007150:	60f8      	str	r0, [r7, #12]
 8007152:	607b      	str	r3, [r7, #4]
 8007154:	460b      	mov	r3, r1
 8007156:	72fb      	strb	r3, [r7, #11]
 8007158:	4613      	mov	r3, r2
 800715a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	789b      	ldrb	r3, [r3, #2]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d11c      	bne.n	800719e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007164:	7afb      	ldrb	r3, [r7, #11]
 8007166:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800716a:	b2da      	uxtb	r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2206      	movs	r2, #6
 8007174:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	893a      	ldrh	r2, [r7, #8]
 800717a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800717c:	893b      	ldrh	r3, [r7, #8]
 800717e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007182:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007186:	d104      	bne.n	8007192 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f240 4209 	movw	r2, #1033	; 0x409
 800718e:	829a      	strh	r2, [r3, #20]
 8007190:	e002      	b.n	8007198 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	8b3a      	ldrh	r2, [r7, #24]
 800719c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800719e:	8b3b      	ldrh	r3, [r7, #24]
 80071a0:	461a      	mov	r2, r3
 80071a2:	6879      	ldr	r1, [r7, #4]
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f000 fb3d 	bl	8007824 <USBH_CtlReq>
 80071aa:	4603      	mov	r3, r0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3710      	adds	r7, #16
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	460b      	mov	r3, r1
 80071be:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	789b      	ldrb	r3, [r3, #2]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d10f      	bne.n	80071e8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2205      	movs	r2, #5
 80071d2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80071d4:	78fb      	ldrb	r3, [r7, #3]
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80071e8:	2200      	movs	r2, #0
 80071ea:	2100      	movs	r1, #0
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fb19 	bl	8007824 <USBH_CtlReq>
 80071f2:	4603      	mov	r3, r0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3708      	adds	r7, #8
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	460b      	mov	r3, r1
 8007206:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	789b      	ldrb	r3, [r3, #2]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d10e      	bne.n	800722e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2209      	movs	r2, #9
 800721a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	887a      	ldrh	r2, [r7, #2]
 8007220:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800722e:	2200      	movs	r2, #0
 8007230:	2100      	movs	r1, #0
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 faf6 	bl	8007824 <USBH_CtlReq>
 8007238:	4603      	mov	r3, r0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b082      	sub	sp, #8
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
 800724a:	460b      	mov	r3, r1
 800724c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	789b      	ldrb	r3, [r3, #2]
 8007252:	2b01      	cmp	r3, #1
 8007254:	d10f      	bne.n	8007276 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2203      	movs	r2, #3
 8007260:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007262:	78fb      	ldrb	r3, [r7, #3]
 8007264:	b29a      	uxth	r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007276:	2200      	movs	r2, #0
 8007278:	2100      	movs	r1, #0
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 fad2 	bl	8007824 <USBH_CtlReq>
 8007280:	4603      	mov	r3, r0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b082      	sub	sp, #8
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	460b      	mov	r3, r1
 8007294:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	789b      	ldrb	r3, [r3, #2]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d10f      	bne.n	80072be <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2202      	movs	r2, #2
 80072a2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80072b0:	78fb      	ldrb	r3, [r7, #3]
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80072be:	2200      	movs	r2, #0
 80072c0:	2100      	movs	r1, #0
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 faae 	bl	8007824 <USBH_CtlReq>
 80072c8:	4603      	mov	r3, r0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3708      	adds	r7, #8
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80072d2:	b480      	push	{r7}
 80072d4:	b085      	sub	sp, #20
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	60f8      	str	r0, [r7, #12]
 80072da:	60b9      	str	r1, [r7, #8]
 80072dc:	4613      	mov	r3, r2
 80072de:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	781a      	ldrb	r2, [r3, #0]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	785a      	ldrb	r2, [r3, #1]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	3302      	adds	r3, #2
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	3303      	adds	r3, #3
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	b29b      	uxth	r3, r3
 8007300:	021b      	lsls	r3, r3, #8
 8007302:	b29b      	uxth	r3, r3
 8007304:	4313      	orrs	r3, r2
 8007306:	b29a      	uxth	r2, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	791a      	ldrb	r2, [r3, #4]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	795a      	ldrb	r2, [r3, #5]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	799a      	ldrb	r2, [r3, #6]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	79da      	ldrb	r2, [r3, #7]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	79db      	ldrb	r3, [r3, #7]
 8007330:	2b20      	cmp	r3, #32
 8007332:	dc11      	bgt.n	8007358 <USBH_ParseDevDesc+0x86>
 8007334:	2b08      	cmp	r3, #8
 8007336:	db16      	blt.n	8007366 <USBH_ParseDevDesc+0x94>
 8007338:	3b08      	subs	r3, #8
 800733a:	2201      	movs	r2, #1
 800733c:	fa02 f303 	lsl.w	r3, r2, r3
 8007340:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007348:	2b00      	cmp	r3, #0
 800734a:	bf14      	ite	ne
 800734c:	2301      	movne	r3, #1
 800734e:	2300      	moveq	r3, #0
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b00      	cmp	r3, #0
 8007354:	d102      	bne.n	800735c <USBH_ParseDevDesc+0x8a>
 8007356:	e006      	b.n	8007366 <USBH_ParseDevDesc+0x94>
 8007358:	2b40      	cmp	r3, #64	; 0x40
 800735a:	d104      	bne.n	8007366 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	79da      	ldrb	r2, [r3, #7]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	71da      	strb	r2, [r3, #7]
      break;
 8007364:	e003      	b.n	800736e <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2240      	movs	r2, #64	; 0x40
 800736a:	71da      	strb	r2, [r3, #7]
      break;
 800736c:	bf00      	nop
  }

  if (length > 8U)
 800736e:	88fb      	ldrh	r3, [r7, #6]
 8007370:	2b08      	cmp	r3, #8
 8007372:	d939      	bls.n	80073e8 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	3308      	adds	r3, #8
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	b29a      	uxth	r2, r3
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	3309      	adds	r3, #9
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	b29b      	uxth	r3, r3
 8007384:	021b      	lsls	r3, r3, #8
 8007386:	b29b      	uxth	r3, r3
 8007388:	4313      	orrs	r3, r2
 800738a:	b29a      	uxth	r2, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	330a      	adds	r3, #10
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	b29a      	uxth	r2, r3
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	330b      	adds	r3, #11
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	b29b      	uxth	r3, r3
 80073a0:	021b      	lsls	r3, r3, #8
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	4313      	orrs	r3, r2
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	330c      	adds	r3, #12
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	330d      	adds	r3, #13
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	021b      	lsls	r3, r3, #8
 80073be:	b29b      	uxth	r3, r3
 80073c0:	4313      	orrs	r3, r2
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	7b9a      	ldrb	r2, [r3, #14]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	7bda      	ldrb	r2, [r3, #15]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	7c1a      	ldrb	r2, [r3, #16]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	7c5a      	ldrb	r2, [r3, #17]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	745a      	strb	r2, [r3, #17]
  }
}
 80073e8:	bf00      	nop
 80073ea:	3714      	adds	r7, #20
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b08c      	sub	sp, #48	; 0x30
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	4613      	mov	r3, r2
 8007400:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007408:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800740a:	2300      	movs	r3, #0
 800740c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007414:	2300      	movs	r3, #0
 8007416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800741a:	2300      	movs	r3, #0
 800741c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	781a      	ldrb	r2, [r3, #0]
 8007428:	6a3b      	ldr	r3, [r7, #32]
 800742a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	785a      	ldrb	r2, [r3, #1]
 8007430:	6a3b      	ldr	r3, [r7, #32]
 8007432:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	3302      	adds	r3, #2
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	b29a      	uxth	r2, r3
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	3303      	adds	r3, #3
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	b29b      	uxth	r3, r3
 8007444:	021b      	lsls	r3, r3, #8
 8007446:	b29b      	uxth	r3, r3
 8007448:	4313      	orrs	r3, r2
 800744a:	b29b      	uxth	r3, r3
 800744c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007450:	bf28      	it	cs
 8007452:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007456:	b29a      	uxth	r2, r3
 8007458:	6a3b      	ldr	r3, [r7, #32]
 800745a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	791a      	ldrb	r2, [r3, #4]
 8007460:	6a3b      	ldr	r3, [r7, #32]
 8007462:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	795a      	ldrb	r2, [r3, #5]
 8007468:	6a3b      	ldr	r3, [r7, #32]
 800746a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	799a      	ldrb	r2, [r3, #6]
 8007470:	6a3b      	ldr	r3, [r7, #32]
 8007472:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	79da      	ldrb	r2, [r3, #7]
 8007478:	6a3b      	ldr	r3, [r7, #32]
 800747a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	7a1a      	ldrb	r2, [r3, #8]
 8007480:	6a3b      	ldr	r3, [r7, #32]
 8007482:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	2b09      	cmp	r3, #9
 800748a:	d002      	beq.n	8007492 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800748c:	6a3b      	ldr	r3, [r7, #32]
 800748e:	2209      	movs	r2, #9
 8007490:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007492:	88fb      	ldrh	r3, [r7, #6]
 8007494:	2b09      	cmp	r3, #9
 8007496:	f240 809d 	bls.w	80075d4 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800749a:	2309      	movs	r3, #9
 800749c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800749e:	2300      	movs	r3, #0
 80074a0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80074a2:	e081      	b.n	80075a8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80074a4:	f107 0316 	add.w	r3, r7, #22
 80074a8:	4619      	mov	r1, r3
 80074aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074ac:	f000 f99f 	bl	80077ee <USBH_GetNextDesc>
 80074b0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80074b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b4:	785b      	ldrb	r3, [r3, #1]
 80074b6:	2b04      	cmp	r3, #4
 80074b8:	d176      	bne.n	80075a8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80074ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	2b09      	cmp	r3, #9
 80074c0:	d002      	beq.n	80074c8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80074c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c4:	2209      	movs	r2, #9
 80074c6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80074c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074cc:	221a      	movs	r2, #26
 80074ce:	fb02 f303 	mul.w	r3, r2, r3
 80074d2:	3308      	adds	r3, #8
 80074d4:	6a3a      	ldr	r2, [r7, #32]
 80074d6:	4413      	add	r3, r2
 80074d8:	3302      	adds	r3, #2
 80074da:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80074dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074de:	69f8      	ldr	r0, [r7, #28]
 80074e0:	f000 f87e 	bl	80075e0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80074e4:	2300      	movs	r3, #0
 80074e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80074ea:	2300      	movs	r3, #0
 80074ec:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80074ee:	e043      	b.n	8007578 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80074f0:	f107 0316 	add.w	r3, r7, #22
 80074f4:	4619      	mov	r1, r3
 80074f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074f8:	f000 f979 	bl	80077ee <USBH_GetNextDesc>
 80074fc:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80074fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007500:	785b      	ldrb	r3, [r3, #1]
 8007502:	2b05      	cmp	r3, #5
 8007504:	d138      	bne.n	8007578 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	795b      	ldrb	r3, [r3, #5]
 800750a:	2b01      	cmp	r3, #1
 800750c:	d10f      	bne.n	800752e <USBH_ParseCfgDesc+0x13a>
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	799b      	ldrb	r3, [r3, #6]
 8007512:	2b02      	cmp	r3, #2
 8007514:	d10b      	bne.n	800752e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	79db      	ldrb	r3, [r3, #7]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10f      	bne.n	800753e <USBH_ParseCfgDesc+0x14a>
 800751e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	2b09      	cmp	r3, #9
 8007524:	d00b      	beq.n	800753e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007528:	2209      	movs	r2, #9
 800752a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800752c:	e007      	b.n	800753e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800752e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	2b07      	cmp	r3, #7
 8007534:	d004      	beq.n	8007540 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007538:	2207      	movs	r2, #7
 800753a:	701a      	strb	r2, [r3, #0]
 800753c:	e000      	b.n	8007540 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800753e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007544:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007548:	3201      	adds	r2, #1
 800754a:	00d2      	lsls	r2, r2, #3
 800754c:	211a      	movs	r1, #26
 800754e:	fb01 f303 	mul.w	r3, r1, r3
 8007552:	4413      	add	r3, r2
 8007554:	3308      	adds	r3, #8
 8007556:	6a3a      	ldr	r2, [r7, #32]
 8007558:	4413      	add	r3, r2
 800755a:	3304      	adds	r3, #4
 800755c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800755e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007560:	69b9      	ldr	r1, [r7, #24]
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f000 f86b 	bl	800763e <USBH_ParseEPDesc>
 8007568:	4603      	mov	r3, r0
 800756a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800756e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007572:	3301      	adds	r3, #1
 8007574:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	791b      	ldrb	r3, [r3, #4]
 800757c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007580:	429a      	cmp	r2, r3
 8007582:	d204      	bcs.n	800758e <USBH_ParseCfgDesc+0x19a>
 8007584:	6a3b      	ldr	r3, [r7, #32]
 8007586:	885a      	ldrh	r2, [r3, #2]
 8007588:	8afb      	ldrh	r3, [r7, #22]
 800758a:	429a      	cmp	r2, r3
 800758c:	d8b0      	bhi.n	80074f0 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	791b      	ldrb	r3, [r3, #4]
 8007592:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007596:	429a      	cmp	r2, r3
 8007598:	d201      	bcs.n	800759e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800759a:	2303      	movs	r3, #3
 800759c:	e01c      	b.n	80075d8 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800759e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075a2:	3301      	adds	r3, #1
 80075a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80075a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d805      	bhi.n	80075bc <USBH_ParseCfgDesc+0x1c8>
 80075b0:	6a3b      	ldr	r3, [r7, #32]
 80075b2:	885a      	ldrh	r2, [r3, #2]
 80075b4:	8afb      	ldrh	r3, [r7, #22]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	f63f af74 	bhi.w	80074a4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80075bc:	6a3b      	ldr	r3, [r7, #32]
 80075be:	791b      	ldrb	r3, [r3, #4]
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	bf28      	it	cs
 80075c4:	2302      	movcs	r3, #2
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d201      	bcs.n	80075d4 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80075d0:	2303      	movs	r3, #3
 80075d2:	e001      	b.n	80075d8 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80075d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3730      	adds	r7, #48	; 0x30
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	781a      	ldrb	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	785a      	ldrb	r2, [r3, #1]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	789a      	ldrb	r2, [r3, #2]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	78da      	ldrb	r2, [r3, #3]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	791a      	ldrb	r2, [r3, #4]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	795a      	ldrb	r2, [r3, #5]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	799a      	ldrb	r2, [r3, #6]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	79da      	ldrb	r2, [r3, #7]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	7a1a      	ldrb	r2, [r3, #8]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	721a      	strb	r2, [r3, #8]
}
 8007632:	bf00      	nop
 8007634:	370c      	adds	r7, #12
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800763e:	b480      	push	{r7}
 8007640:	b087      	sub	sp, #28
 8007642:	af00      	add	r7, sp, #0
 8007644:	60f8      	str	r0, [r7, #12]
 8007646:	60b9      	str	r1, [r7, #8]
 8007648:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800764a:	2300      	movs	r3, #0
 800764c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	781a      	ldrb	r2, [r3, #0]
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	785a      	ldrb	r2, [r3, #1]
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	789a      	ldrb	r2, [r3, #2]
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	78da      	ldrb	r2, [r3, #3]
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	3304      	adds	r3, #4
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	b29a      	uxth	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	3305      	adds	r3, #5
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	b29b      	uxth	r3, r3
 800767e:	021b      	lsls	r3, r3, #8
 8007680:	b29b      	uxth	r3, r3
 8007682:	4313      	orrs	r3, r2
 8007684:	b29a      	uxth	r2, r3
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	799a      	ldrb	r2, [r3, #6]
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	889b      	ldrh	r3, [r3, #4]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d102      	bne.n	80076a0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800769a:	2303      	movs	r3, #3
 800769c:	75fb      	strb	r3, [r7, #23]
 800769e:	e033      	b.n	8007708 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	889b      	ldrh	r3, [r3, #4]
 80076a4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80076a8:	f023 0307 	bic.w	r3, r3, #7
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	889b      	ldrh	r3, [r3, #4]
 80076b6:	b21a      	sxth	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	3304      	adds	r3, #4
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	b299      	uxth	r1, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	3305      	adds	r3, #5
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	021b      	lsls	r3, r3, #8
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	430b      	orrs	r3, r1
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d110      	bne.n	80076fa <USBH_ParseEPDesc+0xbc>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	3304      	adds	r3, #4
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	b299      	uxth	r1, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	3305      	adds	r3, #5
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	021b      	lsls	r3, r3, #8
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	430b      	orrs	r3, r1
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	b21b      	sxth	r3, r3
 80076f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80076f6:	b21b      	sxth	r3, r3
 80076f8:	e001      	b.n	80076fe <USBH_ParseEPDesc+0xc0>
 80076fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076fe:	4313      	orrs	r3, r2
 8007700:	b21b      	sxth	r3, r3
 8007702:	b29a      	uxth	r2, r3
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800770e:	2b00      	cmp	r3, #0
 8007710:	d116      	bne.n	8007740 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	78db      	ldrb	r3, [r3, #3]
 8007716:	f003 0303 	and.w	r3, r3, #3
 800771a:	2b01      	cmp	r3, #1
 800771c:	d005      	beq.n	800772a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	78db      	ldrb	r3, [r3, #3]
 8007722:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007726:	2b03      	cmp	r3, #3
 8007728:	d127      	bne.n	800777a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	799b      	ldrb	r3, [r3, #6]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d003      	beq.n	800773a <USBH_ParseEPDesc+0xfc>
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	799b      	ldrb	r3, [r3, #6]
 8007736:	2b10      	cmp	r3, #16
 8007738:	d91f      	bls.n	800777a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800773a:	2303      	movs	r3, #3
 800773c:	75fb      	strb	r3, [r7, #23]
 800773e:	e01c      	b.n	800777a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	78db      	ldrb	r3, [r3, #3]
 8007744:	f003 0303 	and.w	r3, r3, #3
 8007748:	2b01      	cmp	r3, #1
 800774a:	d10a      	bne.n	8007762 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	799b      	ldrb	r3, [r3, #6]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d003      	beq.n	800775c <USBH_ParseEPDesc+0x11e>
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	799b      	ldrb	r3, [r3, #6]
 8007758:	2b10      	cmp	r3, #16
 800775a:	d90e      	bls.n	800777a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800775c:	2303      	movs	r3, #3
 800775e:	75fb      	strb	r3, [r7, #23]
 8007760:	e00b      	b.n	800777a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	78db      	ldrb	r3, [r3, #3]
 8007766:	f003 0303 	and.w	r3, r3, #3
 800776a:	2b03      	cmp	r3, #3
 800776c:	d105      	bne.n	800777a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	799b      	ldrb	r3, [r3, #6]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d101      	bne.n	800777a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007776:	2303      	movs	r3, #3
 8007778:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800777a:	7dfb      	ldrb	r3, [r7, #23]
}
 800777c:	4618      	mov	r0, r3
 800777e:	371c      	adds	r7, #28
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007788:	b480      	push	{r7}
 800778a:	b087      	sub	sp, #28
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	4613      	mov	r3, r2
 8007794:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	3301      	adds	r3, #1
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	2b03      	cmp	r3, #3
 800779e:	d120      	bne.n	80077e2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	1e9a      	subs	r2, r3, #2
 80077a6:	88fb      	ldrh	r3, [r7, #6]
 80077a8:	4293      	cmp	r3, r2
 80077aa:	bf28      	it	cs
 80077ac:	4613      	movcs	r3, r2
 80077ae:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	3302      	adds	r3, #2
 80077b4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80077b6:	2300      	movs	r3, #0
 80077b8:	82fb      	strh	r3, [r7, #22]
 80077ba:	e00b      	b.n	80077d4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80077bc:	8afb      	ldrh	r3, [r7, #22]
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	4413      	add	r3, r2
 80077c2:	781a      	ldrb	r2, [r3, #0]
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	3301      	adds	r3, #1
 80077cc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80077ce:	8afb      	ldrh	r3, [r7, #22]
 80077d0:	3302      	adds	r3, #2
 80077d2:	82fb      	strh	r3, [r7, #22]
 80077d4:	8afa      	ldrh	r2, [r7, #22]
 80077d6:	8abb      	ldrh	r3, [r7, #20]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d3ef      	bcc.n	80077bc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2200      	movs	r2, #0
 80077e0:	701a      	strb	r2, [r3, #0]
  }
}
 80077e2:	bf00      	nop
 80077e4:	371c      	adds	r7, #28
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr

080077ee <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80077ee:	b480      	push	{r7}
 80077f0:	b085      	sub	sp, #20
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
 80077f6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	881a      	ldrh	r2, [r3, #0]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	b29b      	uxth	r3, r3
 8007802:	4413      	add	r3, r2
 8007804:	b29a      	uxth	r2, r3
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4413      	add	r3, r2
 8007814:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007816:	68fb      	ldr	r3, [r7, #12]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3714      	adds	r7, #20
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b086      	sub	sp, #24
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	4613      	mov	r3, r2
 8007830:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007832:	2301      	movs	r3, #1
 8007834:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	789b      	ldrb	r3, [r3, #2]
 800783a:	2b01      	cmp	r3, #1
 800783c:	d002      	beq.n	8007844 <USBH_CtlReq+0x20>
 800783e:	2b02      	cmp	r3, #2
 8007840:	d00f      	beq.n	8007862 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007842:	e027      	b.n	8007894 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	68ba      	ldr	r2, [r7, #8]
 8007848:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	88fa      	ldrh	r2, [r7, #6]
 800784e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2201      	movs	r2, #1
 8007854:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2202      	movs	r2, #2
 800785a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800785c:	2301      	movs	r3, #1
 800785e:	75fb      	strb	r3, [r7, #23]
      break;
 8007860:	e018      	b.n	8007894 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f000 f81c 	bl	80078a0 <USBH_HandleControl>
 8007868:	4603      	mov	r3, r0
 800786a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800786c:	7dfb      	ldrb	r3, [r7, #23]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d002      	beq.n	8007878 <USBH_CtlReq+0x54>
 8007872:	7dfb      	ldrb	r3, [r7, #23]
 8007874:	2b03      	cmp	r3, #3
 8007876:	d106      	bne.n	8007886 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2201      	movs	r2, #1
 800787c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	761a      	strb	r2, [r3, #24]
      break;
 8007884:	e005      	b.n	8007892 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007886:	7dfb      	ldrb	r3, [r7, #23]
 8007888:	2b02      	cmp	r3, #2
 800788a:	d102      	bne.n	8007892 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2201      	movs	r2, #1
 8007890:	709a      	strb	r2, [r3, #2]
      break;
 8007892:	bf00      	nop
  }
  return status;
 8007894:	7dfb      	ldrb	r3, [r7, #23]
}
 8007896:	4618      	mov	r0, r3
 8007898:	3718      	adds	r7, #24
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
	...

080078a0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af02      	add	r7, sp, #8
 80078a6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80078a8:	2301      	movs	r3, #1
 80078aa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80078ac:	2300      	movs	r3, #0
 80078ae:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	7e1b      	ldrb	r3, [r3, #24]
 80078b4:	3b01      	subs	r3, #1
 80078b6:	2b0a      	cmp	r3, #10
 80078b8:	f200 8156 	bhi.w	8007b68 <USBH_HandleControl+0x2c8>
 80078bc:	a201      	add	r2, pc, #4	; (adr r2, 80078c4 <USBH_HandleControl+0x24>)
 80078be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c2:	bf00      	nop
 80078c4:	080078f1 	.word	0x080078f1
 80078c8:	0800790b 	.word	0x0800790b
 80078cc:	08007975 	.word	0x08007975
 80078d0:	0800799b 	.word	0x0800799b
 80078d4:	080079d3 	.word	0x080079d3
 80078d8:	080079fd 	.word	0x080079fd
 80078dc:	08007a4f 	.word	0x08007a4f
 80078e0:	08007a71 	.word	0x08007a71
 80078e4:	08007aad 	.word	0x08007aad
 80078e8:	08007ad3 	.word	0x08007ad3
 80078ec:	08007b11 	.word	0x08007b11
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f103 0110 	add.w	r1, r3, #16
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	795b      	ldrb	r3, [r3, #5]
 80078fa:	461a      	mov	r2, r3
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 f943 	bl	8007b88 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2202      	movs	r2, #2
 8007906:	761a      	strb	r2, [r3, #24]
      break;
 8007908:	e139      	b.n	8007b7e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	795b      	ldrb	r3, [r3, #5]
 800790e:	4619      	mov	r1, r3
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fcc5 	bl	80082a0 <USBH_LL_GetURBState>
 8007916:	4603      	mov	r3, r0
 8007918:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800791a:	7bbb      	ldrb	r3, [r7, #14]
 800791c:	2b01      	cmp	r3, #1
 800791e:	d11e      	bne.n	800795e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	7c1b      	ldrb	r3, [r3, #16]
 8007924:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007928:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	8adb      	ldrh	r3, [r3, #22]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00a      	beq.n	8007948 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007932:	7b7b      	ldrb	r3, [r7, #13]
 8007934:	2b80      	cmp	r3, #128	; 0x80
 8007936:	d103      	bne.n	8007940 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2203      	movs	r2, #3
 800793c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800793e:	e115      	b.n	8007b6c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2205      	movs	r2, #5
 8007944:	761a      	strb	r2, [r3, #24]
      break;
 8007946:	e111      	b.n	8007b6c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007948:	7b7b      	ldrb	r3, [r7, #13]
 800794a:	2b80      	cmp	r3, #128	; 0x80
 800794c:	d103      	bne.n	8007956 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2209      	movs	r2, #9
 8007952:	761a      	strb	r2, [r3, #24]
      break;
 8007954:	e10a      	b.n	8007b6c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2207      	movs	r2, #7
 800795a:	761a      	strb	r2, [r3, #24]
      break;
 800795c:	e106      	b.n	8007b6c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800795e:	7bbb      	ldrb	r3, [r7, #14]
 8007960:	2b04      	cmp	r3, #4
 8007962:	d003      	beq.n	800796c <USBH_HandleControl+0xcc>
 8007964:	7bbb      	ldrb	r3, [r7, #14]
 8007966:	2b02      	cmp	r3, #2
 8007968:	f040 8100 	bne.w	8007b6c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	220b      	movs	r2, #11
 8007970:	761a      	strb	r2, [r3, #24]
      break;
 8007972:	e0fb      	b.n	8007b6c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800797a:	b29a      	uxth	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6899      	ldr	r1, [r3, #8]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	899a      	ldrh	r2, [r3, #12]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	791b      	ldrb	r3, [r3, #4]
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 f93a 	bl	8007c06 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2204      	movs	r2, #4
 8007996:	761a      	strb	r2, [r3, #24]
      break;
 8007998:	e0f1      	b.n	8007b7e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	791b      	ldrb	r3, [r3, #4]
 800799e:	4619      	mov	r1, r3
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fc7d 	bl	80082a0 <USBH_LL_GetURBState>
 80079a6:	4603      	mov	r3, r0
 80079a8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80079aa:	7bbb      	ldrb	r3, [r7, #14]
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d102      	bne.n	80079b6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2209      	movs	r2, #9
 80079b4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80079b6:	7bbb      	ldrb	r3, [r7, #14]
 80079b8:	2b05      	cmp	r3, #5
 80079ba:	d102      	bne.n	80079c2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80079bc:	2303      	movs	r3, #3
 80079be:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80079c0:	e0d6      	b.n	8007b70 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80079c2:	7bbb      	ldrb	r3, [r7, #14]
 80079c4:	2b04      	cmp	r3, #4
 80079c6:	f040 80d3 	bne.w	8007b70 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	220b      	movs	r2, #11
 80079ce:	761a      	strb	r2, [r3, #24]
      break;
 80079d0:	e0ce      	b.n	8007b70 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6899      	ldr	r1, [r3, #8]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	899a      	ldrh	r2, [r3, #12]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	795b      	ldrb	r3, [r3, #5]
 80079de:	2001      	movs	r0, #1
 80079e0:	9000      	str	r0, [sp, #0]
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f8ea 	bl	8007bbc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2206      	movs	r2, #6
 80079f8:	761a      	strb	r2, [r3, #24]
      break;
 80079fa:	e0c0      	b.n	8007b7e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	795b      	ldrb	r3, [r3, #5]
 8007a00:	4619      	mov	r1, r3
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fc4c 	bl	80082a0 <USBH_LL_GetURBState>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007a0c:	7bbb      	ldrb	r3, [r7, #14]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d103      	bne.n	8007a1a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2207      	movs	r2, #7
 8007a16:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a18:	e0ac      	b.n	8007b74 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007a1a:	7bbb      	ldrb	r3, [r7, #14]
 8007a1c:	2b05      	cmp	r3, #5
 8007a1e:	d105      	bne.n	8007a2c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	220c      	movs	r2, #12
 8007a24:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007a26:	2303      	movs	r3, #3
 8007a28:	73fb      	strb	r3, [r7, #15]
      break;
 8007a2a:	e0a3      	b.n	8007b74 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a2c:	7bbb      	ldrb	r3, [r7, #14]
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d103      	bne.n	8007a3a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2205      	movs	r2, #5
 8007a36:	761a      	strb	r2, [r3, #24]
      break;
 8007a38:	e09c      	b.n	8007b74 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007a3a:	7bbb      	ldrb	r3, [r7, #14]
 8007a3c:	2b04      	cmp	r3, #4
 8007a3e:	f040 8099 	bne.w	8007b74 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	220b      	movs	r2, #11
 8007a46:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007a48:	2302      	movs	r3, #2
 8007a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a4c:	e092      	b.n	8007b74 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	791b      	ldrb	r3, [r3, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	2100      	movs	r1, #0
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 f8d5 	bl	8007c06 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2208      	movs	r2, #8
 8007a6c:	761a      	strb	r2, [r3, #24]

      break;
 8007a6e:	e086      	b.n	8007b7e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	791b      	ldrb	r3, [r3, #4]
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 fc12 	bl	80082a0 <USBH_LL_GetURBState>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007a80:	7bbb      	ldrb	r3, [r7, #14]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d105      	bne.n	8007a92 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	220d      	movs	r2, #13
 8007a8a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a90:	e072      	b.n	8007b78 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007a92:	7bbb      	ldrb	r3, [r7, #14]
 8007a94:	2b04      	cmp	r3, #4
 8007a96:	d103      	bne.n	8007aa0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	220b      	movs	r2, #11
 8007a9c:	761a      	strb	r2, [r3, #24]
      break;
 8007a9e:	e06b      	b.n	8007b78 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
 8007aa2:	2b05      	cmp	r3, #5
 8007aa4:	d168      	bne.n	8007b78 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	73fb      	strb	r3, [r7, #15]
      break;
 8007aaa:	e065      	b.n	8007b78 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	795b      	ldrb	r3, [r3, #5]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	9200      	str	r2, [sp, #0]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	2100      	movs	r1, #0
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 f87f 	bl	8007bbc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	220a      	movs	r2, #10
 8007ace:	761a      	strb	r2, [r3, #24]
      break;
 8007ad0:	e055      	b.n	8007b7e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	795b      	ldrb	r3, [r3, #5]
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 fbe1 	bl	80082a0 <USBH_LL_GetURBState>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007ae2:	7bbb      	ldrb	r3, [r7, #14]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d105      	bne.n	8007af4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	220d      	movs	r2, #13
 8007af0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007af2:	e043      	b.n	8007b7c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007af4:	7bbb      	ldrb	r3, [r7, #14]
 8007af6:	2b02      	cmp	r3, #2
 8007af8:	d103      	bne.n	8007b02 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2209      	movs	r2, #9
 8007afe:	761a      	strb	r2, [r3, #24]
      break;
 8007b00:	e03c      	b.n	8007b7c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007b02:	7bbb      	ldrb	r3, [r7, #14]
 8007b04:	2b04      	cmp	r3, #4
 8007b06:	d139      	bne.n	8007b7c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	220b      	movs	r2, #11
 8007b0c:	761a      	strb	r2, [r3, #24]
      break;
 8007b0e:	e035      	b.n	8007b7c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	7e5b      	ldrb	r3, [r3, #25]
 8007b14:	3301      	adds	r3, #1
 8007b16:	b2da      	uxtb	r2, r3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	765a      	strb	r2, [r3, #25]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	7e5b      	ldrb	r3, [r3, #25]
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	d806      	bhi.n	8007b32 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007b30:	e025      	b.n	8007b7e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b38:	2106      	movs	r1, #6
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	795b      	ldrb	r3, [r3, #5]
 8007b48:	4619      	mov	r1, r3
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f90c 	bl	8007d68 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	791b      	ldrb	r3, [r3, #4]
 8007b54:	4619      	mov	r1, r3
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f906 	bl	8007d68 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007b62:	2302      	movs	r3, #2
 8007b64:	73fb      	strb	r3, [r7, #15]
      break;
 8007b66:	e00a      	b.n	8007b7e <USBH_HandleControl+0x2de>

    default:
      break;
 8007b68:	bf00      	nop
 8007b6a:	e008      	b.n	8007b7e <USBH_HandleControl+0x2de>
      break;
 8007b6c:	bf00      	nop
 8007b6e:	e006      	b.n	8007b7e <USBH_HandleControl+0x2de>
      break;
 8007b70:	bf00      	nop
 8007b72:	e004      	b.n	8007b7e <USBH_HandleControl+0x2de>
      break;
 8007b74:	bf00      	nop
 8007b76:	e002      	b.n	8007b7e <USBH_HandleControl+0x2de>
      break;
 8007b78:	bf00      	nop
 8007b7a:	e000      	b.n	8007b7e <USBH_HandleControl+0x2de>
      break;
 8007b7c:	bf00      	nop
  }

  return status;
 8007b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3710      	adds	r7, #16
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b088      	sub	sp, #32
 8007b8c:	af04      	add	r7, sp, #16
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	4613      	mov	r3, r2
 8007b94:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b96:	79f9      	ldrb	r1, [r7, #7]
 8007b98:	2300      	movs	r3, #0
 8007b9a:	9303      	str	r3, [sp, #12]
 8007b9c:	2308      	movs	r3, #8
 8007b9e:	9302      	str	r3, [sp, #8]
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	9301      	str	r3, [sp, #4]
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	2300      	movs	r3, #0
 8007baa:	2200      	movs	r2, #0
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f000 fb46 	bl	800823e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b088      	sub	sp, #32
 8007bc0:	af04      	add	r7, sp, #16
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	4611      	mov	r1, r2
 8007bc8:	461a      	mov	r2, r3
 8007bca:	460b      	mov	r3, r1
 8007bcc:	80fb      	strh	r3, [r7, #6]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d001      	beq.n	8007be0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007be0:	7979      	ldrb	r1, [r7, #5]
 8007be2:	7e3b      	ldrb	r3, [r7, #24]
 8007be4:	9303      	str	r3, [sp, #12]
 8007be6:	88fb      	ldrh	r3, [r7, #6]
 8007be8:	9302      	str	r3, [sp, #8]
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	9301      	str	r3, [sp, #4]
 8007bee:	2301      	movs	r3, #1
 8007bf0:	9300      	str	r3, [sp, #0]
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f000 fb21 	bl	800823e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b088      	sub	sp, #32
 8007c0a:	af04      	add	r7, sp, #16
 8007c0c:	60f8      	str	r0, [r7, #12]
 8007c0e:	60b9      	str	r1, [r7, #8]
 8007c10:	4611      	mov	r1, r2
 8007c12:	461a      	mov	r2, r3
 8007c14:	460b      	mov	r3, r1
 8007c16:	80fb      	strh	r3, [r7, #6]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c1c:	7979      	ldrb	r1, [r7, #5]
 8007c1e:	2300      	movs	r3, #0
 8007c20:	9303      	str	r3, [sp, #12]
 8007c22:	88fb      	ldrh	r3, [r7, #6]
 8007c24:	9302      	str	r3, [sp, #8]
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	9301      	str	r3, [sp, #4]
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	9300      	str	r3, [sp, #0]
 8007c2e:	2300      	movs	r3, #0
 8007c30:	2201      	movs	r2, #1
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	f000 fb03 	bl	800823e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007c38:	2300      	movs	r3, #0

}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3710      	adds	r7, #16
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b088      	sub	sp, #32
 8007c46:	af04      	add	r7, sp, #16
 8007c48:	60f8      	str	r0, [r7, #12]
 8007c4a:	60b9      	str	r1, [r7, #8]
 8007c4c:	4611      	mov	r1, r2
 8007c4e:	461a      	mov	r2, r3
 8007c50:	460b      	mov	r3, r1
 8007c52:	80fb      	strh	r3, [r7, #6]
 8007c54:	4613      	mov	r3, r2
 8007c56:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d001      	beq.n	8007c66 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007c62:	2300      	movs	r3, #0
 8007c64:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c66:	7979      	ldrb	r1, [r7, #5]
 8007c68:	7e3b      	ldrb	r3, [r7, #24]
 8007c6a:	9303      	str	r3, [sp, #12]
 8007c6c:	88fb      	ldrh	r3, [r7, #6]
 8007c6e:	9302      	str	r3, [sp, #8]
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	9301      	str	r3, [sp, #4]
 8007c74:	2301      	movs	r3, #1
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	2302      	movs	r3, #2
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f000 fade 	bl	800823e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b088      	sub	sp, #32
 8007c90:	af04      	add	r7, sp, #16
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	4611      	mov	r1, r2
 8007c98:	461a      	mov	r2, r3
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	80fb      	strh	r3, [r7, #6]
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007ca2:	7979      	ldrb	r1, [r7, #5]
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	9303      	str	r3, [sp, #12]
 8007ca8:	88fb      	ldrh	r3, [r7, #6]
 8007caa:	9302      	str	r3, [sp, #8]
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	9301      	str	r3, [sp, #4]
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f000 fac0 	bl	800823e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af04      	add	r7, sp, #16
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	4608      	mov	r0, r1
 8007cd2:	4611      	mov	r1, r2
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	70fb      	strb	r3, [r7, #3]
 8007cda:	460b      	mov	r3, r1
 8007cdc:	70bb      	strb	r3, [r7, #2]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007ce2:	7878      	ldrb	r0, [r7, #1]
 8007ce4:	78ba      	ldrb	r2, [r7, #2]
 8007ce6:	78f9      	ldrb	r1, [r7, #3]
 8007ce8:	8b3b      	ldrh	r3, [r7, #24]
 8007cea:	9302      	str	r3, [sp, #8]
 8007cec:	7d3b      	ldrb	r3, [r7, #20]
 8007cee:	9301      	str	r3, [sp, #4]
 8007cf0:	7c3b      	ldrb	r3, [r7, #16]
 8007cf2:	9300      	str	r3, [sp, #0]
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fa53 	bl	80081a2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3708      	adds	r7, #8
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b082      	sub	sp, #8
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
 8007d0e:	460b      	mov	r3, r1
 8007d10:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007d12:	78fb      	ldrb	r3, [r7, #3]
 8007d14:	4619      	mov	r1, r3
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 fa72 	bl	8008200 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b084      	sub	sp, #16
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	460b      	mov	r3, r1
 8007d30:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f836 	bl	8007da4 <USBH_GetFreePipe>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007d3c:	89fb      	ldrh	r3, [r7, #14]
 8007d3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d00a      	beq.n	8007d5c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007d46:	78fa      	ldrb	r2, [r7, #3]
 8007d48:	89fb      	ldrh	r3, [r7, #14]
 8007d4a:	f003 030f 	and.w	r3, r3, #15
 8007d4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d52:	6879      	ldr	r1, [r7, #4]
 8007d54:	33e0      	adds	r3, #224	; 0xe0
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	440b      	add	r3, r1
 8007d5a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007d5c:	89fb      	ldrh	r3, [r7, #14]
 8007d5e:	b2db      	uxtb	r3, r3
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3710      	adds	r7, #16
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	460b      	mov	r3, r1
 8007d72:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007d74:	78fb      	ldrb	r3, [r7, #3]
 8007d76:	2b0f      	cmp	r3, #15
 8007d78:	d80d      	bhi.n	8007d96 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007d7a:	78fb      	ldrb	r3, [r7, #3]
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	33e0      	adds	r3, #224	; 0xe0
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4413      	add	r3, r2
 8007d84:	685a      	ldr	r2, [r3, #4]
 8007d86:	78fb      	ldrb	r3, [r7, #3]
 8007d88:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007d8c:	6879      	ldr	r1, [r7, #4]
 8007d8e:	33e0      	adds	r3, #224	; 0xe0
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	440b      	add	r3, r1
 8007d94:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007dac:	2300      	movs	r3, #0
 8007dae:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007db0:	2300      	movs	r3, #0
 8007db2:	73fb      	strb	r3, [r7, #15]
 8007db4:	e00f      	b.n	8007dd6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007db6:	7bfb      	ldrb	r3, [r7, #15]
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	33e0      	adds	r3, #224	; 0xe0
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	4413      	add	r3, r2
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d102      	bne.n	8007dd0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007dca:	7bfb      	ldrb	r3, [r7, #15]
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	e007      	b.n	8007de0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007dd0:	7bfb      	ldrb	r3, [r7, #15]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	73fb      	strb	r3, [r7, #15]
 8007dd6:	7bfb      	ldrb	r3, [r7, #15]
 8007dd8:	2b0f      	cmp	r3, #15
 8007dda:	d9ec      	bls.n	8007db6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007ddc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3714      	adds	r7, #20
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007df0:	2201      	movs	r2, #1
 8007df2:	490e      	ldr	r1, [pc, #56]	; (8007e2c <MX_USB_HOST_Init+0x40>)
 8007df4:	480e      	ldr	r0, [pc, #56]	; (8007e30 <MX_USB_HOST_Init+0x44>)
 8007df6:	f7fe fba7 	bl	8006548 <USBH_Init>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d001      	beq.n	8007e04 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007e00:	f7f9 fbf0 	bl	80015e4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007e04:	490b      	ldr	r1, [pc, #44]	; (8007e34 <MX_USB_HOST_Init+0x48>)
 8007e06:	480a      	ldr	r0, [pc, #40]	; (8007e30 <MX_USB_HOST_Init+0x44>)
 8007e08:	f7fe fc2c 	bl	8006664 <USBH_RegisterClass>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d001      	beq.n	8007e16 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007e12:	f7f9 fbe7 	bl	80015e4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007e16:	4806      	ldr	r0, [pc, #24]	; (8007e30 <MX_USB_HOST_Init+0x44>)
 8007e18:	f7fe fcb0 	bl	800677c <USBH_Start>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d001      	beq.n	8007e26 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007e22:	f7f9 fbdf 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007e26:	bf00      	nop
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	08007e4d 	.word	0x08007e4d
 8007e30:	20000214 	.word	0x20000214
 8007e34:	2000000c 	.word	0x2000000c

08007e38 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007e3c:	4802      	ldr	r0, [pc, #8]	; (8007e48 <MX_USB_HOST_Process+0x10>)
 8007e3e:	f7fe fcad 	bl	800679c <USBH_Process>
}
 8007e42:	bf00      	nop
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	20000214 	.word	0x20000214

08007e4c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	460b      	mov	r3, r1
 8007e56:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007e58:	78fb      	ldrb	r3, [r7, #3]
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	2b04      	cmp	r3, #4
 8007e5e:	d819      	bhi.n	8007e94 <USBH_UserProcess+0x48>
 8007e60:	a201      	add	r2, pc, #4	; (adr r2, 8007e68 <USBH_UserProcess+0x1c>)
 8007e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e66:	bf00      	nop
 8007e68:	08007e95 	.word	0x08007e95
 8007e6c:	08007e85 	.word	0x08007e85
 8007e70:	08007e95 	.word	0x08007e95
 8007e74:	08007e8d 	.word	0x08007e8d
 8007e78:	08007e7d 	.word	0x08007e7d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007e7c:	4b09      	ldr	r3, [pc, #36]	; (8007ea4 <USBH_UserProcess+0x58>)
 8007e7e:	2203      	movs	r2, #3
 8007e80:	701a      	strb	r2, [r3, #0]
  break;
 8007e82:	e008      	b.n	8007e96 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007e84:	4b07      	ldr	r3, [pc, #28]	; (8007ea4 <USBH_UserProcess+0x58>)
 8007e86:	2202      	movs	r2, #2
 8007e88:	701a      	strb	r2, [r3, #0]
  break;
 8007e8a:	e004      	b.n	8007e96 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007e8c:	4b05      	ldr	r3, [pc, #20]	; (8007ea4 <USBH_UserProcess+0x58>)
 8007e8e:	2201      	movs	r2, #1
 8007e90:	701a      	strb	r2, [r3, #0]
  break;
 8007e92:	e000      	b.n	8007e96 <USBH_UserProcess+0x4a>

  default:
  break;
 8007e94:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007e96:	bf00      	nop
 8007e98:	370c      	adds	r7, #12
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	200005ec 	.word	0x200005ec

08007ea8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b08a      	sub	sp, #40	; 0x28
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007eb0:	f107 0314 	add.w	r3, r7, #20
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	601a      	str	r2, [r3, #0]
 8007eb8:	605a      	str	r2, [r3, #4]
 8007eba:	609a      	str	r2, [r3, #8]
 8007ebc:	60da      	str	r2, [r3, #12]
 8007ebe:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ec8:	d147      	bne.n	8007f5a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007eca:	2300      	movs	r3, #0
 8007ecc:	613b      	str	r3, [r7, #16]
 8007ece:	4b25      	ldr	r3, [pc, #148]	; (8007f64 <HAL_HCD_MspInit+0xbc>)
 8007ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed2:	4a24      	ldr	r2, [pc, #144]	; (8007f64 <HAL_HCD_MspInit+0xbc>)
 8007ed4:	f043 0301 	orr.w	r3, r3, #1
 8007ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8007eda:	4b22      	ldr	r3, [pc, #136]	; (8007f64 <HAL_HCD_MspInit+0xbc>)
 8007edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ede:	f003 0301 	and.w	r3, r3, #1
 8007ee2:	613b      	str	r3, [r7, #16]
 8007ee4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007ee6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007eec:	2300      	movs	r3, #0
 8007eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007ef4:	f107 0314 	add.w	r3, r7, #20
 8007ef8:	4619      	mov	r1, r3
 8007efa:	481b      	ldr	r0, [pc, #108]	; (8007f68 <HAL_HCD_MspInit+0xc0>)
 8007efc:	f7f9 feee 	bl	8001cdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007f00:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f06:	2302      	movs	r3, #2
 8007f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f0e:	2303      	movs	r3, #3
 8007f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007f12:	230a      	movs	r3, #10
 8007f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f16:	f107 0314 	add.w	r3, r7, #20
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	4812      	ldr	r0, [pc, #72]	; (8007f68 <HAL_HCD_MspInit+0xc0>)
 8007f1e:	f7f9 fedd 	bl	8001cdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007f22:	4b10      	ldr	r3, [pc, #64]	; (8007f64 <HAL_HCD_MspInit+0xbc>)
 8007f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f26:	4a0f      	ldr	r2, [pc, #60]	; (8007f64 <HAL_HCD_MspInit+0xbc>)
 8007f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f2c:	6353      	str	r3, [r2, #52]	; 0x34
 8007f2e:	2300      	movs	r3, #0
 8007f30:	60fb      	str	r3, [r7, #12]
 8007f32:	4b0c      	ldr	r3, [pc, #48]	; (8007f64 <HAL_HCD_MspInit+0xbc>)
 8007f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f36:	4a0b      	ldr	r2, [pc, #44]	; (8007f64 <HAL_HCD_MspInit+0xbc>)
 8007f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8007f3e:	4b09      	ldr	r3, [pc, #36]	; (8007f64 <HAL_HCD_MspInit+0xbc>)
 8007f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f46:	60fb      	str	r3, [r7, #12]
 8007f48:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	2043      	movs	r0, #67	; 0x43
 8007f50:	f7f9 fe8d 	bl	8001c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007f54:	2043      	movs	r0, #67	; 0x43
 8007f56:	f7f9 fea6 	bl	8001ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007f5a:	bf00      	nop
 8007f5c:	3728      	adds	r7, #40	; 0x28
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	40023800 	.word	0x40023800
 8007f68:	40020000 	.word	0x40020000

08007f6c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7fe ffed 	bl	8006f5a <USBH_LL_IncTimer>
}
 8007f80:	bf00      	nop
 8007f82:	3708      	adds	r7, #8
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7ff f825 	bl	8006fe6 <USBH_LL_Connect>
}
 8007f9c:	bf00      	nop
 8007f9e:	3708      	adds	r7, #8
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7ff f82e 	bl	8007014 <USBH_LL_Disconnect>
}
 8007fb8:	bf00      	nop
 8007fba:	3708      	adds	r7, #8
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	460b      	mov	r3, r1
 8007fca:	70fb      	strb	r3, [r7, #3]
 8007fcc:	4613      	mov	r3, r2
 8007fce:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7fe ffdf 	bl	8006fae <USBH_LL_PortEnabled>
}
 8007ff0:	bf00      	nop
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008006:	4618      	mov	r0, r3
 8008008:	f7fe ffdf 	bl	8006fca <USBH_LL_PortDisabled>
}
 800800c:	bf00      	nop
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008022:	2b01      	cmp	r3, #1
 8008024:	d12a      	bne.n	800807c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008026:	4a18      	ldr	r2, [pc, #96]	; (8008088 <USBH_LL_Init+0x74>)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a15      	ldr	r2, [pc, #84]	; (8008088 <USBH_LL_Init+0x74>)
 8008032:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008036:	4b14      	ldr	r3, [pc, #80]	; (8008088 <USBH_LL_Init+0x74>)
 8008038:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800803c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800803e:	4b12      	ldr	r3, [pc, #72]	; (8008088 <USBH_LL_Init+0x74>)
 8008040:	2208      	movs	r2, #8
 8008042:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008044:	4b10      	ldr	r3, [pc, #64]	; (8008088 <USBH_LL_Init+0x74>)
 8008046:	2201      	movs	r2, #1
 8008048:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800804a:	4b0f      	ldr	r3, [pc, #60]	; (8008088 <USBH_LL_Init+0x74>)
 800804c:	2200      	movs	r2, #0
 800804e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008050:	4b0d      	ldr	r3, [pc, #52]	; (8008088 <USBH_LL_Init+0x74>)
 8008052:	2202      	movs	r2, #2
 8008054:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008056:	4b0c      	ldr	r3, [pc, #48]	; (8008088 <USBH_LL_Init+0x74>)
 8008058:	2200      	movs	r2, #0
 800805a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800805c:	480a      	ldr	r0, [pc, #40]	; (8008088 <USBH_LL_Init+0x74>)
 800805e:	f7f9 fff3 	bl	8002048 <HAL_HCD_Init>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d001      	beq.n	800806c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008068:	f7f9 fabc 	bl	80015e4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800806c:	4806      	ldr	r0, [pc, #24]	; (8008088 <USBH_LL_Init+0x74>)
 800806e:	f7fa fbd6 	bl	800281e <HAL_HCD_GetCurrentFrame>
 8008072:	4603      	mov	r3, r0
 8008074:	4619      	mov	r1, r3
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f7fe ff60 	bl	8006f3c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	200005f0 	.word	0x200005f0

0800808c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008094:	2300      	movs	r3, #0
 8008096:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008098:	2300      	movs	r3, #0
 800809a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fa fb45 	bl	8002732 <HAL_HCD_Start>
 80080a8:	4603      	mov	r3, r0
 80080aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080ac:	7bfb      	ldrb	r3, [r7, #15]
 80080ae:	4618      	mov	r0, r3
 80080b0:	f000 f95c 	bl	800836c <USBH_Get_USB_Status>
 80080b4:	4603      	mov	r3, r0
 80080b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b084      	sub	sp, #16
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ca:	2300      	movs	r3, #0
 80080cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080ce:	2300      	movs	r3, #0
 80080d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080d8:	4618      	mov	r0, r3
 80080da:	f7fa fb4d 	bl	8002778 <HAL_HCD_Stop>
 80080de:	4603      	mov	r3, r0
 80080e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080e2:	7bfb      	ldrb	r3, [r7, #15]
 80080e4:	4618      	mov	r0, r3
 80080e6:	f000 f941 	bl	800836c <USBH_Get_USB_Status>
 80080ea:	4603      	mov	r3, r0
 80080ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3710      	adds	r7, #16
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008100:	2301      	movs	r3, #1
 8008102:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800810a:	4618      	mov	r0, r3
 800810c:	f7fa fb95 	bl	800283a <HAL_HCD_GetCurrentSpeed>
 8008110:	4603      	mov	r3, r0
 8008112:	2b02      	cmp	r3, #2
 8008114:	d00c      	beq.n	8008130 <USBH_LL_GetSpeed+0x38>
 8008116:	2b02      	cmp	r3, #2
 8008118:	d80d      	bhi.n	8008136 <USBH_LL_GetSpeed+0x3e>
 800811a:	2b00      	cmp	r3, #0
 800811c:	d002      	beq.n	8008124 <USBH_LL_GetSpeed+0x2c>
 800811e:	2b01      	cmp	r3, #1
 8008120:	d003      	beq.n	800812a <USBH_LL_GetSpeed+0x32>
 8008122:	e008      	b.n	8008136 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008124:	2300      	movs	r3, #0
 8008126:	73fb      	strb	r3, [r7, #15]
    break;
 8008128:	e008      	b.n	800813c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800812a:	2301      	movs	r3, #1
 800812c:	73fb      	strb	r3, [r7, #15]
    break;
 800812e:	e005      	b.n	800813c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008130:	2302      	movs	r3, #2
 8008132:	73fb      	strb	r3, [r7, #15]
    break;
 8008134:	e002      	b.n	800813c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008136:	2301      	movs	r3, #1
 8008138:	73fb      	strb	r3, [r7, #15]
    break;
 800813a:	bf00      	nop
  }
  return  speed;
 800813c:	7bfb      	ldrb	r3, [r7, #15]
}
 800813e:	4618      	mov	r0, r3
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b084      	sub	sp, #16
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800814e:	2300      	movs	r3, #0
 8008150:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008152:	2300      	movs	r3, #0
 8008154:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800815c:	4618      	mov	r0, r3
 800815e:	f7fa fb28 	bl	80027b2 <HAL_HCD_ResetPort>
 8008162:	4603      	mov	r3, r0
 8008164:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008166:	7bfb      	ldrb	r3, [r7, #15]
 8008168:	4618      	mov	r0, r3
 800816a:	f000 f8ff 	bl	800836c <USBH_Get_USB_Status>
 800816e:	4603      	mov	r3, r0
 8008170:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008172:	7bbb      	ldrb	r3, [r7, #14]
}
 8008174:	4618      	mov	r0, r3
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	460b      	mov	r3, r1
 8008186:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800818e:	78fa      	ldrb	r2, [r7, #3]
 8008190:	4611      	mov	r1, r2
 8008192:	4618      	mov	r0, r3
 8008194:	f7fa fb2f 	bl	80027f6 <HAL_HCD_HC_GetXferCount>
 8008198:	4603      	mov	r3, r0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3708      	adds	r7, #8
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80081a2:	b590      	push	{r4, r7, lr}
 80081a4:	b089      	sub	sp, #36	; 0x24
 80081a6:	af04      	add	r7, sp, #16
 80081a8:	6078      	str	r0, [r7, #4]
 80081aa:	4608      	mov	r0, r1
 80081ac:	4611      	mov	r1, r2
 80081ae:	461a      	mov	r2, r3
 80081b0:	4603      	mov	r3, r0
 80081b2:	70fb      	strb	r3, [r7, #3]
 80081b4:	460b      	mov	r3, r1
 80081b6:	70bb      	strb	r3, [r7, #2]
 80081b8:	4613      	mov	r3, r2
 80081ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081bc:	2300      	movs	r3, #0
 80081be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081c0:	2300      	movs	r3, #0
 80081c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80081ca:	787c      	ldrb	r4, [r7, #1]
 80081cc:	78ba      	ldrb	r2, [r7, #2]
 80081ce:	78f9      	ldrb	r1, [r7, #3]
 80081d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80081d2:	9302      	str	r3, [sp, #8]
 80081d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80081d8:	9301      	str	r3, [sp, #4]
 80081da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80081de:	9300      	str	r3, [sp, #0]
 80081e0:	4623      	mov	r3, r4
 80081e2:	f7f9 ff93 	bl	800210c <HAL_HCD_HC_Init>
 80081e6:	4603      	mov	r3, r0
 80081e8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80081ea:	7bfb      	ldrb	r3, [r7, #15]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f000 f8bd 	bl	800836c <USBH_Get_USB_Status>
 80081f2:	4603      	mov	r3, r0
 80081f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3714      	adds	r7, #20
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd90      	pop	{r4, r7, pc}

08008200 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	460b      	mov	r3, r1
 800820a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800820c:	2300      	movs	r3, #0
 800820e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008210:	2300      	movs	r3, #0
 8008212:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800821a:	78fa      	ldrb	r2, [r7, #3]
 800821c:	4611      	mov	r1, r2
 800821e:	4618      	mov	r0, r3
 8008220:	f7fa f803 	bl	800222a <HAL_HCD_HC_Halt>
 8008224:	4603      	mov	r3, r0
 8008226:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008228:	7bfb      	ldrb	r3, [r7, #15]
 800822a:	4618      	mov	r0, r3
 800822c:	f000 f89e 	bl	800836c <USBH_Get_USB_Status>
 8008230:	4603      	mov	r3, r0
 8008232:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008234:	7bbb      	ldrb	r3, [r7, #14]
}
 8008236:	4618      	mov	r0, r3
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800823e:	b590      	push	{r4, r7, lr}
 8008240:	b089      	sub	sp, #36	; 0x24
 8008242:	af04      	add	r7, sp, #16
 8008244:	6078      	str	r0, [r7, #4]
 8008246:	4608      	mov	r0, r1
 8008248:	4611      	mov	r1, r2
 800824a:	461a      	mov	r2, r3
 800824c:	4603      	mov	r3, r0
 800824e:	70fb      	strb	r3, [r7, #3]
 8008250:	460b      	mov	r3, r1
 8008252:	70bb      	strb	r3, [r7, #2]
 8008254:	4613      	mov	r3, r2
 8008256:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008258:	2300      	movs	r3, #0
 800825a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800825c:	2300      	movs	r3, #0
 800825e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008266:	787c      	ldrb	r4, [r7, #1]
 8008268:	78ba      	ldrb	r2, [r7, #2]
 800826a:	78f9      	ldrb	r1, [r7, #3]
 800826c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008270:	9303      	str	r3, [sp, #12]
 8008272:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008274:	9302      	str	r3, [sp, #8]
 8008276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008278:	9301      	str	r3, [sp, #4]
 800827a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800827e:	9300      	str	r3, [sp, #0]
 8008280:	4623      	mov	r3, r4
 8008282:	f7f9 fff5 	bl	8002270 <HAL_HCD_HC_SubmitRequest>
 8008286:	4603      	mov	r3, r0
 8008288:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800828a:	7bfb      	ldrb	r3, [r7, #15]
 800828c:	4618      	mov	r0, r3
 800828e:	f000 f86d 	bl	800836c <USBH_Get_USB_Status>
 8008292:	4603      	mov	r3, r0
 8008294:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008296:	7bbb      	ldrb	r3, [r7, #14]
}
 8008298:	4618      	mov	r0, r3
 800829a:	3714      	adds	r7, #20
 800829c:	46bd      	mov	sp, r7
 800829e:	bd90      	pop	{r4, r7, pc}

080082a0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	460b      	mov	r3, r1
 80082aa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082b2:	78fa      	ldrb	r2, [r7, #3]
 80082b4:	4611      	mov	r1, r2
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7fa fa89 	bl	80027ce <HAL_HCD_HC_GetURBState>
 80082bc:	4603      	mov	r3, r0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3708      	adds	r7, #8
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b082      	sub	sp, #8
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	460b      	mov	r3, r1
 80082d0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d103      	bne.n	80082e4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80082dc:	78fb      	ldrb	r3, [r7, #3]
 80082de:	4618      	mov	r0, r3
 80082e0:	f000 f870 	bl	80083c4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80082e4:	20c8      	movs	r0, #200	; 0xc8
 80082e6:	f7f9 fbc3 	bl	8001a70 <HAL_Delay>
  return USBH_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3708      	adds	r7, #8
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	460b      	mov	r3, r1
 80082fe:	70fb      	strb	r3, [r7, #3]
 8008300:	4613      	mov	r3, r2
 8008302:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800830a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800830c:	78fb      	ldrb	r3, [r7, #3]
 800830e:	68fa      	ldr	r2, [r7, #12]
 8008310:	212c      	movs	r1, #44	; 0x2c
 8008312:	fb01 f303 	mul.w	r3, r1, r3
 8008316:	4413      	add	r3, r2
 8008318:	333b      	adds	r3, #59	; 0x3b
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d009      	beq.n	8008334 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008320:	78fb      	ldrb	r3, [r7, #3]
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	212c      	movs	r1, #44	; 0x2c
 8008326:	fb01 f303 	mul.w	r3, r1, r3
 800832a:	4413      	add	r3, r2
 800832c:	3354      	adds	r3, #84	; 0x54
 800832e:	78ba      	ldrb	r2, [r7, #2]
 8008330:	701a      	strb	r2, [r3, #0]
 8008332:	e008      	b.n	8008346 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008334:	78fb      	ldrb	r3, [r7, #3]
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	212c      	movs	r1, #44	; 0x2c
 800833a:	fb01 f303 	mul.w	r3, r1, r3
 800833e:	4413      	add	r3, r2
 8008340:	3355      	adds	r3, #85	; 0x55
 8008342:	78ba      	ldrb	r2, [r7, #2]
 8008344:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3714      	adds	r7, #20
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f7f9 fb87 	bl	8001a70 <HAL_Delay>
}
 8008362:	bf00      	nop
 8008364:	3708      	adds	r7, #8
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
	...

0800836c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800836c:	b480      	push	{r7}
 800836e:	b085      	sub	sp, #20
 8008370:	af00      	add	r7, sp, #0
 8008372:	4603      	mov	r3, r0
 8008374:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008376:	2300      	movs	r3, #0
 8008378:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800837a:	79fb      	ldrb	r3, [r7, #7]
 800837c:	2b03      	cmp	r3, #3
 800837e:	d817      	bhi.n	80083b0 <USBH_Get_USB_Status+0x44>
 8008380:	a201      	add	r2, pc, #4	; (adr r2, 8008388 <USBH_Get_USB_Status+0x1c>)
 8008382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008386:	bf00      	nop
 8008388:	08008399 	.word	0x08008399
 800838c:	0800839f 	.word	0x0800839f
 8008390:	080083a5 	.word	0x080083a5
 8008394:	080083ab 	.word	0x080083ab
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008398:	2300      	movs	r3, #0
 800839a:	73fb      	strb	r3, [r7, #15]
    break;
 800839c:	e00b      	b.n	80083b6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800839e:	2302      	movs	r3, #2
 80083a0:	73fb      	strb	r3, [r7, #15]
    break;
 80083a2:	e008      	b.n	80083b6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80083a4:	2301      	movs	r3, #1
 80083a6:	73fb      	strb	r3, [r7, #15]
    break;
 80083a8:	e005      	b.n	80083b6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80083aa:	2302      	movs	r3, #2
 80083ac:	73fb      	strb	r3, [r7, #15]
    break;
 80083ae:	e002      	b.n	80083b6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80083b0:	2302      	movs	r3, #2
 80083b2:	73fb      	strb	r3, [r7, #15]
    break;
 80083b4:	bf00      	nop
  }
  return usb_status;
 80083b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3714      	adds	r7, #20
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	4603      	mov	r3, r0
 80083cc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80083ce:	79fb      	ldrb	r3, [r7, #7]
 80083d0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80083d2:	79fb      	ldrb	r3, [r7, #7]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d102      	bne.n	80083de <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80083d8:	2300      	movs	r3, #0
 80083da:	73fb      	strb	r3, [r7, #15]
 80083dc:	e001      	b.n	80083e2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80083de:	2301      	movs	r3, #1
 80083e0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80083e2:	7bfb      	ldrb	r3, [r7, #15]
 80083e4:	461a      	mov	r2, r3
 80083e6:	2101      	movs	r1, #1
 80083e8:	4803      	ldr	r0, [pc, #12]	; (80083f8 <MX_DriverVbusFS+0x34>)
 80083ea:	f7f9 fdfb 	bl	8001fe4 <HAL_GPIO_WritePin>
}
 80083ee:	bf00      	nop
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	40020800 	.word	0x40020800

080083fc <__errno>:
 80083fc:	4b01      	ldr	r3, [pc, #4]	; (8008404 <__errno+0x8>)
 80083fe:	6818      	ldr	r0, [r3, #0]
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	2000002c 	.word	0x2000002c

08008408 <__libc_init_array>:
 8008408:	b570      	push	{r4, r5, r6, lr}
 800840a:	4d0d      	ldr	r5, [pc, #52]	; (8008440 <__libc_init_array+0x38>)
 800840c:	4c0d      	ldr	r4, [pc, #52]	; (8008444 <__libc_init_array+0x3c>)
 800840e:	1b64      	subs	r4, r4, r5
 8008410:	10a4      	asrs	r4, r4, #2
 8008412:	2600      	movs	r6, #0
 8008414:	42a6      	cmp	r6, r4
 8008416:	d109      	bne.n	800842c <__libc_init_array+0x24>
 8008418:	4d0b      	ldr	r5, [pc, #44]	; (8008448 <__libc_init_array+0x40>)
 800841a:	4c0c      	ldr	r4, [pc, #48]	; (800844c <__libc_init_array+0x44>)
 800841c:	f000 fcb8 	bl	8008d90 <_init>
 8008420:	1b64      	subs	r4, r4, r5
 8008422:	10a4      	asrs	r4, r4, #2
 8008424:	2600      	movs	r6, #0
 8008426:	42a6      	cmp	r6, r4
 8008428:	d105      	bne.n	8008436 <__libc_init_array+0x2e>
 800842a:	bd70      	pop	{r4, r5, r6, pc}
 800842c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008430:	4798      	blx	r3
 8008432:	3601      	adds	r6, #1
 8008434:	e7ee      	b.n	8008414 <__libc_init_array+0xc>
 8008436:	f855 3b04 	ldr.w	r3, [r5], #4
 800843a:	4798      	blx	r3
 800843c:	3601      	adds	r6, #1
 800843e:	e7f2      	b.n	8008426 <__libc_init_array+0x1e>
 8008440:	080095c0 	.word	0x080095c0
 8008444:	080095c0 	.word	0x080095c0
 8008448:	080095c0 	.word	0x080095c0
 800844c:	080095c4 	.word	0x080095c4

08008450 <malloc>:
 8008450:	4b02      	ldr	r3, [pc, #8]	; (800845c <malloc+0xc>)
 8008452:	4601      	mov	r1, r0
 8008454:	6818      	ldr	r0, [r3, #0]
 8008456:	f000 b87f 	b.w	8008558 <_malloc_r>
 800845a:	bf00      	nop
 800845c:	2000002c 	.word	0x2000002c

08008460 <free>:
 8008460:	4b02      	ldr	r3, [pc, #8]	; (800846c <free+0xc>)
 8008462:	4601      	mov	r1, r0
 8008464:	6818      	ldr	r0, [r3, #0]
 8008466:	f000 b80b 	b.w	8008480 <_free_r>
 800846a:	bf00      	nop
 800846c:	2000002c 	.word	0x2000002c

08008470 <memset>:
 8008470:	4402      	add	r2, r0
 8008472:	4603      	mov	r3, r0
 8008474:	4293      	cmp	r3, r2
 8008476:	d100      	bne.n	800847a <memset+0xa>
 8008478:	4770      	bx	lr
 800847a:	f803 1b01 	strb.w	r1, [r3], #1
 800847e:	e7f9      	b.n	8008474 <memset+0x4>

08008480 <_free_r>:
 8008480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008482:	2900      	cmp	r1, #0
 8008484:	d044      	beq.n	8008510 <_free_r+0x90>
 8008486:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800848a:	9001      	str	r0, [sp, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	f1a1 0404 	sub.w	r4, r1, #4
 8008492:	bfb8      	it	lt
 8008494:	18e4      	addlt	r4, r4, r3
 8008496:	f000 f91d 	bl	80086d4 <__malloc_lock>
 800849a:	4a1e      	ldr	r2, [pc, #120]	; (8008514 <_free_r+0x94>)
 800849c:	9801      	ldr	r0, [sp, #4]
 800849e:	6813      	ldr	r3, [r2, #0]
 80084a0:	b933      	cbnz	r3, 80084b0 <_free_r+0x30>
 80084a2:	6063      	str	r3, [r4, #4]
 80084a4:	6014      	str	r4, [r2, #0]
 80084a6:	b003      	add	sp, #12
 80084a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084ac:	f000 b918 	b.w	80086e0 <__malloc_unlock>
 80084b0:	42a3      	cmp	r3, r4
 80084b2:	d908      	bls.n	80084c6 <_free_r+0x46>
 80084b4:	6825      	ldr	r5, [r4, #0]
 80084b6:	1961      	adds	r1, r4, r5
 80084b8:	428b      	cmp	r3, r1
 80084ba:	bf01      	itttt	eq
 80084bc:	6819      	ldreq	r1, [r3, #0]
 80084be:	685b      	ldreq	r3, [r3, #4]
 80084c0:	1949      	addeq	r1, r1, r5
 80084c2:	6021      	streq	r1, [r4, #0]
 80084c4:	e7ed      	b.n	80084a2 <_free_r+0x22>
 80084c6:	461a      	mov	r2, r3
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	b10b      	cbz	r3, 80084d0 <_free_r+0x50>
 80084cc:	42a3      	cmp	r3, r4
 80084ce:	d9fa      	bls.n	80084c6 <_free_r+0x46>
 80084d0:	6811      	ldr	r1, [r2, #0]
 80084d2:	1855      	adds	r5, r2, r1
 80084d4:	42a5      	cmp	r5, r4
 80084d6:	d10b      	bne.n	80084f0 <_free_r+0x70>
 80084d8:	6824      	ldr	r4, [r4, #0]
 80084da:	4421      	add	r1, r4
 80084dc:	1854      	adds	r4, r2, r1
 80084de:	42a3      	cmp	r3, r4
 80084e0:	6011      	str	r1, [r2, #0]
 80084e2:	d1e0      	bne.n	80084a6 <_free_r+0x26>
 80084e4:	681c      	ldr	r4, [r3, #0]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	6053      	str	r3, [r2, #4]
 80084ea:	4421      	add	r1, r4
 80084ec:	6011      	str	r1, [r2, #0]
 80084ee:	e7da      	b.n	80084a6 <_free_r+0x26>
 80084f0:	d902      	bls.n	80084f8 <_free_r+0x78>
 80084f2:	230c      	movs	r3, #12
 80084f4:	6003      	str	r3, [r0, #0]
 80084f6:	e7d6      	b.n	80084a6 <_free_r+0x26>
 80084f8:	6825      	ldr	r5, [r4, #0]
 80084fa:	1961      	adds	r1, r4, r5
 80084fc:	428b      	cmp	r3, r1
 80084fe:	bf04      	itt	eq
 8008500:	6819      	ldreq	r1, [r3, #0]
 8008502:	685b      	ldreq	r3, [r3, #4]
 8008504:	6063      	str	r3, [r4, #4]
 8008506:	bf04      	itt	eq
 8008508:	1949      	addeq	r1, r1, r5
 800850a:	6021      	streq	r1, [r4, #0]
 800850c:	6054      	str	r4, [r2, #4]
 800850e:	e7ca      	b.n	80084a6 <_free_r+0x26>
 8008510:	b003      	add	sp, #12
 8008512:	bd30      	pop	{r4, r5, pc}
 8008514:	200008f4 	.word	0x200008f4

08008518 <sbrk_aligned>:
 8008518:	b570      	push	{r4, r5, r6, lr}
 800851a:	4e0e      	ldr	r6, [pc, #56]	; (8008554 <sbrk_aligned+0x3c>)
 800851c:	460c      	mov	r4, r1
 800851e:	6831      	ldr	r1, [r6, #0]
 8008520:	4605      	mov	r5, r0
 8008522:	b911      	cbnz	r1, 800852a <sbrk_aligned+0x12>
 8008524:	f000 f88c 	bl	8008640 <_sbrk_r>
 8008528:	6030      	str	r0, [r6, #0]
 800852a:	4621      	mov	r1, r4
 800852c:	4628      	mov	r0, r5
 800852e:	f000 f887 	bl	8008640 <_sbrk_r>
 8008532:	1c43      	adds	r3, r0, #1
 8008534:	d00a      	beq.n	800854c <sbrk_aligned+0x34>
 8008536:	1cc4      	adds	r4, r0, #3
 8008538:	f024 0403 	bic.w	r4, r4, #3
 800853c:	42a0      	cmp	r0, r4
 800853e:	d007      	beq.n	8008550 <sbrk_aligned+0x38>
 8008540:	1a21      	subs	r1, r4, r0
 8008542:	4628      	mov	r0, r5
 8008544:	f000 f87c 	bl	8008640 <_sbrk_r>
 8008548:	3001      	adds	r0, #1
 800854a:	d101      	bne.n	8008550 <sbrk_aligned+0x38>
 800854c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008550:	4620      	mov	r0, r4
 8008552:	bd70      	pop	{r4, r5, r6, pc}
 8008554:	200008f8 	.word	0x200008f8

08008558 <_malloc_r>:
 8008558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800855c:	1ccd      	adds	r5, r1, #3
 800855e:	f025 0503 	bic.w	r5, r5, #3
 8008562:	3508      	adds	r5, #8
 8008564:	2d0c      	cmp	r5, #12
 8008566:	bf38      	it	cc
 8008568:	250c      	movcc	r5, #12
 800856a:	2d00      	cmp	r5, #0
 800856c:	4607      	mov	r7, r0
 800856e:	db01      	blt.n	8008574 <_malloc_r+0x1c>
 8008570:	42a9      	cmp	r1, r5
 8008572:	d905      	bls.n	8008580 <_malloc_r+0x28>
 8008574:	230c      	movs	r3, #12
 8008576:	603b      	str	r3, [r7, #0]
 8008578:	2600      	movs	r6, #0
 800857a:	4630      	mov	r0, r6
 800857c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008580:	4e2e      	ldr	r6, [pc, #184]	; (800863c <_malloc_r+0xe4>)
 8008582:	f000 f8a7 	bl	80086d4 <__malloc_lock>
 8008586:	6833      	ldr	r3, [r6, #0]
 8008588:	461c      	mov	r4, r3
 800858a:	bb34      	cbnz	r4, 80085da <_malloc_r+0x82>
 800858c:	4629      	mov	r1, r5
 800858e:	4638      	mov	r0, r7
 8008590:	f7ff ffc2 	bl	8008518 <sbrk_aligned>
 8008594:	1c43      	adds	r3, r0, #1
 8008596:	4604      	mov	r4, r0
 8008598:	d14d      	bne.n	8008636 <_malloc_r+0xde>
 800859a:	6834      	ldr	r4, [r6, #0]
 800859c:	4626      	mov	r6, r4
 800859e:	2e00      	cmp	r6, #0
 80085a0:	d140      	bne.n	8008624 <_malloc_r+0xcc>
 80085a2:	6823      	ldr	r3, [r4, #0]
 80085a4:	4631      	mov	r1, r6
 80085a6:	4638      	mov	r0, r7
 80085a8:	eb04 0803 	add.w	r8, r4, r3
 80085ac:	f000 f848 	bl	8008640 <_sbrk_r>
 80085b0:	4580      	cmp	r8, r0
 80085b2:	d13a      	bne.n	800862a <_malloc_r+0xd2>
 80085b4:	6821      	ldr	r1, [r4, #0]
 80085b6:	3503      	adds	r5, #3
 80085b8:	1a6d      	subs	r5, r5, r1
 80085ba:	f025 0503 	bic.w	r5, r5, #3
 80085be:	3508      	adds	r5, #8
 80085c0:	2d0c      	cmp	r5, #12
 80085c2:	bf38      	it	cc
 80085c4:	250c      	movcc	r5, #12
 80085c6:	4629      	mov	r1, r5
 80085c8:	4638      	mov	r0, r7
 80085ca:	f7ff ffa5 	bl	8008518 <sbrk_aligned>
 80085ce:	3001      	adds	r0, #1
 80085d0:	d02b      	beq.n	800862a <_malloc_r+0xd2>
 80085d2:	6823      	ldr	r3, [r4, #0]
 80085d4:	442b      	add	r3, r5
 80085d6:	6023      	str	r3, [r4, #0]
 80085d8:	e00e      	b.n	80085f8 <_malloc_r+0xa0>
 80085da:	6822      	ldr	r2, [r4, #0]
 80085dc:	1b52      	subs	r2, r2, r5
 80085de:	d41e      	bmi.n	800861e <_malloc_r+0xc6>
 80085e0:	2a0b      	cmp	r2, #11
 80085e2:	d916      	bls.n	8008612 <_malloc_r+0xba>
 80085e4:	1961      	adds	r1, r4, r5
 80085e6:	42a3      	cmp	r3, r4
 80085e8:	6025      	str	r5, [r4, #0]
 80085ea:	bf18      	it	ne
 80085ec:	6059      	strne	r1, [r3, #4]
 80085ee:	6863      	ldr	r3, [r4, #4]
 80085f0:	bf08      	it	eq
 80085f2:	6031      	streq	r1, [r6, #0]
 80085f4:	5162      	str	r2, [r4, r5]
 80085f6:	604b      	str	r3, [r1, #4]
 80085f8:	4638      	mov	r0, r7
 80085fa:	f104 060b 	add.w	r6, r4, #11
 80085fe:	f000 f86f 	bl	80086e0 <__malloc_unlock>
 8008602:	f026 0607 	bic.w	r6, r6, #7
 8008606:	1d23      	adds	r3, r4, #4
 8008608:	1af2      	subs	r2, r6, r3
 800860a:	d0b6      	beq.n	800857a <_malloc_r+0x22>
 800860c:	1b9b      	subs	r3, r3, r6
 800860e:	50a3      	str	r3, [r4, r2]
 8008610:	e7b3      	b.n	800857a <_malloc_r+0x22>
 8008612:	6862      	ldr	r2, [r4, #4]
 8008614:	42a3      	cmp	r3, r4
 8008616:	bf0c      	ite	eq
 8008618:	6032      	streq	r2, [r6, #0]
 800861a:	605a      	strne	r2, [r3, #4]
 800861c:	e7ec      	b.n	80085f8 <_malloc_r+0xa0>
 800861e:	4623      	mov	r3, r4
 8008620:	6864      	ldr	r4, [r4, #4]
 8008622:	e7b2      	b.n	800858a <_malloc_r+0x32>
 8008624:	4634      	mov	r4, r6
 8008626:	6876      	ldr	r6, [r6, #4]
 8008628:	e7b9      	b.n	800859e <_malloc_r+0x46>
 800862a:	230c      	movs	r3, #12
 800862c:	603b      	str	r3, [r7, #0]
 800862e:	4638      	mov	r0, r7
 8008630:	f000 f856 	bl	80086e0 <__malloc_unlock>
 8008634:	e7a1      	b.n	800857a <_malloc_r+0x22>
 8008636:	6025      	str	r5, [r4, #0]
 8008638:	e7de      	b.n	80085f8 <_malloc_r+0xa0>
 800863a:	bf00      	nop
 800863c:	200008f4 	.word	0x200008f4

08008640 <_sbrk_r>:
 8008640:	b538      	push	{r3, r4, r5, lr}
 8008642:	4d06      	ldr	r5, [pc, #24]	; (800865c <_sbrk_r+0x1c>)
 8008644:	2300      	movs	r3, #0
 8008646:	4604      	mov	r4, r0
 8008648:	4608      	mov	r0, r1
 800864a:	602b      	str	r3, [r5, #0]
 800864c:	f7f9 f92c 	bl	80018a8 <_sbrk>
 8008650:	1c43      	adds	r3, r0, #1
 8008652:	d102      	bne.n	800865a <_sbrk_r+0x1a>
 8008654:	682b      	ldr	r3, [r5, #0]
 8008656:	b103      	cbz	r3, 800865a <_sbrk_r+0x1a>
 8008658:	6023      	str	r3, [r4, #0]
 800865a:	bd38      	pop	{r3, r4, r5, pc}
 800865c:	200008fc 	.word	0x200008fc

08008660 <_vsniprintf_r>:
 8008660:	b530      	push	{r4, r5, lr}
 8008662:	4614      	mov	r4, r2
 8008664:	2c00      	cmp	r4, #0
 8008666:	b09b      	sub	sp, #108	; 0x6c
 8008668:	4605      	mov	r5, r0
 800866a:	461a      	mov	r2, r3
 800866c:	da05      	bge.n	800867a <_vsniprintf_r+0x1a>
 800866e:	238b      	movs	r3, #139	; 0x8b
 8008670:	6003      	str	r3, [r0, #0]
 8008672:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008676:	b01b      	add	sp, #108	; 0x6c
 8008678:	bd30      	pop	{r4, r5, pc}
 800867a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800867e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008682:	bf14      	ite	ne
 8008684:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8008688:	4623      	moveq	r3, r4
 800868a:	9302      	str	r3, [sp, #8]
 800868c:	9305      	str	r3, [sp, #20]
 800868e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008692:	9100      	str	r1, [sp, #0]
 8008694:	9104      	str	r1, [sp, #16]
 8008696:	f8ad 300e 	strh.w	r3, [sp, #14]
 800869a:	4669      	mov	r1, sp
 800869c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800869e:	f000 f881 	bl	80087a4 <_svfiprintf_r>
 80086a2:	1c43      	adds	r3, r0, #1
 80086a4:	bfbc      	itt	lt
 80086a6:	238b      	movlt	r3, #139	; 0x8b
 80086a8:	602b      	strlt	r3, [r5, #0]
 80086aa:	2c00      	cmp	r4, #0
 80086ac:	d0e3      	beq.n	8008676 <_vsniprintf_r+0x16>
 80086ae:	9b00      	ldr	r3, [sp, #0]
 80086b0:	2200      	movs	r2, #0
 80086b2:	701a      	strb	r2, [r3, #0]
 80086b4:	e7df      	b.n	8008676 <_vsniprintf_r+0x16>
	...

080086b8 <vsniprintf>:
 80086b8:	b507      	push	{r0, r1, r2, lr}
 80086ba:	9300      	str	r3, [sp, #0]
 80086bc:	4613      	mov	r3, r2
 80086be:	460a      	mov	r2, r1
 80086c0:	4601      	mov	r1, r0
 80086c2:	4803      	ldr	r0, [pc, #12]	; (80086d0 <vsniprintf+0x18>)
 80086c4:	6800      	ldr	r0, [r0, #0]
 80086c6:	f7ff ffcb 	bl	8008660 <_vsniprintf_r>
 80086ca:	b003      	add	sp, #12
 80086cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80086d0:	2000002c 	.word	0x2000002c

080086d4 <__malloc_lock>:
 80086d4:	4801      	ldr	r0, [pc, #4]	; (80086dc <__malloc_lock+0x8>)
 80086d6:	f000 baf9 	b.w	8008ccc <__retarget_lock_acquire_recursive>
 80086da:	bf00      	nop
 80086dc:	20000900 	.word	0x20000900

080086e0 <__malloc_unlock>:
 80086e0:	4801      	ldr	r0, [pc, #4]	; (80086e8 <__malloc_unlock+0x8>)
 80086e2:	f000 baf4 	b.w	8008cce <__retarget_lock_release_recursive>
 80086e6:	bf00      	nop
 80086e8:	20000900 	.word	0x20000900

080086ec <__ssputs_r>:
 80086ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086f0:	688e      	ldr	r6, [r1, #8]
 80086f2:	429e      	cmp	r6, r3
 80086f4:	4682      	mov	sl, r0
 80086f6:	460c      	mov	r4, r1
 80086f8:	4690      	mov	r8, r2
 80086fa:	461f      	mov	r7, r3
 80086fc:	d838      	bhi.n	8008770 <__ssputs_r+0x84>
 80086fe:	898a      	ldrh	r2, [r1, #12]
 8008700:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008704:	d032      	beq.n	800876c <__ssputs_r+0x80>
 8008706:	6825      	ldr	r5, [r4, #0]
 8008708:	6909      	ldr	r1, [r1, #16]
 800870a:	eba5 0901 	sub.w	r9, r5, r1
 800870e:	6965      	ldr	r5, [r4, #20]
 8008710:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008714:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008718:	3301      	adds	r3, #1
 800871a:	444b      	add	r3, r9
 800871c:	106d      	asrs	r5, r5, #1
 800871e:	429d      	cmp	r5, r3
 8008720:	bf38      	it	cc
 8008722:	461d      	movcc	r5, r3
 8008724:	0553      	lsls	r3, r2, #21
 8008726:	d531      	bpl.n	800878c <__ssputs_r+0xa0>
 8008728:	4629      	mov	r1, r5
 800872a:	f7ff ff15 	bl	8008558 <_malloc_r>
 800872e:	4606      	mov	r6, r0
 8008730:	b950      	cbnz	r0, 8008748 <__ssputs_r+0x5c>
 8008732:	230c      	movs	r3, #12
 8008734:	f8ca 3000 	str.w	r3, [sl]
 8008738:	89a3      	ldrh	r3, [r4, #12]
 800873a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800873e:	81a3      	strh	r3, [r4, #12]
 8008740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008748:	6921      	ldr	r1, [r4, #16]
 800874a:	464a      	mov	r2, r9
 800874c:	f000 fac0 	bl	8008cd0 <memcpy>
 8008750:	89a3      	ldrh	r3, [r4, #12]
 8008752:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800875a:	81a3      	strh	r3, [r4, #12]
 800875c:	6126      	str	r6, [r4, #16]
 800875e:	6165      	str	r5, [r4, #20]
 8008760:	444e      	add	r6, r9
 8008762:	eba5 0509 	sub.w	r5, r5, r9
 8008766:	6026      	str	r6, [r4, #0]
 8008768:	60a5      	str	r5, [r4, #8]
 800876a:	463e      	mov	r6, r7
 800876c:	42be      	cmp	r6, r7
 800876e:	d900      	bls.n	8008772 <__ssputs_r+0x86>
 8008770:	463e      	mov	r6, r7
 8008772:	6820      	ldr	r0, [r4, #0]
 8008774:	4632      	mov	r2, r6
 8008776:	4641      	mov	r1, r8
 8008778:	f000 fab8 	bl	8008cec <memmove>
 800877c:	68a3      	ldr	r3, [r4, #8]
 800877e:	1b9b      	subs	r3, r3, r6
 8008780:	60a3      	str	r3, [r4, #8]
 8008782:	6823      	ldr	r3, [r4, #0]
 8008784:	4433      	add	r3, r6
 8008786:	6023      	str	r3, [r4, #0]
 8008788:	2000      	movs	r0, #0
 800878a:	e7db      	b.n	8008744 <__ssputs_r+0x58>
 800878c:	462a      	mov	r2, r5
 800878e:	f000 fac7 	bl	8008d20 <_realloc_r>
 8008792:	4606      	mov	r6, r0
 8008794:	2800      	cmp	r0, #0
 8008796:	d1e1      	bne.n	800875c <__ssputs_r+0x70>
 8008798:	6921      	ldr	r1, [r4, #16]
 800879a:	4650      	mov	r0, sl
 800879c:	f7ff fe70 	bl	8008480 <_free_r>
 80087a0:	e7c7      	b.n	8008732 <__ssputs_r+0x46>
	...

080087a4 <_svfiprintf_r>:
 80087a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a8:	4698      	mov	r8, r3
 80087aa:	898b      	ldrh	r3, [r1, #12]
 80087ac:	061b      	lsls	r3, r3, #24
 80087ae:	b09d      	sub	sp, #116	; 0x74
 80087b0:	4607      	mov	r7, r0
 80087b2:	460d      	mov	r5, r1
 80087b4:	4614      	mov	r4, r2
 80087b6:	d50e      	bpl.n	80087d6 <_svfiprintf_r+0x32>
 80087b8:	690b      	ldr	r3, [r1, #16]
 80087ba:	b963      	cbnz	r3, 80087d6 <_svfiprintf_r+0x32>
 80087bc:	2140      	movs	r1, #64	; 0x40
 80087be:	f7ff fecb 	bl	8008558 <_malloc_r>
 80087c2:	6028      	str	r0, [r5, #0]
 80087c4:	6128      	str	r0, [r5, #16]
 80087c6:	b920      	cbnz	r0, 80087d2 <_svfiprintf_r+0x2e>
 80087c8:	230c      	movs	r3, #12
 80087ca:	603b      	str	r3, [r7, #0]
 80087cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087d0:	e0d1      	b.n	8008976 <_svfiprintf_r+0x1d2>
 80087d2:	2340      	movs	r3, #64	; 0x40
 80087d4:	616b      	str	r3, [r5, #20]
 80087d6:	2300      	movs	r3, #0
 80087d8:	9309      	str	r3, [sp, #36]	; 0x24
 80087da:	2320      	movs	r3, #32
 80087dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80087e4:	2330      	movs	r3, #48	; 0x30
 80087e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008990 <_svfiprintf_r+0x1ec>
 80087ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087ee:	f04f 0901 	mov.w	r9, #1
 80087f2:	4623      	mov	r3, r4
 80087f4:	469a      	mov	sl, r3
 80087f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087fa:	b10a      	cbz	r2, 8008800 <_svfiprintf_r+0x5c>
 80087fc:	2a25      	cmp	r2, #37	; 0x25
 80087fe:	d1f9      	bne.n	80087f4 <_svfiprintf_r+0x50>
 8008800:	ebba 0b04 	subs.w	fp, sl, r4
 8008804:	d00b      	beq.n	800881e <_svfiprintf_r+0x7a>
 8008806:	465b      	mov	r3, fp
 8008808:	4622      	mov	r2, r4
 800880a:	4629      	mov	r1, r5
 800880c:	4638      	mov	r0, r7
 800880e:	f7ff ff6d 	bl	80086ec <__ssputs_r>
 8008812:	3001      	adds	r0, #1
 8008814:	f000 80aa 	beq.w	800896c <_svfiprintf_r+0x1c8>
 8008818:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800881a:	445a      	add	r2, fp
 800881c:	9209      	str	r2, [sp, #36]	; 0x24
 800881e:	f89a 3000 	ldrb.w	r3, [sl]
 8008822:	2b00      	cmp	r3, #0
 8008824:	f000 80a2 	beq.w	800896c <_svfiprintf_r+0x1c8>
 8008828:	2300      	movs	r3, #0
 800882a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800882e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008832:	f10a 0a01 	add.w	sl, sl, #1
 8008836:	9304      	str	r3, [sp, #16]
 8008838:	9307      	str	r3, [sp, #28]
 800883a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800883e:	931a      	str	r3, [sp, #104]	; 0x68
 8008840:	4654      	mov	r4, sl
 8008842:	2205      	movs	r2, #5
 8008844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008848:	4851      	ldr	r0, [pc, #324]	; (8008990 <_svfiprintf_r+0x1ec>)
 800884a:	f7f7 fcc9 	bl	80001e0 <memchr>
 800884e:	9a04      	ldr	r2, [sp, #16]
 8008850:	b9d8      	cbnz	r0, 800888a <_svfiprintf_r+0xe6>
 8008852:	06d0      	lsls	r0, r2, #27
 8008854:	bf44      	itt	mi
 8008856:	2320      	movmi	r3, #32
 8008858:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800885c:	0711      	lsls	r1, r2, #28
 800885e:	bf44      	itt	mi
 8008860:	232b      	movmi	r3, #43	; 0x2b
 8008862:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008866:	f89a 3000 	ldrb.w	r3, [sl]
 800886a:	2b2a      	cmp	r3, #42	; 0x2a
 800886c:	d015      	beq.n	800889a <_svfiprintf_r+0xf6>
 800886e:	9a07      	ldr	r2, [sp, #28]
 8008870:	4654      	mov	r4, sl
 8008872:	2000      	movs	r0, #0
 8008874:	f04f 0c0a 	mov.w	ip, #10
 8008878:	4621      	mov	r1, r4
 800887a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800887e:	3b30      	subs	r3, #48	; 0x30
 8008880:	2b09      	cmp	r3, #9
 8008882:	d94e      	bls.n	8008922 <_svfiprintf_r+0x17e>
 8008884:	b1b0      	cbz	r0, 80088b4 <_svfiprintf_r+0x110>
 8008886:	9207      	str	r2, [sp, #28]
 8008888:	e014      	b.n	80088b4 <_svfiprintf_r+0x110>
 800888a:	eba0 0308 	sub.w	r3, r0, r8
 800888e:	fa09 f303 	lsl.w	r3, r9, r3
 8008892:	4313      	orrs	r3, r2
 8008894:	9304      	str	r3, [sp, #16]
 8008896:	46a2      	mov	sl, r4
 8008898:	e7d2      	b.n	8008840 <_svfiprintf_r+0x9c>
 800889a:	9b03      	ldr	r3, [sp, #12]
 800889c:	1d19      	adds	r1, r3, #4
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	9103      	str	r1, [sp, #12]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	bfbb      	ittet	lt
 80088a6:	425b      	neglt	r3, r3
 80088a8:	f042 0202 	orrlt.w	r2, r2, #2
 80088ac:	9307      	strge	r3, [sp, #28]
 80088ae:	9307      	strlt	r3, [sp, #28]
 80088b0:	bfb8      	it	lt
 80088b2:	9204      	strlt	r2, [sp, #16]
 80088b4:	7823      	ldrb	r3, [r4, #0]
 80088b6:	2b2e      	cmp	r3, #46	; 0x2e
 80088b8:	d10c      	bne.n	80088d4 <_svfiprintf_r+0x130>
 80088ba:	7863      	ldrb	r3, [r4, #1]
 80088bc:	2b2a      	cmp	r3, #42	; 0x2a
 80088be:	d135      	bne.n	800892c <_svfiprintf_r+0x188>
 80088c0:	9b03      	ldr	r3, [sp, #12]
 80088c2:	1d1a      	adds	r2, r3, #4
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	9203      	str	r2, [sp, #12]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	bfb8      	it	lt
 80088cc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80088d0:	3402      	adds	r4, #2
 80088d2:	9305      	str	r3, [sp, #20]
 80088d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80089a0 <_svfiprintf_r+0x1fc>
 80088d8:	7821      	ldrb	r1, [r4, #0]
 80088da:	2203      	movs	r2, #3
 80088dc:	4650      	mov	r0, sl
 80088de:	f7f7 fc7f 	bl	80001e0 <memchr>
 80088e2:	b140      	cbz	r0, 80088f6 <_svfiprintf_r+0x152>
 80088e4:	2340      	movs	r3, #64	; 0x40
 80088e6:	eba0 000a 	sub.w	r0, r0, sl
 80088ea:	fa03 f000 	lsl.w	r0, r3, r0
 80088ee:	9b04      	ldr	r3, [sp, #16]
 80088f0:	4303      	orrs	r3, r0
 80088f2:	3401      	adds	r4, #1
 80088f4:	9304      	str	r3, [sp, #16]
 80088f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088fa:	4826      	ldr	r0, [pc, #152]	; (8008994 <_svfiprintf_r+0x1f0>)
 80088fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008900:	2206      	movs	r2, #6
 8008902:	f7f7 fc6d 	bl	80001e0 <memchr>
 8008906:	2800      	cmp	r0, #0
 8008908:	d038      	beq.n	800897c <_svfiprintf_r+0x1d8>
 800890a:	4b23      	ldr	r3, [pc, #140]	; (8008998 <_svfiprintf_r+0x1f4>)
 800890c:	bb1b      	cbnz	r3, 8008956 <_svfiprintf_r+0x1b2>
 800890e:	9b03      	ldr	r3, [sp, #12]
 8008910:	3307      	adds	r3, #7
 8008912:	f023 0307 	bic.w	r3, r3, #7
 8008916:	3308      	adds	r3, #8
 8008918:	9303      	str	r3, [sp, #12]
 800891a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800891c:	4433      	add	r3, r6
 800891e:	9309      	str	r3, [sp, #36]	; 0x24
 8008920:	e767      	b.n	80087f2 <_svfiprintf_r+0x4e>
 8008922:	fb0c 3202 	mla	r2, ip, r2, r3
 8008926:	460c      	mov	r4, r1
 8008928:	2001      	movs	r0, #1
 800892a:	e7a5      	b.n	8008878 <_svfiprintf_r+0xd4>
 800892c:	2300      	movs	r3, #0
 800892e:	3401      	adds	r4, #1
 8008930:	9305      	str	r3, [sp, #20]
 8008932:	4619      	mov	r1, r3
 8008934:	f04f 0c0a 	mov.w	ip, #10
 8008938:	4620      	mov	r0, r4
 800893a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800893e:	3a30      	subs	r2, #48	; 0x30
 8008940:	2a09      	cmp	r2, #9
 8008942:	d903      	bls.n	800894c <_svfiprintf_r+0x1a8>
 8008944:	2b00      	cmp	r3, #0
 8008946:	d0c5      	beq.n	80088d4 <_svfiprintf_r+0x130>
 8008948:	9105      	str	r1, [sp, #20]
 800894a:	e7c3      	b.n	80088d4 <_svfiprintf_r+0x130>
 800894c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008950:	4604      	mov	r4, r0
 8008952:	2301      	movs	r3, #1
 8008954:	e7f0      	b.n	8008938 <_svfiprintf_r+0x194>
 8008956:	ab03      	add	r3, sp, #12
 8008958:	9300      	str	r3, [sp, #0]
 800895a:	462a      	mov	r2, r5
 800895c:	4b0f      	ldr	r3, [pc, #60]	; (800899c <_svfiprintf_r+0x1f8>)
 800895e:	a904      	add	r1, sp, #16
 8008960:	4638      	mov	r0, r7
 8008962:	f3af 8000 	nop.w
 8008966:	1c42      	adds	r2, r0, #1
 8008968:	4606      	mov	r6, r0
 800896a:	d1d6      	bne.n	800891a <_svfiprintf_r+0x176>
 800896c:	89ab      	ldrh	r3, [r5, #12]
 800896e:	065b      	lsls	r3, r3, #25
 8008970:	f53f af2c 	bmi.w	80087cc <_svfiprintf_r+0x28>
 8008974:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008976:	b01d      	add	sp, #116	; 0x74
 8008978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800897c:	ab03      	add	r3, sp, #12
 800897e:	9300      	str	r3, [sp, #0]
 8008980:	462a      	mov	r2, r5
 8008982:	4b06      	ldr	r3, [pc, #24]	; (800899c <_svfiprintf_r+0x1f8>)
 8008984:	a904      	add	r1, sp, #16
 8008986:	4638      	mov	r0, r7
 8008988:	f000 f87a 	bl	8008a80 <_printf_i>
 800898c:	e7eb      	b.n	8008966 <_svfiprintf_r+0x1c2>
 800898e:	bf00      	nop
 8008990:	08009585 	.word	0x08009585
 8008994:	0800958f 	.word	0x0800958f
 8008998:	00000000 	.word	0x00000000
 800899c:	080086ed 	.word	0x080086ed
 80089a0:	0800958b 	.word	0x0800958b

080089a4 <_printf_common>:
 80089a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089a8:	4616      	mov	r6, r2
 80089aa:	4699      	mov	r9, r3
 80089ac:	688a      	ldr	r2, [r1, #8]
 80089ae:	690b      	ldr	r3, [r1, #16]
 80089b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089b4:	4293      	cmp	r3, r2
 80089b6:	bfb8      	it	lt
 80089b8:	4613      	movlt	r3, r2
 80089ba:	6033      	str	r3, [r6, #0]
 80089bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089c0:	4607      	mov	r7, r0
 80089c2:	460c      	mov	r4, r1
 80089c4:	b10a      	cbz	r2, 80089ca <_printf_common+0x26>
 80089c6:	3301      	adds	r3, #1
 80089c8:	6033      	str	r3, [r6, #0]
 80089ca:	6823      	ldr	r3, [r4, #0]
 80089cc:	0699      	lsls	r1, r3, #26
 80089ce:	bf42      	ittt	mi
 80089d0:	6833      	ldrmi	r3, [r6, #0]
 80089d2:	3302      	addmi	r3, #2
 80089d4:	6033      	strmi	r3, [r6, #0]
 80089d6:	6825      	ldr	r5, [r4, #0]
 80089d8:	f015 0506 	ands.w	r5, r5, #6
 80089dc:	d106      	bne.n	80089ec <_printf_common+0x48>
 80089de:	f104 0a19 	add.w	sl, r4, #25
 80089e2:	68e3      	ldr	r3, [r4, #12]
 80089e4:	6832      	ldr	r2, [r6, #0]
 80089e6:	1a9b      	subs	r3, r3, r2
 80089e8:	42ab      	cmp	r3, r5
 80089ea:	dc26      	bgt.n	8008a3a <_printf_common+0x96>
 80089ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80089f0:	1e13      	subs	r3, r2, #0
 80089f2:	6822      	ldr	r2, [r4, #0]
 80089f4:	bf18      	it	ne
 80089f6:	2301      	movne	r3, #1
 80089f8:	0692      	lsls	r2, r2, #26
 80089fa:	d42b      	bmi.n	8008a54 <_printf_common+0xb0>
 80089fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a00:	4649      	mov	r1, r9
 8008a02:	4638      	mov	r0, r7
 8008a04:	47c0      	blx	r8
 8008a06:	3001      	adds	r0, #1
 8008a08:	d01e      	beq.n	8008a48 <_printf_common+0xa4>
 8008a0a:	6823      	ldr	r3, [r4, #0]
 8008a0c:	68e5      	ldr	r5, [r4, #12]
 8008a0e:	6832      	ldr	r2, [r6, #0]
 8008a10:	f003 0306 	and.w	r3, r3, #6
 8008a14:	2b04      	cmp	r3, #4
 8008a16:	bf08      	it	eq
 8008a18:	1aad      	subeq	r5, r5, r2
 8008a1a:	68a3      	ldr	r3, [r4, #8]
 8008a1c:	6922      	ldr	r2, [r4, #16]
 8008a1e:	bf0c      	ite	eq
 8008a20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a24:	2500      	movne	r5, #0
 8008a26:	4293      	cmp	r3, r2
 8008a28:	bfc4      	itt	gt
 8008a2a:	1a9b      	subgt	r3, r3, r2
 8008a2c:	18ed      	addgt	r5, r5, r3
 8008a2e:	2600      	movs	r6, #0
 8008a30:	341a      	adds	r4, #26
 8008a32:	42b5      	cmp	r5, r6
 8008a34:	d11a      	bne.n	8008a6c <_printf_common+0xc8>
 8008a36:	2000      	movs	r0, #0
 8008a38:	e008      	b.n	8008a4c <_printf_common+0xa8>
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	4652      	mov	r2, sl
 8008a3e:	4649      	mov	r1, r9
 8008a40:	4638      	mov	r0, r7
 8008a42:	47c0      	blx	r8
 8008a44:	3001      	adds	r0, #1
 8008a46:	d103      	bne.n	8008a50 <_printf_common+0xac>
 8008a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a50:	3501      	adds	r5, #1
 8008a52:	e7c6      	b.n	80089e2 <_printf_common+0x3e>
 8008a54:	18e1      	adds	r1, r4, r3
 8008a56:	1c5a      	adds	r2, r3, #1
 8008a58:	2030      	movs	r0, #48	; 0x30
 8008a5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a5e:	4422      	add	r2, r4
 8008a60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a68:	3302      	adds	r3, #2
 8008a6a:	e7c7      	b.n	80089fc <_printf_common+0x58>
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	4622      	mov	r2, r4
 8008a70:	4649      	mov	r1, r9
 8008a72:	4638      	mov	r0, r7
 8008a74:	47c0      	blx	r8
 8008a76:	3001      	adds	r0, #1
 8008a78:	d0e6      	beq.n	8008a48 <_printf_common+0xa4>
 8008a7a:	3601      	adds	r6, #1
 8008a7c:	e7d9      	b.n	8008a32 <_printf_common+0x8e>
	...

08008a80 <_printf_i>:
 8008a80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a84:	7e0f      	ldrb	r7, [r1, #24]
 8008a86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a88:	2f78      	cmp	r7, #120	; 0x78
 8008a8a:	4691      	mov	r9, r2
 8008a8c:	4680      	mov	r8, r0
 8008a8e:	460c      	mov	r4, r1
 8008a90:	469a      	mov	sl, r3
 8008a92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a96:	d807      	bhi.n	8008aa8 <_printf_i+0x28>
 8008a98:	2f62      	cmp	r7, #98	; 0x62
 8008a9a:	d80a      	bhi.n	8008ab2 <_printf_i+0x32>
 8008a9c:	2f00      	cmp	r7, #0
 8008a9e:	f000 80d8 	beq.w	8008c52 <_printf_i+0x1d2>
 8008aa2:	2f58      	cmp	r7, #88	; 0x58
 8008aa4:	f000 80a3 	beq.w	8008bee <_printf_i+0x16e>
 8008aa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008aac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ab0:	e03a      	b.n	8008b28 <_printf_i+0xa8>
 8008ab2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ab6:	2b15      	cmp	r3, #21
 8008ab8:	d8f6      	bhi.n	8008aa8 <_printf_i+0x28>
 8008aba:	a101      	add	r1, pc, #4	; (adr r1, 8008ac0 <_printf_i+0x40>)
 8008abc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ac0:	08008b19 	.word	0x08008b19
 8008ac4:	08008b2d 	.word	0x08008b2d
 8008ac8:	08008aa9 	.word	0x08008aa9
 8008acc:	08008aa9 	.word	0x08008aa9
 8008ad0:	08008aa9 	.word	0x08008aa9
 8008ad4:	08008aa9 	.word	0x08008aa9
 8008ad8:	08008b2d 	.word	0x08008b2d
 8008adc:	08008aa9 	.word	0x08008aa9
 8008ae0:	08008aa9 	.word	0x08008aa9
 8008ae4:	08008aa9 	.word	0x08008aa9
 8008ae8:	08008aa9 	.word	0x08008aa9
 8008aec:	08008c39 	.word	0x08008c39
 8008af0:	08008b5d 	.word	0x08008b5d
 8008af4:	08008c1b 	.word	0x08008c1b
 8008af8:	08008aa9 	.word	0x08008aa9
 8008afc:	08008aa9 	.word	0x08008aa9
 8008b00:	08008c5b 	.word	0x08008c5b
 8008b04:	08008aa9 	.word	0x08008aa9
 8008b08:	08008b5d 	.word	0x08008b5d
 8008b0c:	08008aa9 	.word	0x08008aa9
 8008b10:	08008aa9 	.word	0x08008aa9
 8008b14:	08008c23 	.word	0x08008c23
 8008b18:	682b      	ldr	r3, [r5, #0]
 8008b1a:	1d1a      	adds	r2, r3, #4
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	602a      	str	r2, [r5, #0]
 8008b20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e0a3      	b.n	8008c74 <_printf_i+0x1f4>
 8008b2c:	6820      	ldr	r0, [r4, #0]
 8008b2e:	6829      	ldr	r1, [r5, #0]
 8008b30:	0606      	lsls	r6, r0, #24
 8008b32:	f101 0304 	add.w	r3, r1, #4
 8008b36:	d50a      	bpl.n	8008b4e <_printf_i+0xce>
 8008b38:	680e      	ldr	r6, [r1, #0]
 8008b3a:	602b      	str	r3, [r5, #0]
 8008b3c:	2e00      	cmp	r6, #0
 8008b3e:	da03      	bge.n	8008b48 <_printf_i+0xc8>
 8008b40:	232d      	movs	r3, #45	; 0x2d
 8008b42:	4276      	negs	r6, r6
 8008b44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b48:	485e      	ldr	r0, [pc, #376]	; (8008cc4 <_printf_i+0x244>)
 8008b4a:	230a      	movs	r3, #10
 8008b4c:	e019      	b.n	8008b82 <_printf_i+0x102>
 8008b4e:	680e      	ldr	r6, [r1, #0]
 8008b50:	602b      	str	r3, [r5, #0]
 8008b52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b56:	bf18      	it	ne
 8008b58:	b236      	sxthne	r6, r6
 8008b5a:	e7ef      	b.n	8008b3c <_printf_i+0xbc>
 8008b5c:	682b      	ldr	r3, [r5, #0]
 8008b5e:	6820      	ldr	r0, [r4, #0]
 8008b60:	1d19      	adds	r1, r3, #4
 8008b62:	6029      	str	r1, [r5, #0]
 8008b64:	0601      	lsls	r1, r0, #24
 8008b66:	d501      	bpl.n	8008b6c <_printf_i+0xec>
 8008b68:	681e      	ldr	r6, [r3, #0]
 8008b6a:	e002      	b.n	8008b72 <_printf_i+0xf2>
 8008b6c:	0646      	lsls	r6, r0, #25
 8008b6e:	d5fb      	bpl.n	8008b68 <_printf_i+0xe8>
 8008b70:	881e      	ldrh	r6, [r3, #0]
 8008b72:	4854      	ldr	r0, [pc, #336]	; (8008cc4 <_printf_i+0x244>)
 8008b74:	2f6f      	cmp	r7, #111	; 0x6f
 8008b76:	bf0c      	ite	eq
 8008b78:	2308      	moveq	r3, #8
 8008b7a:	230a      	movne	r3, #10
 8008b7c:	2100      	movs	r1, #0
 8008b7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b82:	6865      	ldr	r5, [r4, #4]
 8008b84:	60a5      	str	r5, [r4, #8]
 8008b86:	2d00      	cmp	r5, #0
 8008b88:	bfa2      	ittt	ge
 8008b8a:	6821      	ldrge	r1, [r4, #0]
 8008b8c:	f021 0104 	bicge.w	r1, r1, #4
 8008b90:	6021      	strge	r1, [r4, #0]
 8008b92:	b90e      	cbnz	r6, 8008b98 <_printf_i+0x118>
 8008b94:	2d00      	cmp	r5, #0
 8008b96:	d04d      	beq.n	8008c34 <_printf_i+0x1b4>
 8008b98:	4615      	mov	r5, r2
 8008b9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b9e:	fb03 6711 	mls	r7, r3, r1, r6
 8008ba2:	5dc7      	ldrb	r7, [r0, r7]
 8008ba4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ba8:	4637      	mov	r7, r6
 8008baa:	42bb      	cmp	r3, r7
 8008bac:	460e      	mov	r6, r1
 8008bae:	d9f4      	bls.n	8008b9a <_printf_i+0x11a>
 8008bb0:	2b08      	cmp	r3, #8
 8008bb2:	d10b      	bne.n	8008bcc <_printf_i+0x14c>
 8008bb4:	6823      	ldr	r3, [r4, #0]
 8008bb6:	07de      	lsls	r6, r3, #31
 8008bb8:	d508      	bpl.n	8008bcc <_printf_i+0x14c>
 8008bba:	6923      	ldr	r3, [r4, #16]
 8008bbc:	6861      	ldr	r1, [r4, #4]
 8008bbe:	4299      	cmp	r1, r3
 8008bc0:	bfde      	ittt	le
 8008bc2:	2330      	movle	r3, #48	; 0x30
 8008bc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008bc8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008bcc:	1b52      	subs	r2, r2, r5
 8008bce:	6122      	str	r2, [r4, #16]
 8008bd0:	f8cd a000 	str.w	sl, [sp]
 8008bd4:	464b      	mov	r3, r9
 8008bd6:	aa03      	add	r2, sp, #12
 8008bd8:	4621      	mov	r1, r4
 8008bda:	4640      	mov	r0, r8
 8008bdc:	f7ff fee2 	bl	80089a4 <_printf_common>
 8008be0:	3001      	adds	r0, #1
 8008be2:	d14c      	bne.n	8008c7e <_printf_i+0x1fe>
 8008be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008be8:	b004      	add	sp, #16
 8008bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bee:	4835      	ldr	r0, [pc, #212]	; (8008cc4 <_printf_i+0x244>)
 8008bf0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008bf4:	6829      	ldr	r1, [r5, #0]
 8008bf6:	6823      	ldr	r3, [r4, #0]
 8008bf8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008bfc:	6029      	str	r1, [r5, #0]
 8008bfe:	061d      	lsls	r5, r3, #24
 8008c00:	d514      	bpl.n	8008c2c <_printf_i+0x1ac>
 8008c02:	07df      	lsls	r7, r3, #31
 8008c04:	bf44      	itt	mi
 8008c06:	f043 0320 	orrmi.w	r3, r3, #32
 8008c0a:	6023      	strmi	r3, [r4, #0]
 8008c0c:	b91e      	cbnz	r6, 8008c16 <_printf_i+0x196>
 8008c0e:	6823      	ldr	r3, [r4, #0]
 8008c10:	f023 0320 	bic.w	r3, r3, #32
 8008c14:	6023      	str	r3, [r4, #0]
 8008c16:	2310      	movs	r3, #16
 8008c18:	e7b0      	b.n	8008b7c <_printf_i+0xfc>
 8008c1a:	6823      	ldr	r3, [r4, #0]
 8008c1c:	f043 0320 	orr.w	r3, r3, #32
 8008c20:	6023      	str	r3, [r4, #0]
 8008c22:	2378      	movs	r3, #120	; 0x78
 8008c24:	4828      	ldr	r0, [pc, #160]	; (8008cc8 <_printf_i+0x248>)
 8008c26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c2a:	e7e3      	b.n	8008bf4 <_printf_i+0x174>
 8008c2c:	0659      	lsls	r1, r3, #25
 8008c2e:	bf48      	it	mi
 8008c30:	b2b6      	uxthmi	r6, r6
 8008c32:	e7e6      	b.n	8008c02 <_printf_i+0x182>
 8008c34:	4615      	mov	r5, r2
 8008c36:	e7bb      	b.n	8008bb0 <_printf_i+0x130>
 8008c38:	682b      	ldr	r3, [r5, #0]
 8008c3a:	6826      	ldr	r6, [r4, #0]
 8008c3c:	6961      	ldr	r1, [r4, #20]
 8008c3e:	1d18      	adds	r0, r3, #4
 8008c40:	6028      	str	r0, [r5, #0]
 8008c42:	0635      	lsls	r5, r6, #24
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	d501      	bpl.n	8008c4c <_printf_i+0x1cc>
 8008c48:	6019      	str	r1, [r3, #0]
 8008c4a:	e002      	b.n	8008c52 <_printf_i+0x1d2>
 8008c4c:	0670      	lsls	r0, r6, #25
 8008c4e:	d5fb      	bpl.n	8008c48 <_printf_i+0x1c8>
 8008c50:	8019      	strh	r1, [r3, #0]
 8008c52:	2300      	movs	r3, #0
 8008c54:	6123      	str	r3, [r4, #16]
 8008c56:	4615      	mov	r5, r2
 8008c58:	e7ba      	b.n	8008bd0 <_printf_i+0x150>
 8008c5a:	682b      	ldr	r3, [r5, #0]
 8008c5c:	1d1a      	adds	r2, r3, #4
 8008c5e:	602a      	str	r2, [r5, #0]
 8008c60:	681d      	ldr	r5, [r3, #0]
 8008c62:	6862      	ldr	r2, [r4, #4]
 8008c64:	2100      	movs	r1, #0
 8008c66:	4628      	mov	r0, r5
 8008c68:	f7f7 faba 	bl	80001e0 <memchr>
 8008c6c:	b108      	cbz	r0, 8008c72 <_printf_i+0x1f2>
 8008c6e:	1b40      	subs	r0, r0, r5
 8008c70:	6060      	str	r0, [r4, #4]
 8008c72:	6863      	ldr	r3, [r4, #4]
 8008c74:	6123      	str	r3, [r4, #16]
 8008c76:	2300      	movs	r3, #0
 8008c78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c7c:	e7a8      	b.n	8008bd0 <_printf_i+0x150>
 8008c7e:	6923      	ldr	r3, [r4, #16]
 8008c80:	462a      	mov	r2, r5
 8008c82:	4649      	mov	r1, r9
 8008c84:	4640      	mov	r0, r8
 8008c86:	47d0      	blx	sl
 8008c88:	3001      	adds	r0, #1
 8008c8a:	d0ab      	beq.n	8008be4 <_printf_i+0x164>
 8008c8c:	6823      	ldr	r3, [r4, #0]
 8008c8e:	079b      	lsls	r3, r3, #30
 8008c90:	d413      	bmi.n	8008cba <_printf_i+0x23a>
 8008c92:	68e0      	ldr	r0, [r4, #12]
 8008c94:	9b03      	ldr	r3, [sp, #12]
 8008c96:	4298      	cmp	r0, r3
 8008c98:	bfb8      	it	lt
 8008c9a:	4618      	movlt	r0, r3
 8008c9c:	e7a4      	b.n	8008be8 <_printf_i+0x168>
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	4632      	mov	r2, r6
 8008ca2:	4649      	mov	r1, r9
 8008ca4:	4640      	mov	r0, r8
 8008ca6:	47d0      	blx	sl
 8008ca8:	3001      	adds	r0, #1
 8008caa:	d09b      	beq.n	8008be4 <_printf_i+0x164>
 8008cac:	3501      	adds	r5, #1
 8008cae:	68e3      	ldr	r3, [r4, #12]
 8008cb0:	9903      	ldr	r1, [sp, #12]
 8008cb2:	1a5b      	subs	r3, r3, r1
 8008cb4:	42ab      	cmp	r3, r5
 8008cb6:	dcf2      	bgt.n	8008c9e <_printf_i+0x21e>
 8008cb8:	e7eb      	b.n	8008c92 <_printf_i+0x212>
 8008cba:	2500      	movs	r5, #0
 8008cbc:	f104 0619 	add.w	r6, r4, #25
 8008cc0:	e7f5      	b.n	8008cae <_printf_i+0x22e>
 8008cc2:	bf00      	nop
 8008cc4:	08009596 	.word	0x08009596
 8008cc8:	080095a7 	.word	0x080095a7

08008ccc <__retarget_lock_acquire_recursive>:
 8008ccc:	4770      	bx	lr

08008cce <__retarget_lock_release_recursive>:
 8008cce:	4770      	bx	lr

08008cd0 <memcpy>:
 8008cd0:	440a      	add	r2, r1
 8008cd2:	4291      	cmp	r1, r2
 8008cd4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008cd8:	d100      	bne.n	8008cdc <memcpy+0xc>
 8008cda:	4770      	bx	lr
 8008cdc:	b510      	push	{r4, lr}
 8008cde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ce2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ce6:	4291      	cmp	r1, r2
 8008ce8:	d1f9      	bne.n	8008cde <memcpy+0xe>
 8008cea:	bd10      	pop	{r4, pc}

08008cec <memmove>:
 8008cec:	4288      	cmp	r0, r1
 8008cee:	b510      	push	{r4, lr}
 8008cf0:	eb01 0402 	add.w	r4, r1, r2
 8008cf4:	d902      	bls.n	8008cfc <memmove+0x10>
 8008cf6:	4284      	cmp	r4, r0
 8008cf8:	4623      	mov	r3, r4
 8008cfa:	d807      	bhi.n	8008d0c <memmove+0x20>
 8008cfc:	1e43      	subs	r3, r0, #1
 8008cfe:	42a1      	cmp	r1, r4
 8008d00:	d008      	beq.n	8008d14 <memmove+0x28>
 8008d02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d0a:	e7f8      	b.n	8008cfe <memmove+0x12>
 8008d0c:	4402      	add	r2, r0
 8008d0e:	4601      	mov	r1, r0
 8008d10:	428a      	cmp	r2, r1
 8008d12:	d100      	bne.n	8008d16 <memmove+0x2a>
 8008d14:	bd10      	pop	{r4, pc}
 8008d16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d1e:	e7f7      	b.n	8008d10 <memmove+0x24>

08008d20 <_realloc_r>:
 8008d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d24:	4680      	mov	r8, r0
 8008d26:	4614      	mov	r4, r2
 8008d28:	460e      	mov	r6, r1
 8008d2a:	b921      	cbnz	r1, 8008d36 <_realloc_r+0x16>
 8008d2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d30:	4611      	mov	r1, r2
 8008d32:	f7ff bc11 	b.w	8008558 <_malloc_r>
 8008d36:	b92a      	cbnz	r2, 8008d44 <_realloc_r+0x24>
 8008d38:	f7ff fba2 	bl	8008480 <_free_r>
 8008d3c:	4625      	mov	r5, r4
 8008d3e:	4628      	mov	r0, r5
 8008d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d44:	f000 f81b 	bl	8008d7e <_malloc_usable_size_r>
 8008d48:	4284      	cmp	r4, r0
 8008d4a:	4607      	mov	r7, r0
 8008d4c:	d802      	bhi.n	8008d54 <_realloc_r+0x34>
 8008d4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d52:	d812      	bhi.n	8008d7a <_realloc_r+0x5a>
 8008d54:	4621      	mov	r1, r4
 8008d56:	4640      	mov	r0, r8
 8008d58:	f7ff fbfe 	bl	8008558 <_malloc_r>
 8008d5c:	4605      	mov	r5, r0
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	d0ed      	beq.n	8008d3e <_realloc_r+0x1e>
 8008d62:	42bc      	cmp	r4, r7
 8008d64:	4622      	mov	r2, r4
 8008d66:	4631      	mov	r1, r6
 8008d68:	bf28      	it	cs
 8008d6a:	463a      	movcs	r2, r7
 8008d6c:	f7ff ffb0 	bl	8008cd0 <memcpy>
 8008d70:	4631      	mov	r1, r6
 8008d72:	4640      	mov	r0, r8
 8008d74:	f7ff fb84 	bl	8008480 <_free_r>
 8008d78:	e7e1      	b.n	8008d3e <_realloc_r+0x1e>
 8008d7a:	4635      	mov	r5, r6
 8008d7c:	e7df      	b.n	8008d3e <_realloc_r+0x1e>

08008d7e <_malloc_usable_size_r>:
 8008d7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d82:	1f18      	subs	r0, r3, #4
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	bfbc      	itt	lt
 8008d88:	580b      	ldrlt	r3, [r1, r0]
 8008d8a:	18c0      	addlt	r0, r0, r3
 8008d8c:	4770      	bx	lr
	...

08008d90 <_init>:
 8008d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d92:	bf00      	nop
 8008d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d96:	bc08      	pop	{r3}
 8008d98:	469e      	mov	lr, r3
 8008d9a:	4770      	bx	lr

08008d9c <_fini>:
 8008d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d9e:	bf00      	nop
 8008da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008da2:	bc08      	pop	{r3}
 8008da4:	469e      	mov	lr, r3
 8008da6:	4770      	bx	lr
