
wall-e.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000820  0800978c  0800978c  0001978c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fac  08009fac  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08009fac  08009fac  00019fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fb4  08009fb4  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fb4  08009fb4  00019fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fb8  08009fb8  00019fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08009fbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000087c  20000094  0800a050  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000910  0800a050  00020910  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b826  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f1d  00000000  00000000  0003b8ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  0003f808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001580  00000000  00000000  00040f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001abd8  00000000  00000000  00042498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bc81  00000000  00000000  0005d070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009733a  00000000  00000000  00078cf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011002b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006738  00000000  00000000  0011007c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000094 	.word	0x20000094
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009774 	.word	0x08009774

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000098 	.word	0x20000098
 80001dc:	08009774 	.word	0x08009774

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a70:	f000 b974 	b.w	8000d5c <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468e      	mov	lr, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14d      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4694      	mov	ip, r2
 8000a9e:	d969      	bls.n	8000b74 <__udivmoddi4+0xe8>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b152      	cbz	r2, 8000abc <__udivmoddi4+0x30>
 8000aa6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aaa:	f1c2 0120 	rsb	r1, r2, #32
 8000aae:	fa20 f101 	lsr.w	r1, r0, r1
 8000ab2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aba:	4094      	lsls	r4, r2
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	0c21      	lsrs	r1, r4, #16
 8000ac2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ac6:	fa1f f78c 	uxth.w	r7, ip
 8000aca:	fb08 e316 	mls	r3, r8, r6, lr
 8000ace:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ad2:	fb06 f107 	mul.w	r1, r6, r7
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000ae2:	f080 811f 	bcs.w	8000d24 <__udivmoddi4+0x298>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 811c 	bls.w	8000d24 <__udivmoddi4+0x298>
 8000aec:	3e02      	subs	r6, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a5b      	subs	r3, r3, r1
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af8:	fb08 3310 	mls	r3, r8, r0, r3
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	fb00 f707 	mul.w	r7, r0, r7
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x92>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b10:	f080 810a 	bcs.w	8000d28 <__udivmoddi4+0x29c>
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	f240 8107 	bls.w	8000d28 <__udivmoddi4+0x29c>
 8000b1a:	4464      	add	r4, ip
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	1be4      	subs	r4, r4, r7
 8000b24:	2600      	movs	r6, #0
 8000b26:	b11d      	cbz	r5, 8000b30 <__udivmoddi4+0xa4>
 8000b28:	40d4      	lsrs	r4, r2
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d909      	bls.n	8000b4e <__udivmoddi4+0xc2>
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	f000 80ef 	beq.w	8000d1e <__udivmoddi4+0x292>
 8000b40:	2600      	movs	r6, #0
 8000b42:	e9c5 0100 	strd	r0, r1, [r5]
 8000b46:	4630      	mov	r0, r6
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	fab3 f683 	clz	r6, r3
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d14a      	bne.n	8000bec <__udivmoddi4+0x160>
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d302      	bcc.n	8000b60 <__udivmoddi4+0xd4>
 8000b5a:	4282      	cmp	r2, r0
 8000b5c:	f200 80f9 	bhi.w	8000d52 <__udivmoddi4+0x2c6>
 8000b60:	1a84      	subs	r4, r0, r2
 8000b62:	eb61 0303 	sbc.w	r3, r1, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	469e      	mov	lr, r3
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d0e0      	beq.n	8000b30 <__udivmoddi4+0xa4>
 8000b6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b72:	e7dd      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000b74:	b902      	cbnz	r2, 8000b78 <__udivmoddi4+0xec>
 8000b76:	deff      	udf	#255	; 0xff
 8000b78:	fab2 f282 	clz	r2, r2
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	f040 8092 	bne.w	8000ca6 <__udivmoddi4+0x21a>
 8000b82:	eba1 010c 	sub.w	r1, r1, ip
 8000b86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8a:	fa1f fe8c 	uxth.w	lr, ip
 8000b8e:	2601      	movs	r6, #1
 8000b90:	0c20      	lsrs	r0, r4, #16
 8000b92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b96:	fb07 1113 	mls	r1, r7, r3, r1
 8000b9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b9e:	fb0e f003 	mul.w	r0, lr, r3
 8000ba2:	4288      	cmp	r0, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x12c>
 8000ba6:	eb1c 0101 	adds.w	r1, ip, r1
 8000baa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x12a>
 8000bb0:	4288      	cmp	r0, r1
 8000bb2:	f200 80cb 	bhi.w	8000d4c <__udivmoddi4+0x2c0>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	1a09      	subs	r1, r1, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bcc:	45a6      	cmp	lr, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x156>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x154>
 8000bda:	45a6      	cmp	lr, r4
 8000bdc:	f200 80bb 	bhi.w	8000d56 <__udivmoddi4+0x2ca>
 8000be0:	4608      	mov	r0, r1
 8000be2:	eba4 040e 	sub.w	r4, r4, lr
 8000be6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bea:	e79c      	b.n	8000b26 <__udivmoddi4+0x9a>
 8000bec:	f1c6 0720 	rsb	r7, r6, #32
 8000bf0:	40b3      	lsls	r3, r6
 8000bf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000c02:	431c      	orrs	r4, r3
 8000c04:	40f9      	lsrs	r1, r7
 8000c06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c12:	0c20      	lsrs	r0, r4, #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fb09 1118 	mls	r1, r9, r8, r1
 8000c1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c20:	fb08 f00e 	mul.w	r0, r8, lr
 8000c24:	4288      	cmp	r0, r1
 8000c26:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b8>
 8000c2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c30:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c34:	f080 8088 	bcs.w	8000d48 <__udivmoddi4+0x2bc>
 8000c38:	4288      	cmp	r0, r1
 8000c3a:	f240 8085 	bls.w	8000d48 <__udivmoddi4+0x2bc>
 8000c3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1a09      	subs	r1, r1, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c58:	458e      	cmp	lr, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1e2>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000c64:	d26c      	bcs.n	8000d40 <__udivmoddi4+0x2b4>
 8000c66:	458e      	cmp	lr, r1
 8000c68:	d96a      	bls.n	8000d40 <__udivmoddi4+0x2b4>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c72:	fba0 9402 	umull	r9, r4, r0, r2
 8000c76:	eba1 010e 	sub.w	r1, r1, lr
 8000c7a:	42a1      	cmp	r1, r4
 8000c7c:	46c8      	mov	r8, r9
 8000c7e:	46a6      	mov	lr, r4
 8000c80:	d356      	bcc.n	8000d30 <__udivmoddi4+0x2a4>
 8000c82:	d053      	beq.n	8000d2c <__udivmoddi4+0x2a0>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x212>
 8000c86:	ebb3 0208 	subs.w	r2, r3, r8
 8000c8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c92:	fa22 f306 	lsr.w	r3, r2, r6
 8000c96:	40f1      	lsrs	r1, r6
 8000c98:	431f      	orrs	r7, r3
 8000c9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	40d8      	lsrs	r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	4301      	orrs	r1, r0
 8000cb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cc4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc8:	0c0b      	lsrs	r3, r1, #16
 8000cca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cce:	fb00 f60e 	mul.w	r6, r0, lr
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x260>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ce2:	d22f      	bcs.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce4:	429e      	cmp	r6, r3
 8000ce6:	d92d      	bls.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	b289      	uxth	r1, r1
 8000cf0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cf4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfc:	fb06 f30e 	mul.w	r3, r6, lr
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x28a>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d0c:	d216      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d914      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000d12:	3e02      	subs	r6, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	1ac9      	subs	r1, r1, r3
 8000d18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d1c:	e738      	b.n	8000b90 <__udivmoddi4+0x104>
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e705      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e3      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6f8      	b.n	8000b1e <__udivmoddi4+0x92>
 8000d2c:	454b      	cmp	r3, r9
 8000d2e:	d2a9      	bcs.n	8000c84 <__udivmoddi4+0x1f8>
 8000d30:	ebb9 0802 	subs.w	r8, r9, r2
 8000d34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7a3      	b.n	8000c84 <__udivmoddi4+0x1f8>
 8000d3c:	4646      	mov	r6, r8
 8000d3e:	e7ea      	b.n	8000d16 <__udivmoddi4+0x28a>
 8000d40:	4620      	mov	r0, r4
 8000d42:	e794      	b.n	8000c6e <__udivmoddi4+0x1e2>
 8000d44:	4640      	mov	r0, r8
 8000d46:	e7d1      	b.n	8000cec <__udivmoddi4+0x260>
 8000d48:	46d0      	mov	r8, sl
 8000d4a:	e77b      	b.n	8000c44 <__udivmoddi4+0x1b8>
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	4461      	add	r1, ip
 8000d50:	e732      	b.n	8000bb8 <__udivmoddi4+0x12c>
 8000d52:	4630      	mov	r0, r6
 8000d54:	e709      	b.n	8000b6a <__udivmoddi4+0xde>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	e742      	b.n	8000be2 <__udivmoddi4+0x156>

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <LCD5110_refresh>:
	LCD5110_canvas_t def_scr;
} LCD5110_display;


inline void LCD5110_refresh(LCD5110_display* lcd_conf)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	LCD5110_refresh_ll(&lcd_conf->hw_conf);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 fbdb 	bl	8001526 <LCD5110_refresh_ll>
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <LCD5110_set_cursor>:
void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf);

// Regarding inline -- C also lcd5110.c.
inline void LCD5110_set_cursor(int x, int y, LCD5110_display* lcd_conf)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
	LCD5110_wset_cursor(x, y, &lcd_conf->def_scr, lcd_conf);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	68b9      	ldr	r1, [r7, #8]
 8000d8e:	68f8      	ldr	r0, [r7, #12]
 8000d90:	f000 f880 	bl	8000e94 <LCD5110_wset_cursor>
}
 8000d94:	bf00      	nop
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <LCD5110_clear_scr>:
inline point_t LCD5110_get_cursor(LCD5110_display* lcd_conf)
{
	return LCD5110_wget_cursor(&lcd_conf->def_scr, lcd_conf);
}

inline void LCD5110_clear_scr(LCD5110_display* lcd_conf){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	LCD5110_clrscr(&lcd_conf->hw_conf);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 f95f 	bl	800106a <LCD5110_clrscr>
	LCD5110_set_cursor(0, 0, lcd_conf);
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	2100      	movs	r1, #0
 8000db0:	2000      	movs	r0, #0
 8000db2:	f7ff ffe1 	bl	8000d78 <LCD5110_set_cursor>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <LCD5110_print>:

void LCD5110_wprint(const char* str, int color,
						LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
int LCD5110_wprintf( LCD5110_display* lcd_conf, int color, LCD5110_canvas_t* win, char *fmt, ...);

inline void LCD5110_print(const char* str, int color, LCD5110_display* lcd_conf){
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b084      	sub	sp, #16
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	60f8      	str	r0, [r7, #12]
 8000dc6:	60b9      	str	r1, [r7, #8]
 8000dc8:	607a      	str	r2, [r7, #4]
	LCD5110_wprint(str, color, &lcd_conf->def_scr, lcd_conf);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68b9      	ldr	r1, [r7, #8]
 8000dd4:	68f8      	ldr	r0, [r7, #12]
 8000dd6:	f000 f893 	bl	8000f00 <LCD5110_wprint>
}
 8000dda:	bf00      	nop
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <LCD5110_wputchar>:
	LCD5110_drawBitmap(px, py, fontpointer + ch * base_font_width,
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}

void LCD5110_wputchar(int px, int py, char ch, int color,
		LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 8000de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000de6:	b08b      	sub	sp, #44	; 0x2c
 8000de8:	af04      	add	r7, sp, #16
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	4613      	mov	r3, r2
 8000df2:	71fb      	strb	r3, [r7, #7]
	if (win->cursor.y < 0 || win->cursor.x < 0)
 8000df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000df6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	db41      	blt.n	8000e82 <LCD5110_wputchar+0x9e>
 8000dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e00:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	db3c      	blt.n	8000e82 <LCD5110_wputchar+0x9e>
		return;
	if ( win->cursor.x + base_font_width > win->frame.width ||
 8000e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e0a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	2306      	movs	r3, #6
 8000e12:	4413      	add	r3, r2
 8000e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e16:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d833      	bhi.n	8000e86 <LCD5110_wputchar+0xa2>
		 win->cursor.y + base_font_height > win->frame.height )
 8000e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e20:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000e24:	461a      	mov	r2, r3
 8000e26:	2308      	movs	r3, #8
 8000e28:	4413      	add	r3, r2
 8000e2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e2c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
	if ( win->cursor.x + base_font_width > win->frame.width ||
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d828      	bhi.n	8000e86 <LCD5110_wputchar+0xa2>
		return;
//! TODO: Print part of char
	const unsigned char *fontpointer = base_font;
 8000e34:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <LCD5110_wputchar+0xac>)
 8000e36:	617b      	str	r3, [r7, #20]
	LCD5110_drawBitmap(px + win->frame.x0, py + win->frame.y0, fontpointer + ch * base_font_width,
 8000e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	18d0      	adds	r0, r2, r3
 8000e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e46:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	18d1      	adds	r1, r2, r3
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	2206      	movs	r2, #6
 8000e54:	fb02 f303 	mul.w	r3, r2, r3
 8000e58:	697a      	ldr	r2, [r7, #20]
 8000e5a:	441a      	add	r2, r3
 8000e5c:	2306      	movs	r3, #6
 8000e5e:	461e      	mov	r6, r3
 8000e60:	2308      	movs	r3, #8
 8000e62:	461c      	mov	r4, r3
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	bf0c      	ite	eq
 8000e6a:	2301      	moveq	r3, #1
 8000e6c:	2300      	movne	r3, #0
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	461d      	mov	r5, r3
 8000e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e74:	9302      	str	r3, [sp, #8]
 8000e76:	9501      	str	r5, [sp, #4]
 8000e78:	9400      	str	r4, [sp, #0]
 8000e7a:	4633      	mov	r3, r6
 8000e7c:	f000 f950 	bl	8001120 <LCD5110_drawBitmap>
 8000e80:	e002      	b.n	8000e88 <LCD5110_wputchar+0xa4>
		return;
 8000e82:	bf00      	nop
 8000e84:	e000      	b.n	8000e88 <LCD5110_wputchar+0xa4>
		return;
 8000e86:	bf00      	nop
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}
 8000e88:	371c      	adds	r7, #28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	08009850 	.word	0x08009850

08000e94 <LCD5110_wset_cursor>:
	LCD5110_wclear_str(x, y, len, color, &lcd_conf->def_scr, lcd_conf);
}


void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
 8000ea0:	603b      	str	r3, [r7, #0]
	win->cursor.x = x;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	b21a      	sxth	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	811a      	strh	r2, [r3, #8]
	win->cursor.y = y;
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	b21a      	sxth	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	815a      	strh	r2, [r3, #10]
}
 8000eb2:	bf00      	nop
 8000eb4:	3714      	adds	r7, #20
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <LCD5110_wendl>:

point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf){
	return win->cursor;
}

void LCD5110_wendl(LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
 8000ec6:	6039      	str	r1, [r7, #0]
	win->cursor.y += base_font_height + 1;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	2308      	movs	r3, #8
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	4413      	add	r3, r2
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	3301      	adds	r3, #1
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	b21a      	sxth	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	815a      	strh	r2, [r3, #10]
	win->cursor.x = 2;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2202      	movs	r2, #2
 8000ee6:	811a      	strh	r2, [r3, #8]
	if (win->refresh_on_endl)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	7b1b      	ldrb	r3, [r3, #12]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d002      	beq.n	8000ef6 <LCD5110_wendl+0x38>
		LCD5110_refresh(lcd_conf);
 8000ef0:	6838      	ldr	r0, [r7, #0]
 8000ef2:	f7ff ff35 	bl	8000d60 <LCD5110_refresh>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <LCD5110_wprint>:



void LCD5110_wprint(const char* str, int color, LCD5110_canvas_t* win,
		LCD5110_display* lcd_conf) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af02      	add	r7, sp, #8
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
 8000f0c:	603b      	str	r3, [r7, #0]
	while (*str != 0) {
 8000f0e:	e053      	b.n	8000fb8 <LCD5110_wprint+0xb8>
		if (*str != '\n') {
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b0a      	cmp	r3, #10
 8000f16:	d010      	beq.n	8000f3a <LCD5110_wprint+0x3a>
			LCD5110_wputchar(win->cursor.x, win->cursor.y, *str, color, win, lcd_conf);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000f26:	4619      	mov	r1, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	781a      	ldrb	r2, [r3, #0]
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	9301      	str	r3, [sp, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	f7ff ff55 	bl	8000de4 <LCD5110_wputchar>
		}
		win->cursor.x += base_font_width;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	2306      	movs	r3, #6
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	4413      	add	r3, r2
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	b21a      	sxth	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	811a      	strh	r2, [r3, #8]

		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000f56:	461a      	mov	r2, r3
 8000f58:	2306      	movs	r3, #6
 8000f5a:	4413      	add	r3, r2
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d904      	bls.n	8000f70 <LCD5110_wprint+0x70>
				*(str + 1) != '\n') || *str == '\n')
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	781b      	ldrb	r3, [r3, #0]
		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 8000f6c:	2b0a      	cmp	r3, #10
 8000f6e:	d103      	bne.n	8000f78 <LCD5110_wprint+0x78>
				*(str + 1) != '\n') || *str == '\n')
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b0a      	cmp	r3, #10
 8000f76:	d111      	bne.n	8000f9c <LCD5110_wprint+0x9c>
		{
			LCD5110_wendl(win, lcd_conf);
 8000f78:	6839      	ldr	r1, [r7, #0]
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff ff9f 	bl	8000ebe <LCD5110_wendl>
			if( isspace(*(str + 1)) )
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	3301      	adds	r3, #1
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	3301      	adds	r3, #1
 8000f88:	4a10      	ldr	r2, [pc, #64]	; (8000fcc <LCD5110_wprint+0xcc>)
 8000f8a:	4413      	add	r3, r2
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	f003 0308 	and.w	r3, r3, #8
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d002      	beq.n	8000f9c <LCD5110_wprint+0x9c>
				++str;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
		}
		if (win->cursor.y + base_font_height > win->frame.height)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	2308      	movs	r3, #8
 8000fa6:	4413      	add	r3, r2
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d807      	bhi.n	8000fc2 <LCD5110_wprint+0xc2>
			break;
		str++;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
	while (*str != 0) {
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1a7      	bne.n	8000f10 <LCD5110_wprint+0x10>

	}
}
 8000fc0:	e000      	b.n	8000fc4 <LCD5110_wprint+0xc4>
			break;
 8000fc2:	bf00      	nop
}
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	08009e78 	.word	0x08009e78

08000fd0 <LCD5110_printf>:
	return res;
}


int LCD5110_printf( LCD5110_display* lcd_conf, int color, char *fmt, ...)
{
 8000fd0:	b40c      	push	{r2, r3}
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b09e      	sub	sp, #120	; 0x78
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	6039      	str	r1, [r7, #0]
	char buf[100];
	int res;

	va_list vargs;
	va_start(vargs, fmt);
 8000fdc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000fe0:	60fb      	str	r3, [r7, #12]

	res = vsnprintf(buf, sizeof(buf), fmt, vargs);
 8000fe2:	f107 0010 	add.w	r0, r7, #16
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000fec:	2164      	movs	r1, #100	; 0x64
 8000fee:	f008 f855 	bl	800909c <vsniprintf>
 8000ff2:	6778      	str	r0, [r7, #116]	; 0x74
	LCD5110_print(buf, color, lcd_conf);
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	6839      	ldr	r1, [r7, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fede 	bl	8000dbe <LCD5110_print>

	if (lcd_conf->def_scr.refresh_on_endl)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 8001008:	2b00      	cmp	r3, #0
 800100a:	d002      	beq.n	8001012 <LCD5110_printf+0x42>
		LCD5110_refresh(lcd_conf);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff fea7 	bl	8000d60 <LCD5110_refresh>

	va_end(vargs);

	return res;
 8001012:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8001014:	4618      	mov	r0, r3
 8001016:	3778      	adds	r7, #120	; 0x78
 8001018:	46bd      	mov	sp, r7
 800101a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800101e:	b002      	add	sp, #8
 8001020:	4770      	bx	lr

08001022 <xy_to_pix>:
	unsigned int adr;
	unsigned char mask;
} pix_coord;

static inline pix_coord xy_to_pix(int x, int y)
{
 8001022:	b480      	push	{r7}
 8001024:	b087      	sub	sp, #28
 8001026:	af00      	add	r7, sp, #0
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
	pix_coord res;
	res.adr = (y >> 3) * LCD_WIDTH + x;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	10db      	asrs	r3, r3, #3
 8001032:	2254      	movs	r2, #84	; 0x54
 8001034:	fb03 f202 	mul.w	r2, r3, r2
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	4413      	add	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
	res.mask = (1 << (y & 0x07));
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f003 0307 	and.w	r3, r3, #7
 8001044:	2201      	movs	r2, #1
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	b2db      	uxtb	r3, r3
 800104c:	753b      	strb	r3, [r7, #20]

	return res;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	461a      	mov	r2, r3
 8001052:	f107 0310 	add.w	r3, r7, #16
 8001056:	e893 0003 	ldmia.w	r3, {r0, r1}
 800105a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	371c      	adds	r7, #28
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <LCD5110_clrscr>:

void LCD5110_clrscr(LCD5110_conf* lcd_conf) {
 800106a:	b480      	push	{r7}
 800106c:	b085      	sub	sp, #20
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	e008      	b.n	800108a <LCD5110_clrscr+0x20>
		lcd_conf->video_buffer[i] = 0;
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	4413      	add	r3, r2
 800107e:	331c      	adds	r3, #28
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	3301      	adds	r3, #1
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8001090:	dbf2      	blt.n	8001078 <LCD5110_clrscr+0xe>
	}
}
 8001092:	bf00      	nop
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <LCD5110_putpix>:
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
		lcd_conf->video_buffer[i] = 0xFF;
	}
}

void LCD5110_putpix(int x, int y, int color, LCD5110_conf* lcd_conf) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
 80010ac:	603b      	str	r3, [r7, #0]
	if ( (x < 0) || (y < 0) || (x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	db31      	blt.n	8001118 <LCD5110_putpix+0x78>
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	db2e      	blt.n	8001118 <LCD5110_putpix+0x78>
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2b53      	cmp	r3, #83	; 0x53
 80010be:	dc2b      	bgt.n	8001118 <LCD5110_putpix+0x78>
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	2b2f      	cmp	r3, #47	; 0x2f
 80010c4:	dc28      	bgt.n	8001118 <LCD5110_putpix+0x78>
		return;
	pix_coord  c = xy_to_pix(x, y);
 80010c6:	f107 0310 	add.w	r3, r7, #16
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	68f9      	ldr	r1, [r7, #12]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ffa7 	bl	8001022 <xy_to_pix>

	if (color)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d00c      	beq.n	80010f4 <LCD5110_putpix+0x54>
		lcd_conf->video_buffer[c.adr] |= c.mask;
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	683a      	ldr	r2, [r7, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	7f19      	ldrb	r1, [r3, #28]
 80010e2:	7d3a      	ldrb	r2, [r7, #20]
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	430a      	orrs	r2, r1
 80010e8:	b2d1      	uxtb	r1, r2
 80010ea:	683a      	ldr	r2, [r7, #0]
 80010ec:	4413      	add	r3, r2
 80010ee:	460a      	mov	r2, r1
 80010f0:	771a      	strb	r2, [r3, #28]
 80010f2:	e012      	b.n	800111a <LCD5110_putpix+0x7a>
	else
		lcd_conf->video_buffer[c.adr] &= ~c.mask;
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	4413      	add	r3, r2
 80010fa:	7f1b      	ldrb	r3, [r3, #28]
 80010fc:	b25a      	sxtb	r2, r3
 80010fe:	7d3b      	ldrb	r3, [r7, #20]
 8001100:	b25b      	sxtb	r3, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	b25b      	sxtb	r3, r3
 8001106:	4013      	ands	r3, r2
 8001108:	b25a      	sxtb	r2, r3
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	b2d1      	uxtb	r1, r2
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	4413      	add	r3, r2
 8001112:	460a      	mov	r2, r1
 8001114:	771a      	strb	r2, [r3, #28]
 8001116:	e000      	b.n	800111a <LCD5110_putpix+0x7a>
		return;
 8001118:	bf00      	nop
}
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <LCD5110_drawBitmap>:
}

//! TODO: optimize! Slow!
//! TODO: add different bitmap modes -- OR/AND/XOR
void LCD5110_drawBitmap(int x, int y, const unsigned char* bitmap, int cols, int rows, int invert, LCD5110_conf* lcd_conf)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
 800112c:	603b      	str	r3, [r7, #0]
	for(int cx=0; cx<cols; cx++)
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
 8001132:	e042      	b.n	80011ba <LCD5110_drawBitmap+0x9a>
	{
		for (int cy=0; cy<rows; cy++)
 8001134:	2300      	movs	r3, #0
 8001136:	61bb      	str	r3, [r7, #24]
 8001138:	e038      	b.n	80011ac <LCD5110_drawBitmap+0x8c>
		{
			unsigned char temp = bitmap[(cy/8)*cols + cx];
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	2b00      	cmp	r3, #0
 800113e:	da00      	bge.n	8001142 <LCD5110_drawBitmap+0x22>
 8001140:	3307      	adds	r3, #7
 8001142:	10db      	asrs	r3, r3, #3
 8001144:	461a      	mov	r2, r3
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	fb03 f202 	mul.w	r2, r3, r2
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	4413      	add	r3, r2
 8001150:	461a      	mov	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	75fb      	strb	r3, [r7, #23]
			temp &= 1<<(cy%8);
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	425a      	negs	r2, r3
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	f002 0207 	and.w	r2, r2, #7
 8001166:	bf58      	it	pl
 8001168:	4253      	negpl	r3, r2
 800116a:	2201      	movs	r2, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	b25a      	sxtb	r2, r3
 8001172:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001176:	4013      	ands	r3, r2
 8001178:	b25b      	sxtb	r3, r3
 800117a:	75fb      	strb	r3, [r7, #23]
			LCD5110_putpix(x+cx, y+cy,  invert ? !temp : temp, lcd_conf);
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	18d0      	adds	r0, r2, r3
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	18d1      	adds	r1, r2, r3
 8001188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800118a:	2b00      	cmp	r3, #0
 800118c:	d007      	beq.n	800119e <LCD5110_drawBitmap+0x7e>
 800118e:	7dfb      	ldrb	r3, [r7, #23]
 8001190:	2b00      	cmp	r3, #0
 8001192:	bf0c      	ite	eq
 8001194:	2301      	moveq	r3, #1
 8001196:	2300      	movne	r3, #0
 8001198:	b2db      	uxtb	r3, r3
 800119a:	461a      	mov	r2, r3
 800119c:	e000      	b.n	80011a0 <LCD5110_drawBitmap+0x80>
 800119e:	7dfa      	ldrb	r2, [r7, #23]
 80011a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011a2:	f7ff ff7d 	bl	80010a0 <LCD5110_putpix>
		for (int cy=0; cy<rows; cy++)
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	3301      	adds	r3, #1
 80011aa:	61bb      	str	r3, [r7, #24]
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b0:	429a      	cmp	r2, r3
 80011b2:	dbc2      	blt.n	800113a <LCD5110_drawBitmap+0x1a>
	for(int cx=0; cx<cols; cx++)
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	3301      	adds	r3, #1
 80011b8:	61fb      	str	r3, [r7, #28]
 80011ba:	69fa      	ldr	r2, [r7, #28]
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	429a      	cmp	r2, r3
 80011c0:	dbb8      	blt.n	8001134 <LCD5110_drawBitmap+0x14>
		}
	}
}
 80011c2:	bf00      	nop
 80011c4:	bf00      	nop
 80011c6:	3720      	adds	r7, #32
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <send_byte_to_LCD5110>:
#include <stdio.h>

#define SUPPRESS_WARNING(x) (void)x

static inline HAL_StatusTypeDef send_byte_to_LCD5110(uint8_t dat, LCD5110_conf* lcd_conf)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	71fb      	strb	r3, [r7, #7]
	//! HAL_SPI_Transmit takes care about waiting transmission to finish.
	//! Details: https://habrahabr.ru/post/276605/ -- do not turn command mode off
	//! before transmission finished. (Check BSY flag before DC_on/off, if directly
	//! manipulating SPIx_DR.
	return HAL_SPI_Transmit(lcd_conf->spi_handle, &dat, 1, 1000);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	6818      	ldr	r0, [r3, #0]
 80011dc:	1df9      	adds	r1, r7, #7
 80011de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e2:	2201      	movs	r2, #1
 80011e4:	f003 fe7d 	bl	8004ee2 <HAL_SPI_Transmit>
 80011e8:	4603      	mov	r3, r0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <send_data_to_LCD5110>:

static inline HAL_StatusTypeDef send_data_to_LCD5110(uint8_t data[], uint16_t size, LCD5110_conf* lcd_conf)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b084      	sub	sp, #16
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	60f8      	str	r0, [r7, #12]
 80011fa:	460b      	mov	r3, r1
 80011fc:	607a      	str	r2, [r7, #4]
 80011fe:	817b      	strh	r3, [r7, #10]
	return HAL_SPI_Transmit(lcd_conf->spi_handle, data, size, 1000);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6818      	ldr	r0, [r3, #0]
 8001204:	897a      	ldrh	r2, [r7, #10]
 8001206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120a:	68f9      	ldr	r1, [r7, #12]
 800120c:	f003 fe69 	bl	8004ee2 <HAL_SPI_Transmit>
 8001210:	4603      	mov	r3, r0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <LCD5110_CE_off>:

static inline void LCD5110_CE_on(LCD5110_conf* lcd_conf) {
	SUPPRESS_WARNING(LCD5110_CE_on);
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_SET);
}
static inline void LCD5110_CE_off(LCD5110_conf* lcd_conf) {
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_RESET);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6898      	ldr	r0, [r3, #8]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	889b      	ldrh	r3, [r3, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	4619      	mov	r1, r3
 800122e:	f001 fbcb 	bl	80029c8 <HAL_GPIO_WritePin>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <LCD5110_DC_on>:
//! Data mode on
static inline void LCD5110_DC_on(LCD5110_conf* lcd_conf) {
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_SET);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6998      	ldr	r0, [r3, #24]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	8a9b      	ldrh	r3, [r3, #20]
 800124a:	2201      	movs	r2, #1
 800124c:	4619      	mov	r1, r3
 800124e:	f001 fbbb 	bl	80029c8 <HAL_GPIO_WritePin>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <LCD5110_DC_off>:
//! Commands mode on
static inline void LCD5110_DC_off(LCD5110_conf* lcd_conf) {
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_RESET);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6998      	ldr	r0, [r3, #24]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	8a9b      	ldrh	r3, [r3, #20]
 800126a:	2200      	movs	r2, #0
 800126c:	4619      	mov	r1, r3
 800126e:	f001 fbab 	bl	80029c8 <HAL_GPIO_WritePin>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <LCD5110_RST_on>:
static inline void LCD5110_RST_on(LCD5110_conf* lcd_conf) {
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_SET);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6918      	ldr	r0, [r3, #16]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	899b      	ldrh	r3, [r3, #12]
 800128a:	2201      	movs	r2, #1
 800128c:	4619      	mov	r1, r3
 800128e:	f001 fb9b 	bl	80029c8 <HAL_GPIO_WritePin>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <LCD5110_RST_off>:
static inline void LCD5110_RST_off(LCD5110_conf* lcd_conf) {
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_RESET);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6918      	ldr	r0, [r3, #16]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	899b      	ldrh	r3, [r3, #12]
 80012aa:	2200      	movs	r2, #0
 80012ac:	4619      	mov	r1, r3
 80012ae:	f001 fb8b 	bl	80029c8 <HAL_GPIO_WritePin>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <LCD5110_set_function>:

#define FN_SET_MASK (1<<5)

//! Code: 0010 0PVH, accepts both 00100PVH and 0PVH, but no other.
static int LCD5110_set_function(uint8_t fn_byte, LCD5110_conf* lcd_conf)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	6039      	str	r1, [r7, #0]
 80012c4:	71fb      	strb	r3, [r7, #7]
	if ( (fn_byte & ~FN_SET_MASK) > 7) //0b111
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	f023 0320 	bic.w	r3, r3, #32
 80012cc:	2b07      	cmp	r3, #7
 80012ce:	dd01      	ble.n	80012d4 <LCD5110_set_function+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_opcode;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e008      	b.n	80012e6 <LCD5110_set_function+0x2c>
	}
	//printf("Seq: %i, dbg: %i \n", fn_byte | FN_SET_MASK, fn_byte );
	send_byte_to_LCD5110(fn_byte | FN_SET_MASK, lcd_conf);
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	f043 0320 	orr.w	r3, r3, #32
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	6839      	ldr	r1, [r7, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff ff74 	bl	80011cc <send_byte_to_LCD5110>
	return LCD5110_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <LCD5110_set_mode_base>:

//! H==0
static int LCD5110_set_mode_base(LCD5110_modes mode_byte, LCD5110_conf* lcd_conf)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	6039      	str	r1, [r7, #0]
 80012f8:	71fb      	strb	r3, [r7, #7]
	if ( (mode_byte & (~LCD5110_INVERTED_MODE) ) != 0) //0b10x0y -- only possible values
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	f023 030d 	bic.w	r3, r3, #13
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <LCD5110_set_mode_base+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_dmode;
 8001304:	2302      	movs	r3, #2
 8001306:	e005      	b.n	8001314 <LCD5110_set_mode_base+0x26>
	}
	//printf("Seq: %i\n", mode_byte);
	send_byte_to_LCD5110(mode_byte, lcd_conf);
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	6839      	ldr	r1, [r7, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff5d 	bl	80011cc <send_byte_to_LCD5110>
	return LCD5110_OK;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <LCD5110_set_voltage_ext>:

#define LCD5110_VOLTAGE_MASK (1<<7)

//! H==1
static int LCD5110_set_voltage_ext(uint8_t voltage, LCD5110_conf* lcd_conf)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	6039      	str	r1, [r7, #0]
 8001326:	71fb      	strb	r3, [r7, #7]
	if ( voltage > 127)
 8001328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132c:	2b00      	cmp	r3, #0
 800132e:	da01      	bge.n	8001334 <LCD5110_set_voltage_ext+0x18>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_voltage;
 8001330:	2303      	movs	r3, #3
 8001332:	e008      	b.n	8001346 <LCD5110_set_voltage_ext+0x2a>
	}
	//printf("Seq: %i\n", voltage | LCD5110_VOLTAGE_MASK);
	send_byte_to_LCD5110(voltage | LCD5110_VOLTAGE_MASK, lcd_conf);
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800133a:	b2db      	uxtb	r3, r3
 800133c:	6839      	ldr	r1, [r7, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff ff44 	bl	80011cc <send_byte_to_LCD5110>
	return LCD5110_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <LCD5110_set_temp_coef_ext>:

#define LCD5110_TEMP_COEFF_MASK (1<<2)
//! H==1
static int LCD5110_set_temp_coef_ext(uint8_t TC, LCD5110_conf* lcd_conf)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	4603      	mov	r3, r0
 8001356:	6039      	str	r1, [r7, #0]
 8001358:	71fb      	strb	r3, [r7, #7]
	if ( TC > 3)
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	2b03      	cmp	r3, #3
 800135e:	d901      	bls.n	8001364 <LCD5110_set_temp_coef_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_TC;
 8001360:	2304      	movs	r3, #4
 8001362:	e008      	b.n	8001376 <LCD5110_set_temp_coef_ext+0x28>
	}
	//printf("Seq: %i\n", TC | LCD5110_TEMP_COEFF_MASK);
	send_byte_to_LCD5110(TC | LCD5110_TEMP_COEFF_MASK, lcd_conf);
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	f043 0304 	orr.w	r3, r3, #4
 800136a:	b2db      	uxtb	r3, r3
 800136c:	6839      	ldr	r1, [r7, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ff2c 	bl	80011cc <send_byte_to_LCD5110>
	return LCD5110_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <LCD5110_set_bias_ext>:
}

#define LCD5110_BIAS_MASK (1<<4)
//! H==1
static int LCD5110_set_bias_ext(uint8_t bias, LCD5110_conf* lcd_conf)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	6039      	str	r1, [r7, #0]
 8001388:	71fb      	strb	r3, [r7, #7]
	if ( bias > 7)
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	2b07      	cmp	r3, #7
 800138e:	d901      	bls.n	8001394 <LCD5110_set_bias_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_bias;
 8001390:	2305      	movs	r3, #5
 8001392:	e008      	b.n	80013a6 <LCD5110_set_bias_ext+0x28>
	}
	//printf("Seq: %i\n", bias | LCD5110_BIAS_MASK);
	send_byte_to_LCD5110(bias | LCD5110_BIAS_MASK, lcd_conf);
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	f043 0310 	orr.w	r3, r3, #16
 800139a:	b2db      	uxtb	r3, r3
 800139c:	6839      	ldr	r1, [r7, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ff14 	bl	80011cc <send_byte_to_LCD5110>
	return LCD5110_OK;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <LCD5110_set_X_base>:
#define LCD5110_SET_Y_BIT 6
#define LCD5110_SET_Y_BIT_MASK (1<<LCD5110_SET_Y_BIT)


static inline int LCD5110_set_X_base(int16_t x, LCD5110_conf* lcd_conf)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	4603      	mov	r3, r0
 80013b6:	6039      	str	r1, [r7, #0]
 80013b8:	80fb      	strh	r3, [r7, #6]
	if(x<0 || x>LCD_WIDTH-1)
 80013ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	db03      	blt.n	80013ca <LCD5110_set_X_base+0x1c>
 80013c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c6:	2b53      	cmp	r3, #83	; 0x53
 80013c8:	dd01      	ble.n	80013ce <LCD5110_set_X_base+0x20>
		return LCD5110_bad_coordinate;
 80013ca:	2307      	movs	r3, #7
 80013cc:	e00a      	b.n	80013e4 <LCD5110_set_X_base+0x36>
	send_byte_to_LCD5110(x | LCD5110_SET_X_BIT_MASK, lcd_conf);
 80013ce:	88fb      	ldrh	r3, [r7, #6]
 80013d0:	b25b      	sxtb	r3, r3
 80013d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013d6:	b25b      	sxtb	r3, r3
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	6839      	ldr	r1, [r7, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fef5 	bl	80011cc <send_byte_to_LCD5110>
	return LCD5110_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <LCD5110_set_Y_base>:

//! Byte addresable!
static inline int LCD5110_set_Y_base(int16_t y, LCD5110_conf* lcd_conf)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	6039      	str	r1, [r7, #0]
 80013f6:	80fb      	strh	r3, [r7, #6]
	if(y<0 || y>LCD_HEIGHT/8-1) // Byte addressable!
 80013f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	db03      	blt.n	8001408 <LCD5110_set_Y_base+0x1c>
 8001400:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001404:	2b05      	cmp	r3, #5
 8001406:	dd01      	ble.n	800140c <LCD5110_set_Y_base+0x20>
		return LCD5110_bad_coordinate;
 8001408:	2307      	movs	r3, #7
 800140a:	e00a      	b.n	8001422 <LCD5110_set_Y_base+0x36>
	send_byte_to_LCD5110(y | LCD5110_SET_Y_BIT_MASK, lcd_conf);
 800140c:	88fb      	ldrh	r3, [r7, #6]
 800140e:	b25b      	sxtb	r3, r3
 8001410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001414:	b25b      	sxtb	r3, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	6839      	ldr	r1, [r7, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fed6 	bl	80011cc <send_byte_to_LCD5110>
	return LCD5110_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <LCD5110_set_XY_base>:

static inline int LCD5110_set_XY_base(int16_t x, int16_t y, LCD5110_conf* lcd_conf)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b084      	sub	sp, #16
 800142e:	af00      	add	r7, sp, #0
 8001430:	4603      	mov	r3, r0
 8001432:	603a      	str	r2, [r7, #0]
 8001434:	80fb      	strh	r3, [r7, #6]
 8001436:	460b      	mov	r3, r1
 8001438:	80bb      	strh	r3, [r7, #4]
	int res;
	res = LCD5110_set_X_base(x, lcd_conf);
 800143a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800143e:	6839      	ldr	r1, [r7, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ffb4 	bl	80013ae <LCD5110_set_X_base>
 8001446:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <LCD5110_set_XY_base+0x28>
		return res;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	e00c      	b.n	800146c <LCD5110_set_XY_base+0x42>
	res = LCD5110_set_Y_base(y, lcd_conf);
 8001452:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001456:	6839      	ldr	r1, [r7, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ffc7 	bl	80013ec <LCD5110_set_Y_base>
 800145e:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <LCD5110_set_XY_base+0x40>
		return res;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	e000      	b.n	800146c <LCD5110_set_XY_base+0x42>

	return LCD5110_OK;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <SPI_enable>:


static inline void SPI_enable(LCD5110_conf* lcd_conf)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	__HAL_SPI_ENABLE( (lcd_conf->spi_handle) );
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800148e:	601a      	str	r2, [r3, #0]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <LCD5110_init>:
int LCD5110_init(LCD5110_conf* 		lcd_conf,
				 LCD5110_modes 		dmode,
				 uint8_t 	  	    voltage,
				 uint8_t		    temp_coeff,
				 uint8_t		    bias
){
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	4608      	mov	r0, r1
 80014a6:	4611      	mov	r1, r2
 80014a8:	461a      	mov	r2, r3
 80014aa:	4603      	mov	r3, r0
 80014ac:	70fb      	strb	r3, [r7, #3]
 80014ae:	460b      	mov	r3, r1
 80014b0:	70bb      	strb	r3, [r7, #2]
 80014b2:	4613      	mov	r3, r2
 80014b4:	707b      	strb	r3, [r7, #1]
	SPI_enable(lcd_conf);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff ffdc 	bl	8001474 <SPI_enable>
	LCD5110_CE_off(lcd_conf);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff feac 	bl	800121a <LCD5110_CE_off>

	//LCD5110_VCC_on();
	LCD5110_RST_off(lcd_conf); // Minimum 100 ns, maximum not limited (tbl. 12 AC CHARACTERISTICS, pic. 16)
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff fee9 	bl	800129a <LCD5110_RST_off>
	volatile int i = 100; // HAL_Delay() too slow, do not want to depend on some delay_us here.
 80014c8:	2364      	movs	r3, #100	; 0x64
 80014ca:	60fb      	str	r3, [r7, #12]
	while (--i){}
 80014cc:	bf00      	nop
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	3b01      	subs	r3, #1
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1fa      	bne.n	80014ce <LCD5110_init+0x32>
	LCD5110_RST_on(lcd_conf);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff fece 	bl	800127a <LCD5110_RST_on>

	LCD5110_DC_off(lcd_conf); // Commands mode on
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff febb 	bl	800125a <LCD5110_DC_off>
	//! Extended commands (bit H==1), horizontal addressing
	LCD5110_set_function(LCD5110_FN_SET_H_MASK, lcd_conf);
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	2001      	movs	r0, #1
 80014e8:	f7ff fee7 	bl	80012ba <LCD5110_set_function>
	//! Set display voltage
	LCD5110_set_voltage_ext(voltage, lcd_conf);
 80014ec:	78bb      	ldrb	r3, [r7, #2]
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff13 	bl	800131c <LCD5110_set_voltage_ext>
	//! Set temperature coefficient
	LCD5110_set_temp_coef_ext(temp_coeff, lcd_conf);
 80014f6:	787b      	ldrb	r3, [r7, #1]
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff ff27 	bl	800134e <LCD5110_set_temp_coef_ext>
	//! Set bias
	LCD5110_set_bias_ext(bias, lcd_conf);
 8001500:	7e3b      	ldrb	r3, [r7, #24]
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff3a 	bl	800137e <LCD5110_set_bias_ext>


	//! Basic commands (bit H==0), horizontal addressing
	LCD5110_set_function(0, lcd_conf);
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	2000      	movs	r0, #0
 800150e:	f7ff fed4 	bl	80012ba <LCD5110_set_function>
	//! Set display mode
	LCD5110_set_mode_base(dmode, lcd_conf);
 8001512:	78fb      	ldrb	r3, [r7, #3]
 8001514:	6879      	ldr	r1, [r7, #4]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fee9 	bl	80012ee <LCD5110_set_mode_base>

	return LCD5110_OK;
 800151c:	2300      	movs	r3, #0
	//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <LCD5110_refresh_ll>:

//
void LCD5110_refresh_ll(LCD5110_conf* lcd_conf)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
	LCD5110_CE_off(lcd_conf);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff fe73 	bl	800121a <LCD5110_CE_off>
	LCD5110_DC_off(lcd_conf);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff fe90 	bl	800125a <LCD5110_DC_off>
	LCD5110_set_XY_base(0, 0, lcd_conf);
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	2100      	movs	r1, #0
 800153e:	2000      	movs	r0, #0
 8001540:	f7ff ff73 	bl	800142a <LCD5110_set_XY_base>
	LCD5110_DC_on(lcd_conf);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff fe78 	bl	800123a <LCD5110_DC_on>

	send_data_to_LCD5110(lcd_conf->video_buffer, LCD_HEIGHT*LCD_WIDTH/8, lcd_conf);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	331c      	adds	r3, #28
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fe4c 	bl	80011f2 <send_data_to_LCD5110>
//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <HAL_TIM_PeriodElapsedCallback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10) {
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a06      	ldr	r2, [pc, #24]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d104      	bne.n	8001580 <HAL_TIM_PeriodElapsedCallback+0x1c>
		++tim10_overflows;
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	3301      	adds	r3, #1
 800157c:	4a04      	ldr	r2, [pc, #16]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800157e:	6013      	str	r3, [r2, #0]
	}
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	40014400 	.word	0x40014400
 8001590:	2000020c 	.word	0x2000020c

08001594 <TIM10_reinit>:

void TIM10_reinit() {
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim10);
 8001598:	480c      	ldr	r0, [pc, #48]	; (80015cc <TIM10_reinit+0x38>)
 800159a:	f003 fef8 	bl	800538e <HAL_TIM_Base_Stop>
	__HAL_TIM_SET_PRESCALER(&htim10, (SystemCoreClockInMHz - 1));
 800159e:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <TIM10_reinit+0x3c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a0c      	ldr	r2, [pc, #48]	; (80015d4 <TIM10_reinit+0x40>)
 80015a4:	fba2 2303 	umull	r2, r3, r2, r3
 80015a8:	0c9a      	lsrs	r2, r3, #18
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <TIM10_reinit+0x38>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	3a01      	subs	r2, #1
 80015b0:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <TIM10_reinit+0x38>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24
	tim10_overflows = 0;
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <TIM10_reinit+0x44>)
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim10);
 80015c0:	4802      	ldr	r0, [pc, #8]	; (80015cc <TIM10_reinit+0x38>)
 80015c2:	f003 ff0b 	bl	80053dc <HAL_TIM_Base_Start_IT>
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200001b4 	.word	0x200001b4
 80015d0:	20000004 	.word	0x20000004
 80015d4:	431bde83 	.word	0x431bde83
 80015d8:	2000020c 	.word	0x2000020c

080015dc <get_tim10_us>:

uint32_t get_tim10_us() {
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
	__HAL_TIM_DISABLE_IT(&htim10, TIM_IT_UPDATE);
 80015e2:	4b13      	ldr	r3, [pc, #76]	; (8001630 <get_tim10_us+0x54>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <get_tim10_us+0x54>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 0201 	bic.w	r2, r2, #1
 80015f0:	60da      	str	r2, [r3, #12]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f2:	b672      	cpsid	i
}
 80015f4:	bf00      	nop
	__disable_irq();
	uint32_t curr_time = tim10_overflows * COUNTER_PERIOD + __HAL_TIM_GET_COUNTER(&htim10);
 80015f6:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <get_tim10_us+0x58>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80015fe:	fb03 f202 	mul.w	r2, r3, r2
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <get_tim10_us+0x54>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001608:	4413      	add	r3, r2
 800160a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 800160c:	b662      	cpsie	i
}
 800160e:	bf00      	nop
	__enable_irq();
	__HAL_TIM_ENABLE_IT(&htim10, TIM_IT_UPDATE);
 8001610:	4b07      	ldr	r3, [pc, #28]	; (8001630 <get_tim10_us+0x54>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <get_tim10_us+0x54>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f042 0201 	orr.w	r2, r2, #1
 800161e:	60da      	str	r2, [r3, #12]

	return curr_time;
 8001620:	687b      	ldr	r3, [r7, #4]
}
 8001622:	4618      	mov	r0, r3
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	200001b4 	.word	0x200001b4
 8001634:	2000020c 	.word	0x2000020c

08001638 <udelay_TIM10>:

void udelay_TIM10(uint32_t useconds) {
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
	uint32_t start = get_tim10_us();
 8001640:	f7ff ffcc 	bl	80015dc <get_tim10_us>
 8001644:	60f8      	str	r0, [r7, #12]
	while (get_tim10_us() < start + useconds) {}
 8001646:	bf00      	nop
 8001648:	f7ff ffc8 	bl	80015dc <get_tim10_us>
 800164c:	4601      	mov	r1, r0
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4413      	add	r3, r2
 8001654:	4299      	cmp	r1, r3
 8001656:	d3f7      	bcc.n	8001648 <udelay_TIM10+0x10>
}
 8001658:	bf00      	nop
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
	...

08001664 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ECHOI_Pin) {
 800166e:	88fb      	ldrh	r3, [r7, #6]
 8001670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001674:	d12f      	bne.n	80016d6 <HAL_GPIO_EXTI_Callback+0x72>
		switch (state) {
 8001676:	4b30      	ldr	r3, [pc, #192]	; (8001738 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b01      	cmp	r3, #1
 800167e:	d002      	beq.n	8001686 <HAL_GPIO_EXTI_Callback+0x22>
 8001680:	2b02      	cmp	r3, #2
 8001682:	d009      	beq.n	8001698 <HAL_GPIO_EXTI_Callback+0x34>
 8001684:	e022      	b.n	80016cc <HAL_GPIO_EXTI_Callback+0x68>
		case WAITING_FOR_ECHO_START_S: {
			echo_start =  get_tim10_us();
 8001686:	f7ff ffa9 	bl	80015dc <get_tim10_us>
 800168a:	4603      	mov	r3, r0
 800168c:	4a2b      	ldr	r2, [pc, #172]	; (800173c <HAL_GPIO_EXTI_Callback+0xd8>)
 800168e:	6013      	str	r3, [r2, #0]
			state = WAITING_FOR_ECHO_STOP_S;
 8001690:	4b29      	ldr	r3, [pc, #164]	; (8001738 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001692:	2202      	movs	r2, #2
 8001694:	701a      	strb	r2, [r3, #0]
			break;
 8001696:	e01d      	b.n	80016d4 <HAL_GPIO_EXTI_Callback+0x70>
		}

		case WAITING_FOR_ECHO_STOP_S: {
			echo_finish = get_tim10_us();
 8001698:	f7ff ffa0 	bl	80015dc <get_tim10_us>
 800169c:	4603      	mov	r3, r0
 800169e:	4a28      	ldr	r2, [pc, #160]	; (8001740 <HAL_GPIO_EXTI_Callback+0xdc>)
 80016a0:	6013      	str	r3, [r2, #0]
			measured_time = echo_finish - echo_start;
 80016a2:	4b27      	ldr	r3, [pc, #156]	; (8001740 <HAL_GPIO_EXTI_Callback+0xdc>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	4b25      	ldr	r3, [pc, #148]	; (800173c <HAL_GPIO_EXTI_Callback+0xd8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	4a25      	ldr	r2, [pc, #148]	; (8001744 <HAL_GPIO_EXTI_Callback+0xe0>)
 80016ae:	6013      	str	r3, [r2, #0]

			if (measured_time >= MEASURING_TIMEOUT_US) {
 80016b0:	4b24      	ldr	r3, [pc, #144]	; (8001744 <HAL_GPIO_EXTI_Callback+0xe0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f249 426f 	movw	r2, #37999	; 0x946f
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d903      	bls.n	80016c4 <HAL_GPIO_EXTI_Callback+0x60>
				state = ECHO_TIMEOUT_S;
 80016bc:	4b1e      	ldr	r3, [pc, #120]	; (8001738 <HAL_GPIO_EXTI_Callback+0xd4>)
 80016be:	2203      	movs	r2, #3
 80016c0:	701a      	strb	r2, [r3, #0]
				break;
 80016c2:	e007      	b.n	80016d4 <HAL_GPIO_EXTI_Callback+0x70>
			}

			state = READING_DATA_S;
 80016c4:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <HAL_GPIO_EXTI_Callback+0xd4>)
 80016c6:	2204      	movs	r2, #4
 80016c8:	701a      	strb	r2, [r3, #0]
			break;
 80016ca:	e003      	b.n	80016d4 <HAL_GPIO_EXTI_Callback+0x70>
		}

		default:
			state = ERROR_S;
 80016cc:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <HAL_GPIO_EXTI_Callback+0xd4>)
 80016ce:	2205      	movs	r2, #5
 80016d0:	701a      	strb	r2, [r3, #0]
		}

		return;
 80016d2:	e02e      	b.n	8001732 <HAL_GPIO_EXTI_Callback+0xce>
 80016d4:	e02d      	b.n	8001732 <HAL_GPIO_EXTI_Callback+0xce>
	}

	if (GPIO_Pin == USER_BUTTON_Pin) {
 80016d6:	88fb      	ldrh	r3, [r7, #6]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d12a      	bne.n	8001732 <HAL_GPIO_EXTI_Callback+0xce>
		static uint32_t last_tick;
		if (HAL_GetTick() - last_tick < DEBOUNCE_THRESHOLD) {
 80016dc:	f000 fe7c 	bl	80023d8 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	4b19      	ldr	r3, [pc, #100]	; (8001748 <HAL_GPIO_EXTI_Callback+0xe4>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b31      	cmp	r3, #49	; 0x31
 80016ea:	d921      	bls.n	8001730 <HAL_GPIO_EXTI_Callback+0xcc>
			return;
		}

		last_tick = HAL_GetTick();
 80016ec:	f000 fe74 	bl	80023d8 <HAL_GetTick>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4a15      	ldr	r2, [pc, #84]	; (8001748 <HAL_GPIO_EXTI_Callback+0xe4>)
 80016f4:	6013      	str	r3, [r2, #0]

		if (pressed) {
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <HAL_GPIO_EXTI_Callback+0xe8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d00d      	beq.n	800171a <HAL_GPIO_EXTI_Callback+0xb6>
			unit = (unit_t)((unit + 1) % 4);
 80016fe:	4b14      	ldr	r3, [pc, #80]	; (8001750 <HAL_GPIO_EXTI_Callback+0xec>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	b2db      	uxtb	r3, r3
 8001704:	3301      	adds	r3, #1
 8001706:	425a      	negs	r2, r3
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	f002 0203 	and.w	r2, r2, #3
 8001710:	bf58      	it	pl
 8001712:	4253      	negpl	r3, r2
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <HAL_GPIO_EXTI_Callback+0xec>)
 8001718:	701a      	strb	r2, [r3, #0]
		}

		pressed = !pressed;
 800171a:	4b0c      	ldr	r3, [pc, #48]	; (800174c <HAL_GPIO_EXTI_Callback+0xe8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	bf0c      	ite	eq
 8001722:	2301      	moveq	r3, #1
 8001724:	2300      	movne	r3, #0
 8001726:	b2db      	uxtb	r3, r3
 8001728:	461a      	mov	r2, r3
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <HAL_GPIO_EXTI_Callback+0xe8>)
 800172c:	601a      	str	r2, [r3, #0]

		return;
 800172e:	e000      	b.n	8001732 <HAL_GPIO_EXTI_Callback+0xce>
			return;
 8001730:	bf00      	nop
	}
}
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	200001fc 	.word	0x200001fc
 800173c:	20000200 	.word	0x20000200
 8001740:	20000204 	.word	0x20000204
 8001744:	20000208 	.word	0x20000208
 8001748:	20000214 	.word	0x20000214
 800174c:	20000210 	.word	0x20000210
 8001750:	20000000 	.word	0x20000000

08001754 <trig_sensor.0>:
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
  inline void trig_sensor() {
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	f8c7 c004 	str.w	ip, [r7, #4]
	  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 800175e:	2201      	movs	r2, #1
 8001760:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001764:	4807      	ldr	r0, [pc, #28]	; (8001784 <trig_sensor.0+0x30>)
 8001766:	f001 f92f 	bl	80029c8 <HAL_GPIO_WritePin>
	  udelay_TIM10(TRIG_TIME_US);
 800176a:	2010      	movs	r0, #16
 800176c:	f7ff ff64 	bl	8001638 <udelay_TIM10>
	  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001770:	2200      	movs	r2, #0
 8001772:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001776:	4803      	ldr	r0, [pc, #12]	; (8001784 <trig_sensor.0+0x30>)
 8001778:	f001 f926 	bl	80029c8 <HAL_GPIO_WritePin>
  }
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40020c00 	.word	0x40020c00

08001788 <main>:
{
 8001788:	b590      	push	{r4, r7, lr}
 800178a:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800178e:	af02      	add	r7, sp, #8
int main(void)
 8001790:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001794:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001798:	f000 fdb8 	bl	800230c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800179c:	f000 f962 	bl	8001a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017a0:	f000 fa86 	bl	8001cb0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80017a4:	f000 f9c6 	bl	8001b34 <MX_I2C1_Init>
  MX_SPI1_Init();
 80017a8:	f000 f9f2 	bl	8001b90 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80017ac:	f007 f810 	bl	80087d0 <MX_USB_HOST_Init>
  MX_SPI2_Init();
 80017b0:	f000 fa24 	bl	8001bfc <MX_SPI2_Init>
  MX_TIM10_Init();
 80017b4:	f000 fa58 	bl	8001c68 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  // Display configuration
  LCD5110_display lcd1;

  lcd1.hw_conf.spi_handle = &hspi2;
 80017b8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80017bc:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80017c0:	4a5d      	ldr	r2, [pc, #372]	; (8001938 <main+0x1b0>)
 80017c2:	601a      	str	r2, [r3, #0]
  lcd1.hw_conf.spi_cs_pin =  LCD_CE_Pin;
 80017c4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80017c8:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80017cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017d0:	809a      	strh	r2, [r3, #4]
  lcd1.hw_conf.spi_cs_port = LCD_CE_GPIO_Port;
 80017d2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80017d6:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80017da:	4a58      	ldr	r2, [pc, #352]	; (800193c <main+0x1b4>)
 80017dc:	609a      	str	r2, [r3, #8]
  lcd1.hw_conf.rst_pin =  LCD_RST_Pin;
 80017de:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80017e2:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80017e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ea:	819a      	strh	r2, [r3, #12]
  lcd1.hw_conf.rst_port = LCD_RST_GPIO_Port;
 80017ec:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80017f0:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80017f4:	4a51      	ldr	r2, [pc, #324]	; (800193c <main+0x1b4>)
 80017f6:	611a      	str	r2, [r3, #16]
  lcd1.hw_conf.dc_pin =  LCD_DC_Pin;
 80017f8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80017fc:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001800:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001804:	829a      	strh	r2, [r3, #20]
  lcd1.hw_conf.dc_port = LCD_DC_GPIO_Port;
 8001806:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800180a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800180e:	4a4c      	ldr	r2, [pc, #304]	; (8001940 <main+0x1b8>)
 8001810:	619a      	str	r2, [r3, #24]
  lcd1.def_scr = lcd5110_def_scr;
 8001812:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001816:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800181a:	4a4a      	ldr	r2, [pc, #296]	; (8001944 <main+0x1bc>)
 800181c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001820:	4614      	mov	r4, r2
 8001822:	6820      	ldr	r0, [r4, #0]
 8001824:	6861      	ldr	r1, [r4, #4]
 8001826:	68a2      	ldr	r2, [r4, #8]
 8001828:	c307      	stmia	r3!, {r0, r1, r2}
 800182a:	89a2      	ldrh	r2, [r4, #12]
 800182c:	801a      	strh	r2, [r3, #0]

  LCD5110_init(&lcd1.hw_conf, LCD5110_NORMAL_MODE, 0x40, 2, 3);
 800182e:	1d38      	adds	r0, r7, #4
 8001830:	2303      	movs	r3, #3
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	2302      	movs	r3, #2
 8001836:	2240      	movs	r2, #64	; 0x40
 8001838:	210c      	movs	r1, #12
 800183a:	f7ff fe2f 	bl	800149c <LCD5110_init>

  // Timer initialization
  TIM10_reinit();
 800183e:	f7ff fea9 	bl	8001594 <TIM10_reinit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  trig_sensor();
 8001842:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001846:	469c      	mov	ip, r3
 8001848:	f7ff ff84 	bl	8001754 <trig_sensor.0>

	  state = WAITING_FOR_ECHO_START_S;
 800184c:	4b3e      	ldr	r3, [pc, #248]	; (8001948 <main+0x1c0>)
 800184e:	2201      	movs	r2, #1
 8001850:	701a      	strb	r2, [r3, #0]

	  while (state == WAITING_FOR_ECHO_START_S && state != ERROR_S) {}
 8001852:	bf00      	nop
 8001854:	4b3c      	ldr	r3, [pc, #240]	; (8001948 <main+0x1c0>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b01      	cmp	r3, #1
 800185c:	d104      	bne.n	8001868 <main+0xe0>
 800185e:	4b3a      	ldr	r3, [pc, #232]	; (8001948 <main+0x1c0>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b05      	cmp	r3, #5
 8001866:	d1f5      	bne.n	8001854 <main+0xcc>

	  if (state == ERROR_S) {
 8001868:	4b37      	ldr	r3, [pc, #220]	; (8001948 <main+0x1c0>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b05      	cmp	r3, #5
 8001870:	d10a      	bne.n	8001888 <main+0x100>
		  LCD5110_clear_scr(&lcd1);
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fa91 	bl	8000d9c <LCD5110_clear_scr>
		  LCD5110_printf(&lcd1, BLACK, ECHO_START_ERR_MSG);
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	4a33      	ldr	r2, [pc, #204]	; (800194c <main+0x1c4>)
 800187e:	2101      	movs	r1, #1
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fba5 	bl	8000fd0 <LCD5110_printf>
		  continue;
 8001886:	e056      	b.n	8001936 <main+0x1ae>
	  }

	  while (state == WAITING_FOR_ECHO_STOP_S && state != ERROR_S) {}
 8001888:	bf00      	nop
 800188a:	4b2f      	ldr	r3, [pc, #188]	; (8001948 <main+0x1c0>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d104      	bne.n	800189e <main+0x116>
 8001894:	4b2c      	ldr	r3, [pc, #176]	; (8001948 <main+0x1c0>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b05      	cmp	r3, #5
 800189c:	d1f5      	bne.n	800188a <main+0x102>

	  if (state == ERROR_S) {
 800189e:	4b2a      	ldr	r3, [pc, #168]	; (8001948 <main+0x1c0>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b05      	cmp	r3, #5
 80018a6:	d10a      	bne.n	80018be <main+0x136>
		  LCD5110_clear_scr(&lcd1);
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff fa76 	bl	8000d9c <LCD5110_clear_scr>
		  LCD5110_printf(&lcd1, BLACK, ECHO_STOP_ERR_MSG);
 80018b0:	1d3b      	adds	r3, r7, #4
 80018b2:	4a27      	ldr	r2, [pc, #156]	; (8001950 <main+0x1c8>)
 80018b4:	2101      	movs	r1, #1
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fb8a 	bl	8000fd0 <LCD5110_printf>
		  continue;
 80018bc:	e03b      	b.n	8001936 <main+0x1ae>
	  }


	  if (state == ECHO_TIMEOUT_S) {
 80018be:	4b22      	ldr	r3, [pc, #136]	; (8001948 <main+0x1c0>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b03      	cmp	r3, #3
 80018c6:	d109      	bne.n	80018dc <main+0x154>
		  LCD5110_clear_scr(&lcd1);
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff fa66 	bl	8000d9c <LCD5110_clear_scr>
		  LCD5110_printf(&lcd1, BLACK, TIMEOUT_ERR_MSG);
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	4a20      	ldr	r2, [pc, #128]	; (8001954 <main+0x1cc>)
 80018d4:	2101      	movs	r1, #1
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fb7a 	bl	8000fd0 <LCD5110_printf>

	  }

	  if (state == READING_DATA_S) {
 80018dc:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <main+0x1c0>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	d122      	bne.n	800192c <main+0x1a4>
          HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80018e6:	2028      	movs	r0, #40	; 0x28
 80018e8:	f000 fecf 	bl	800268a <HAL_NVIC_DisableIRQ>
          uint32_t current_measured_time = measured_time;
 80018ec:	4b1a      	ldr	r3, [pc, #104]	; (8001958 <main+0x1d0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
          HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018f4:	2028      	movs	r0, #40	; 0x28
 80018f6:	f000 feba 	bl	800266e <HAL_NVIC_EnableIRQ>
		  LCD5110_clear_scr(&lcd1);
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fa4d 	bl	8000d9c <LCD5110_clear_scr>
		  LCD5110_printf(&lcd1, BLACK, "Distance:\n%lu %s",
 8001902:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001906:	469c      	mov	ip, r3
 8001908:	f8d7 022c 	ldr.w	r0, [r7, #556]	; 0x22c
 800190c:	f000 f82c 	bl	8001968 <get_distance.1>
 8001910:	4604      	mov	r4, r0
 8001912:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001916:	469c      	mov	ip, r3
 8001918:	f000 f872 	bl	8001a00 <get_unit_str.2>
 800191c:	4603      	mov	r3, r0
 800191e:	1d38      	adds	r0, r7, #4
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	4623      	mov	r3, r4
 8001924:	4a0d      	ldr	r2, [pc, #52]	; (800195c <main+0x1d4>)
 8001926:	2101      	movs	r1, #1
 8001928:	f7ff fb52 	bl	8000fd0 <LCD5110_printf>
				  get_distance(current_measured_time),
				  get_unit_str());
	  }

	  udelay_TIM10(UPDATE_DELAY_US);
 800192c:	480c      	ldr	r0, [pc, #48]	; (8001960 <main+0x1d8>)
 800192e:	f7ff fe83 	bl	8001638 <udelay_TIM10>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001932:	f006 ff73 	bl	800881c <MX_USB_HOST_Process>
	  trig_sensor();
 8001936:	e784      	b.n	8001842 <main+0xba>
 8001938:	2000015c 	.word	0x2000015c
 800193c:	40020c00 	.word	0x40020c00
 8001940:	40020400 	.word	0x40020400
 8001944:	08009e50 	.word	0x08009e50
 8001948:	200001fc 	.word	0x200001fc
 800194c:	0800978c 	.word	0x0800978c
 8001950:	080097c0 	.word	0x080097c0
 8001954:	080097f4 	.word	0x080097f4
 8001958:	20000208 	.word	0x20000208
 800195c:	08009820 	.word	0x08009820
 8001960:	0007a120 	.word	0x0007a120
 8001964:	00000000 	.word	0x00000000

08001968 <get_distance.1>:
  inline uint32_t get_distance(uint32_t measured_time) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	f8c7 c000 	str.w	ip, [r7]
      switch (unit) {
 8001974:	4b1e      	ldr	r3, [pc, #120]	; (80019f0 <get_distance.1+0x88>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b03      	cmp	r3, #3
 800197c:	d82d      	bhi.n	80019da <get_distance.1+0x72>
 800197e:	a201      	add	r2, pc, #4	; (adr r2, 8001984 <get_distance.1+0x1c>)
 8001980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001984:	08001995 	.word	0x08001995
 8001988:	080019b5 	.word	0x080019b5
 800198c:	080019c1 	.word	0x080019c1
 8001990:	080019cd 	.word	0x080019cd
            return measured_time / 5.8;
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7fe fdb5 	bl	8000504 <__aeabi_ui2d>
 800199a:	a313      	add	r3, pc, #76	; (adr r3, 80019e8 <get_distance.1+0x80>)
 800199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a0:	f7fe ff54 	bl	800084c <__aeabi_ddiv>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	f7ff f836 	bl	8000a1c <__aeabi_d2uiz>
 80019b0:	4603      	mov	r3, r0
 80019b2:	e013      	b.n	80019dc <get_distance.1+0x74>
            return measured_time / 58;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a0f      	ldr	r2, [pc, #60]	; (80019f4 <get_distance.1+0x8c>)
 80019b8:	fba2 2303 	umull	r2, r3, r2, r3
 80019bc:	095b      	lsrs	r3, r3, #5
 80019be:	e00d      	b.n	80019dc <get_distance.1+0x74>
            return measured_time / 5800;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a0d      	ldr	r2, [pc, #52]	; (80019f8 <get_distance.1+0x90>)
 80019c4:	fba2 2303 	umull	r2, r3, r2, r3
 80019c8:	0b1b      	lsrs	r3, r3, #12
 80019ca:	e007      	b.n	80019dc <get_distance.1+0x74>
            return measured_time / 148;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	089b      	lsrs	r3, r3, #2
 80019d0:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <get_distance.1+0x94>)
 80019d2:	fba2 2303 	umull	r2, r3, r2, r3
 80019d6:	089b      	lsrs	r3, r3, #2
 80019d8:	e000      	b.n	80019dc <get_distance.1+0x74>
            return 0;
 80019da:	2300      	movs	r3, #0
  }
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	f3af 8000 	nop.w
 80019e8:	33333333 	.word	0x33333333
 80019ec:	40173333 	.word	0x40173333
 80019f0:	20000000 	.word	0x20000000
 80019f4:	8d3dcb09 	.word	0x8d3dcb09
 80019f8:	b4c9f9a5 	.word	0xb4c9f9a5
 80019fc:	1bacf915 	.word	0x1bacf915

08001a00 <get_unit_str.2>:
  inline char* get_unit_str() {
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	f8c7 c004 	str.w	ip, [r7, #4]
      switch (unit) {
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <get_unit_str.2+0x4c>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d813      	bhi.n	8001a3c <get_unit_str.2+0x3c>
 8001a14:	a201      	add	r2, pc, #4	; (adr r2, 8001a1c <get_unit_str.2+0x1c>)
 8001a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a1a:	bf00      	nop
 8001a1c:	08001a2d 	.word	0x08001a2d
 8001a20:	08001a31 	.word	0x08001a31
 8001a24:	08001a35 	.word	0x08001a35
 8001a28:	08001a39 	.word	0x08001a39
            return "mm";
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <get_unit_str.2+0x50>)
 8001a2e:	e006      	b.n	8001a3e <get_unit_str.2+0x3e>
            return "cm";
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <get_unit_str.2+0x54>)
 8001a32:	e004      	b.n	8001a3e <get_unit_str.2+0x3e>
            return "m";
 8001a34:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <get_unit_str.2+0x58>)
 8001a36:	e002      	b.n	8001a3e <get_unit_str.2+0x3e>
            return "in";
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <get_unit_str.2+0x5c>)
 8001a3a:	e000      	b.n	8001a3e <get_unit_str.2+0x3e>
            return "unknwn";
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <get_unit_str.2+0x60>)
  }
 8001a3e:	4618      	mov	r0, r3
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	08009834 	.word	0x08009834
 8001a54:	08009838 	.word	0x08009838
 8001a58:	0800983c 	.word	0x0800983c
 8001a5c:	08009840 	.word	0x08009840
 8001a60:	08009844 	.word	0x08009844

08001a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b094      	sub	sp, #80	; 0x50
 8001a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a6a:	f107 0320 	add.w	r3, r7, #32
 8001a6e:	2230      	movs	r2, #48	; 0x30
 8001a70:	2100      	movs	r1, #0
 8001a72:	4618      	mov	r0, r3
 8001a74:	f007 f9ee 	bl	8008e54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a78:	f107 030c 	add.w	r3, r7, #12
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	4b27      	ldr	r3, [pc, #156]	; (8001b2c <SystemClock_Config+0xc8>)
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	4a26      	ldr	r2, [pc, #152]	; (8001b2c <SystemClock_Config+0xc8>)
 8001a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a96:	6413      	str	r3, [r2, #64]	; 0x40
 8001a98:	4b24      	ldr	r3, [pc, #144]	; (8001b2c <SystemClock_Config+0xc8>)
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <SystemClock_Config+0xcc>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a20      	ldr	r2, [pc, #128]	; (8001b30 <SystemClock_Config+0xcc>)
 8001aae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	4b1e      	ldr	r3, [pc, #120]	; (8001b30 <SystemClock_Config+0xcc>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ac4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aca:	2302      	movs	r3, #2
 8001acc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ace:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ad4:	2304      	movs	r3, #4
 8001ad6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001ad8:	23c0      	movs	r3, #192	; 0xc0
 8001ada:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001adc:	2304      	movs	r3, #4
 8001ade:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001ae0:	2308      	movs	r3, #8
 8001ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ae4:	f107 0320 	add.w	r3, r7, #32
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f002 fced 	bl	80044c8 <HAL_RCC_OscConfig>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001af4:	f000 fa2e 	bl	8001f54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001af8:	230f      	movs	r3, #15
 8001afa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001afc:	2302      	movs	r3, #2
 8001afe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b04:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b0e:	f107 030c 	add.w	r3, r7, #12
 8001b12:	2103      	movs	r1, #3
 8001b14:	4618      	mov	r0, r3
 8001b16:	f002 ff4f 	bl	80049b8 <HAL_RCC_ClockConfig>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001b20:	f000 fa18 	bl	8001f54 <Error_Handler>
  }
}
 8001b24:	bf00      	nop
 8001b26:	3750      	adds	r7, #80	; 0x50
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40007000 	.word	0x40007000

08001b34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b3a:	4a13      	ldr	r2, [pc, #76]	; (8001b88 <MX_I2C1_Init+0x54>)
 8001b3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b3e:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b40:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <MX_I2C1_Init+0x58>)
 8001b42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b44:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b58:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b64:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b70:	4804      	ldr	r0, [pc, #16]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b72:	f002 fb65 	bl	8004240 <HAL_I2C_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b7c:	f000 f9ea 	bl	8001f54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	200000b0 	.word	0x200000b0
 8001b88:	40005400 	.word	0x40005400
 8001b8c:	000186a0 	.word	0x000186a0

08001b90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b94:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <MX_SPI1_Init+0x64>)
 8001b96:	4a18      	ldr	r2, [pc, #96]	; (8001bf8 <MX_SPI1_Init+0x68>)
 8001b98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b9a:	4b16      	ldr	r3, [pc, #88]	; (8001bf4 <MX_SPI1_Init+0x64>)
 8001b9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ba0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ba2:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <MX_SPI1_Init+0x64>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ba8:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <MX_SPI1_Init+0x64>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bae:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <MX_SPI1_Init+0x64>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <MX_SPI1_Init+0x64>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bba:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <MX_SPI1_Init+0x64>)
 8001bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bc0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bc2:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <MX_SPI1_Init+0x64>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bc8:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <MX_SPI1_Init+0x64>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <MX_SPI1_Init+0x64>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bd4:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <MX_SPI1_Init+0x64>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <MX_SPI1_Init+0x64>)
 8001bdc:	220a      	movs	r2, #10
 8001bde:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001be0:	4804      	ldr	r0, [pc, #16]	; (8001bf4 <MX_SPI1_Init+0x64>)
 8001be2:	f003 f8f5 	bl	8004dd0 <HAL_SPI_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001bec:	f000 f9b2 	bl	8001f54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000104 	.word	0x20000104
 8001bf8:	40013000 	.word	0x40013000

08001bfc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001c00:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <MX_SPI2_Init+0x64>)
 8001c02:	4a18      	ldr	r2, [pc, #96]	; (8001c64 <MX_SPI2_Init+0x68>)
 8001c04:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c06:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <MX_SPI2_Init+0x64>)
 8001c08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c0c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c0e:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <MX_SPI2_Init+0x64>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <MX_SPI2_Init+0x64>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c1a:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <MX_SPI2_Init+0x64>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c20:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <MX_SPI2_Init+0x64>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c26:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <MX_SPI2_Init+0x64>)
 8001c28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c2c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <MX_SPI2_Init+0x64>)
 8001c30:	2210      	movs	r2, #16
 8001c32:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c34:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <MX_SPI2_Init+0x64>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c3a:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <MX_SPI2_Init+0x64>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c40:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <MX_SPI2_Init+0x64>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <MX_SPI2_Init+0x64>)
 8001c48:	220a      	movs	r2, #10
 8001c4a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c4c:	4804      	ldr	r0, [pc, #16]	; (8001c60 <MX_SPI2_Init+0x64>)
 8001c4e:	f003 f8bf 	bl	8004dd0 <HAL_SPI_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001c58:	f000 f97c 	bl	8001f54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	2000015c 	.word	0x2000015c
 8001c64:	40003800 	.word	0x40003800

08001c68 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001c6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <MX_TIM10_Init+0x40>)
 8001c6e:	4a0f      	ldr	r2, [pc, #60]	; (8001cac <MX_TIM10_Init+0x44>)
 8001c70:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 96-1;
 8001c72:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <MX_TIM10_Init+0x40>)
 8001c74:	225f      	movs	r2, #95	; 0x5f
 8001c76:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <MX_TIM10_Init+0x40>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000;
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <MX_TIM10_Init+0x40>)
 8001c80:	f242 7210 	movw	r2, #10000	; 0x2710
 8001c84:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c86:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <MX_TIM10_Init+0x40>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <MX_TIM10_Init+0x40>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001c92:	4805      	ldr	r0, [pc, #20]	; (8001ca8 <MX_TIM10_Init+0x40>)
 8001c94:	f003 fb2c 	bl	80052f0 <HAL_TIM_Base_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001c9e:	f000 f959 	bl	8001f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	200001b4 	.word	0x200001b4
 8001cac:	40014400 	.word	0x40014400

08001cb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08c      	sub	sp, #48	; 0x30
 8001cb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb6:	f107 031c 	add.w	r3, r7, #28
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	605a      	str	r2, [r3, #4]
 8001cc0:	609a      	str	r2, [r3, #8]
 8001cc2:	60da      	str	r2, [r3, #12]
 8001cc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61bb      	str	r3, [r7, #24]
 8001cca:	4b9c      	ldr	r3, [pc, #624]	; (8001f3c <MX_GPIO_Init+0x28c>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a9b      	ldr	r2, [pc, #620]	; (8001f3c <MX_GPIO_Init+0x28c>)
 8001cd0:	f043 0310 	orr.w	r3, r3, #16
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b99      	ldr	r3, [pc, #612]	; (8001f3c <MX_GPIO_Init+0x28c>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0310 	and.w	r3, r3, #16
 8001cde:	61bb      	str	r3, [r7, #24]
 8001ce0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	4b95      	ldr	r3, [pc, #596]	; (8001f3c <MX_GPIO_Init+0x28c>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a94      	ldr	r2, [pc, #592]	; (8001f3c <MX_GPIO_Init+0x28c>)
 8001cec:	f043 0304 	orr.w	r3, r3, #4
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b92      	ldr	r3, [pc, #584]	; (8001f3c <MX_GPIO_Init+0x28c>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	4b8e      	ldr	r3, [pc, #568]	; (8001f3c <MX_GPIO_Init+0x28c>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a8d      	ldr	r2, [pc, #564]	; (8001f3c <MX_GPIO_Init+0x28c>)
 8001d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b8b      	ldr	r3, [pc, #556]	; (8001f3c <MX_GPIO_Init+0x28c>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	4b87      	ldr	r3, [pc, #540]	; (8001f3c <MX_GPIO_Init+0x28c>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a86      	ldr	r2, [pc, #536]	; (8001f3c <MX_GPIO_Init+0x28c>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b84      	ldr	r3, [pc, #528]	; (8001f3c <MX_GPIO_Init+0x28c>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	4b80      	ldr	r3, [pc, #512]	; (8001f3c <MX_GPIO_Init+0x28c>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a7f      	ldr	r2, [pc, #508]	; (8001f3c <MX_GPIO_Init+0x28c>)
 8001d40:	f043 0302 	orr.w	r3, r3, #2
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b7d      	ldr	r3, [pc, #500]	; (8001f3c <MX_GPIO_Init+0x28c>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	60bb      	str	r3, [r7, #8]
 8001d50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	607b      	str	r3, [r7, #4]
 8001d56:	4b79      	ldr	r3, [pc, #484]	; (8001f3c <MX_GPIO_Init+0x28c>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a78      	ldr	r2, [pc, #480]	; (8001f3c <MX_GPIO_Init+0x28c>)
 8001d5c:	f043 0308 	orr.w	r3, r3, #8
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b76      	ldr	r3, [pc, #472]	; (8001f3c <MX_GPIO_Init+0x28c>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	607b      	str	r3, [r7, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2108      	movs	r1, #8
 8001d72:	4873      	ldr	r0, [pc, #460]	; (8001f40 <MX_GPIO_Init+0x290>)
 8001d74:	f000 fe28 	bl	80029c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001d78:	2201      	movs	r2, #1
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	4871      	ldr	r0, [pc, #452]	; (8001f44 <MX_GPIO_Init+0x294>)
 8001d7e:	f000 fe23 	bl	80029c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001d82:	2200      	movs	r2, #0
 8001d84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d88:	486f      	ldr	r0, [pc, #444]	; (8001f48 <MX_GPIO_Init+0x298>)
 8001d8a:	f000 fe1d 	bl	80029c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RST_Pin|LCD_CE_Pin|TRIG_Pin|LD4_Pin
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f24f 7110 	movw	r1, #63248	; 0xf710
 8001d94:	486d      	ldr	r0, [pc, #436]	; (8001f4c <MX_GPIO_Init+0x29c>)
 8001d96:	f000 fe17 	bl	80029c8 <HAL_GPIO_WritePin>
                          |LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8001d9a:	2304      	movs	r3, #4
 8001d9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8001da6:	f107 031c 	add.w	r3, r7, #28
 8001daa:	4619      	mov	r1, r3
 8001dac:	4864      	ldr	r0, [pc, #400]	; (8001f40 <MX_GPIO_Init+0x290>)
 8001dae:	f000 fc87 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001db2:	2308      	movs	r3, #8
 8001db4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db6:	2301      	movs	r3, #1
 8001db8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001dc2:	f107 031c 	add.w	r3, r7, #28
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	485d      	ldr	r0, [pc, #372]	; (8001f40 <MX_GPIO_Init+0x290>)
 8001dca:	f000 fc79 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8001dce:	2332      	movs	r3, #50	; 0x32
 8001dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001dd2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001dd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ddc:	f107 031c 	add.w	r3, r7, #28
 8001de0:	4619      	mov	r1, r3
 8001de2:	4857      	ldr	r0, [pc, #348]	; (8001f40 <MX_GPIO_Init+0x290>)
 8001de4:	f000 fc6c 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001de8:	2301      	movs	r3, #1
 8001dea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dec:	2301      	movs	r3, #1
 8001dee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	2300      	movs	r3, #0
 8001df6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001df8:	f107 031c 	add.w	r3, r7, #28
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4851      	ldr	r0, [pc, #324]	; (8001f44 <MX_GPIO_Init+0x294>)
 8001e00:	f000 fc5e 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001e04:	2308      	movs	r3, #8
 8001e06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e14:	2305      	movs	r3, #5
 8001e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001e18:	f107 031c 	add.w	r3, r7, #28
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4849      	ldr	r0, [pc, #292]	; (8001f44 <MX_GPIO_Init+0x294>)
 8001e20:	f000 fc4e 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001e24:	2301      	movs	r3, #1
 8001e26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e28:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001e32:	f107 031c 	add.w	r3, r7, #28
 8001e36:	4619      	mov	r1, r3
 8001e38:	4845      	ldr	r0, [pc, #276]	; (8001f50 <MX_GPIO_Init+0x2a0>)
 8001e3a:	f000 fc41 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001e3e:	2310      	movs	r3, #16
 8001e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	2302      	movs	r3, #2
 8001e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e4e:	2306      	movs	r3, #6
 8001e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001e52:	f107 031c 	add.w	r3, r7, #28
 8001e56:	4619      	mov	r1, r3
 8001e58:	483d      	ldr	r0, [pc, #244]	; (8001f50 <MX_GPIO_Init+0x2a0>)
 8001e5a:	f000 fc31 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001e5e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e64:	2302      	movs	r3, #2
 8001e66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e70:	2305      	movs	r3, #5
 8001e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e74:	f107 031c 	add.w	r3, r7, #28
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4833      	ldr	r0, [pc, #204]	; (8001f48 <MX_GPIO_Init+0x298>)
 8001e7c:	f000 fc20 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8001e80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e86:	2301      	movs	r3, #1
 8001e88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8001e92:	f107 031c 	add.w	r3, r7, #28
 8001e96:	4619      	mov	r1, r3
 8001e98:	482b      	ldr	r0, [pc, #172]	; (8001f48 <MX_GPIO_Init+0x298>)
 8001e9a:	f000 fc11 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_CE_Pin TRIG_Pin LD4_Pin
                           LD3_Pin LD5_Pin LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_CE_Pin|TRIG_Pin|LD4_Pin
 8001e9e:	f24f 7310 	movw	r3, #63248	; 0xf710
 8001ea2:	61fb      	str	r3, [r7, #28]
                          |LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eac:	2300      	movs	r3, #0
 8001eae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eb0:	f107 031c 	add.w	r3, r7, #28
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4825      	ldr	r0, [pc, #148]	; (8001f4c <MX_GPIO_Init+0x29c>)
 8001eb8:	f000 fc02 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHOI_Pin */
  GPIO_InitStruct.Pin = ECHOI_Pin;
 8001ebc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ec0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ec2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001ec6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ECHOI_GPIO_Port, &GPIO_InitStruct);
 8001ecc:	f107 031c 	add.w	r3, r7, #28
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	481e      	ldr	r0, [pc, #120]	; (8001f4c <MX_GPIO_Init+0x29c>)
 8001ed4:	f000 fbf4 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001ed8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001edc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001eea:	2306      	movs	r3, #6
 8001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eee:	f107 031c 	add.w	r3, r7, #28
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4813      	ldr	r0, [pc, #76]	; (8001f44 <MX_GPIO_Init+0x294>)
 8001ef6:	f000 fbe3 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001efa:	2320      	movs	r3, #32
 8001efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001efe:	2300      	movs	r3, #0
 8001f00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f06:	f107 031c 	add.w	r3, r7, #28
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	480f      	ldr	r0, [pc, #60]	; (8001f4c <MX_GPIO_Init+0x29c>)
 8001f0e:	f000 fbd7 	bl	80026c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001f12:	2200      	movs	r2, #0
 8001f14:	2100      	movs	r1, #0
 8001f16:	2006      	movs	r0, #6
 8001f18:	f000 fb8d 	bl	8002636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001f1c:	2006      	movs	r0, #6
 8001f1e:	f000 fba6 	bl	800266e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f22:	2200      	movs	r2, #0
 8001f24:	2100      	movs	r1, #0
 8001f26:	2028      	movs	r0, #40	; 0x28
 8001f28:	f000 fb85 	bl	8002636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f2c:	2028      	movs	r0, #40	; 0x28
 8001f2e:	f000 fb9e 	bl	800266e <HAL_NVIC_EnableIRQ>

}
 8001f32:	bf00      	nop
 8001f34:	3730      	adds	r7, #48	; 0x30
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40020800 	.word	0x40020800
 8001f48:	40020400 	.word	0x40020400
 8001f4c:	40020c00 	.word	0x40020c00
 8001f50:	40020000 	.word	0x40020000

08001f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001f58:	b672      	cpsid	i
}
 8001f5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f5c:	e7fe      	b.n	8001f5c <Error_Handler+0x8>
	...

08001f60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	607b      	str	r3, [r7, #4]
 8001f6a:	4b10      	ldr	r3, [pc, #64]	; (8001fac <HAL_MspInit+0x4c>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	4a0f      	ldr	r2, [pc, #60]	; (8001fac <HAL_MspInit+0x4c>)
 8001f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f74:	6453      	str	r3, [r2, #68]	; 0x44
 8001f76:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <HAL_MspInit+0x4c>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f7e:	607b      	str	r3, [r7, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	603b      	str	r3, [r7, #0]
 8001f86:	4b09      	ldr	r3, [pc, #36]	; (8001fac <HAL_MspInit+0x4c>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	4a08      	ldr	r2, [pc, #32]	; (8001fac <HAL_MspInit+0x4c>)
 8001f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f90:	6413      	str	r3, [r2, #64]	; 0x40
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <HAL_MspInit+0x4c>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	603b      	str	r3, [r7, #0]
 8001f9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f9e:	2007      	movs	r0, #7
 8001fa0:	f000 fb3e 	bl	8002620 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40023800 	.word	0x40023800

08001fb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08a      	sub	sp, #40	; 0x28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a19      	ldr	r2, [pc, #100]	; (8002034 <HAL_I2C_MspInit+0x84>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d12c      	bne.n	800202c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	4b18      	ldr	r3, [pc, #96]	; (8002038 <HAL_I2C_MspInit+0x88>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	4a17      	ldr	r2, [pc, #92]	; (8002038 <HAL_I2C_MspInit+0x88>)
 8001fdc:	f043 0302 	orr.w	r3, r3, #2
 8001fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <HAL_I2C_MspInit+0x88>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001fee:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ff4:	2312      	movs	r3, #18
 8001ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002000:	2304      	movs	r3, #4
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002004:	f107 0314 	add.w	r3, r7, #20
 8002008:	4619      	mov	r1, r3
 800200a:	480c      	ldr	r0, [pc, #48]	; (800203c <HAL_I2C_MspInit+0x8c>)
 800200c:	f000 fb58 	bl	80026c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	4b08      	ldr	r3, [pc, #32]	; (8002038 <HAL_I2C_MspInit+0x88>)
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	4a07      	ldr	r2, [pc, #28]	; (8002038 <HAL_I2C_MspInit+0x88>)
 800201a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800201e:	6413      	str	r3, [r2, #64]	; 0x40
 8002020:	4b05      	ldr	r3, [pc, #20]	; (8002038 <HAL_I2C_MspInit+0x88>)
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800202c:	bf00      	nop
 800202e:	3728      	adds	r7, #40	; 0x28
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40005400 	.word	0x40005400
 8002038:	40023800 	.word	0x40023800
 800203c:	40020400 	.word	0x40020400

08002040 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08c      	sub	sp, #48	; 0x30
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 031c 	add.w	r3, r7, #28
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a32      	ldr	r2, [pc, #200]	; (8002128 <HAL_SPI_MspInit+0xe8>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d12c      	bne.n	80020bc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	61bb      	str	r3, [r7, #24]
 8002066:	4b31      	ldr	r3, [pc, #196]	; (800212c <HAL_SPI_MspInit+0xec>)
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	4a30      	ldr	r2, [pc, #192]	; (800212c <HAL_SPI_MspInit+0xec>)
 800206c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002070:	6453      	str	r3, [r2, #68]	; 0x44
 8002072:	4b2e      	ldr	r3, [pc, #184]	; (800212c <HAL_SPI_MspInit+0xec>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800207a:	61bb      	str	r3, [r7, #24]
 800207c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	4b2a      	ldr	r3, [pc, #168]	; (800212c <HAL_SPI_MspInit+0xec>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	4a29      	ldr	r2, [pc, #164]	; (800212c <HAL_SPI_MspInit+0xec>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6313      	str	r3, [r2, #48]	; 0x30
 800208e:	4b27      	ldr	r3, [pc, #156]	; (800212c <HAL_SPI_MspInit+0xec>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800209a:	23e0      	movs	r3, #224	; 0xe0
 800209c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209e:	2302      	movs	r3, #2
 80020a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a6:	2303      	movs	r3, #3
 80020a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020aa:	2305      	movs	r3, #5
 80020ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ae:	f107 031c 	add.w	r3, r7, #28
 80020b2:	4619      	mov	r1, r3
 80020b4:	481e      	ldr	r0, [pc, #120]	; (8002130 <HAL_SPI_MspInit+0xf0>)
 80020b6:	f000 fb03 	bl	80026c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80020ba:	e031      	b.n	8002120 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a1c      	ldr	r2, [pc, #112]	; (8002134 <HAL_SPI_MspInit+0xf4>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d12c      	bne.n	8002120 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
 80020ca:	4b18      	ldr	r3, [pc, #96]	; (800212c <HAL_SPI_MspInit+0xec>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	4a17      	ldr	r2, [pc, #92]	; (800212c <HAL_SPI_MspInit+0xec>)
 80020d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d4:	6413      	str	r3, [r2, #64]	; 0x40
 80020d6:	4b15      	ldr	r3, [pc, #84]	; (800212c <HAL_SPI_MspInit+0xec>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	4b11      	ldr	r3, [pc, #68]	; (800212c <HAL_SPI_MspInit+0xec>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a10      	ldr	r2, [pc, #64]	; (800212c <HAL_SPI_MspInit+0xec>)
 80020ec:	f043 0302 	orr.w	r3, r3, #2
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4b0e      	ldr	r3, [pc, #56]	; (800212c <HAL_SPI_MspInit+0xec>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_CLK_Pin|LCD_DIN_Pin;
 80020fe:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002104:	2302      	movs	r3, #2
 8002106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002108:	2300      	movs	r3, #0
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210c:	2303      	movs	r3, #3
 800210e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002110:	2305      	movs	r3, #5
 8002112:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002114:	f107 031c 	add.w	r3, r7, #28
 8002118:	4619      	mov	r1, r3
 800211a:	4807      	ldr	r0, [pc, #28]	; (8002138 <HAL_SPI_MspInit+0xf8>)
 800211c:	f000 fad0 	bl	80026c0 <HAL_GPIO_Init>
}
 8002120:	bf00      	nop
 8002122:	3730      	adds	r7, #48	; 0x30
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40013000 	.word	0x40013000
 800212c:	40023800 	.word	0x40023800
 8002130:	40020000 	.word	0x40020000
 8002134:	40003800 	.word	0x40003800
 8002138:	40020400 	.word	0x40020400

0800213c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a0e      	ldr	r2, [pc, #56]	; (8002184 <HAL_TIM_Base_MspInit+0x48>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d115      	bne.n	800217a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	4b0d      	ldr	r3, [pc, #52]	; (8002188 <HAL_TIM_Base_MspInit+0x4c>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	4a0c      	ldr	r2, [pc, #48]	; (8002188 <HAL_TIM_Base_MspInit+0x4c>)
 8002158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800215c:	6453      	str	r3, [r2, #68]	; 0x44
 800215e:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <HAL_TIM_Base_MspInit+0x4c>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800216a:	2200      	movs	r2, #0
 800216c:	2100      	movs	r1, #0
 800216e:	2019      	movs	r0, #25
 8002170:	f000 fa61 	bl	8002636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002174:	2019      	movs	r0, #25
 8002176:	f000 fa7a 	bl	800266e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800217a:	bf00      	nop
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40014400 	.word	0x40014400
 8002188:	40023800 	.word	0x40023800

0800218c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002190:	e7fe      	b.n	8002190 <NMI_Handler+0x4>

08002192 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002196:	e7fe      	b.n	8002196 <HardFault_Handler+0x4>

08002198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800219c:	e7fe      	b.n	800219c <MemManage_Handler+0x4>

0800219e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021a2:	e7fe      	b.n	80021a2 <BusFault_Handler+0x4>

080021a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021a8:	e7fe      	b.n	80021a8 <UsageFault_Handler+0x4>

080021aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021d8:	f000 f8ea 	bl	80023b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021dc:	bf00      	nop
 80021de:	bd80      	pop	{r7, pc}

080021e0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 80021e4:	2001      	movs	r0, #1
 80021e6:	f000 fc09 	bl	80029fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80021f4:	4802      	ldr	r0, [pc, #8]	; (8002200 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80021f6:	f003 f953 	bl	80054a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	200001b4 	.word	0x200001b4

08002204 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ECHOI_Pin);
 8002208:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800220c:	f000 fbf6 	bl	80029fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002210:	bf00      	nop
 8002212:	bd80      	pop	{r7, pc}

08002214 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002218:	4802      	ldr	r0, [pc, #8]	; (8002224 <OTG_FS_IRQHandler+0x10>)
 800221a:	f000 fe71 	bl	8002f00 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	200005fc 	.word	0x200005fc

08002228 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002230:	4a14      	ldr	r2, [pc, #80]	; (8002284 <_sbrk+0x5c>)
 8002232:	4b15      	ldr	r3, [pc, #84]	; (8002288 <_sbrk+0x60>)
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800223c:	4b13      	ldr	r3, [pc, #76]	; (800228c <_sbrk+0x64>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d102      	bne.n	800224a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002244:	4b11      	ldr	r3, [pc, #68]	; (800228c <_sbrk+0x64>)
 8002246:	4a12      	ldr	r2, [pc, #72]	; (8002290 <_sbrk+0x68>)
 8002248:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800224a:	4b10      	ldr	r3, [pc, #64]	; (800228c <_sbrk+0x64>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4413      	add	r3, r2
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	429a      	cmp	r2, r3
 8002256:	d207      	bcs.n	8002268 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002258:	f006 fdc2 	bl	8008de0 <__errno>
 800225c:	4603      	mov	r3, r0
 800225e:	220c      	movs	r2, #12
 8002260:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002262:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002266:	e009      	b.n	800227c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002268:	4b08      	ldr	r3, [pc, #32]	; (800228c <_sbrk+0x64>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800226e:	4b07      	ldr	r3, [pc, #28]	; (800228c <_sbrk+0x64>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4413      	add	r3, r2
 8002276:	4a05      	ldr	r2, [pc, #20]	; (800228c <_sbrk+0x64>)
 8002278:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800227a:	68fb      	ldr	r3, [r7, #12]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20020000 	.word	0x20020000
 8002288:	00000400 	.word	0x00000400
 800228c:	20000218 	.word	0x20000218
 8002290:	20000910 	.word	0x20000910

08002294 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002298:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <SystemInit+0x20>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229e:	4a05      	ldr	r2, [pc, #20]	; (80022b4 <SystemInit+0x20>)
 80022a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022bc:	480d      	ldr	r0, [pc, #52]	; (80022f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022be:	490e      	ldr	r1, [pc, #56]	; (80022f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022c0:	4a0e      	ldr	r2, [pc, #56]	; (80022fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022c4:	e002      	b.n	80022cc <LoopCopyDataInit>

080022c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ca:	3304      	adds	r3, #4

080022cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022d0:	d3f9      	bcc.n	80022c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022d2:	4a0b      	ldr	r2, [pc, #44]	; (8002300 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022d4:	4c0b      	ldr	r4, [pc, #44]	; (8002304 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022d8:	e001      	b.n	80022de <LoopFillZerobss>

080022da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022dc:	3204      	adds	r2, #4

080022de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022e0:	d3fb      	bcc.n	80022da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022e2:	f7ff ffd7 	bl	8002294 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022e6:	f006 fd81 	bl	8008dec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ea:	f7ff fa4d 	bl	8001788 <main>
  bx  lr    
 80022ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022f8:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80022fc:	08009fbc 	.word	0x08009fbc
  ldr r2, =_sbss
 8002300:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8002304:	20000910 	.word	0x20000910

08002308 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002308:	e7fe      	b.n	8002308 <ADC_IRQHandler>
	...

0800230c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002310:	4b0e      	ldr	r3, [pc, #56]	; (800234c <HAL_Init+0x40>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a0d      	ldr	r2, [pc, #52]	; (800234c <HAL_Init+0x40>)
 8002316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800231a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_Init+0x40>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a0a      	ldr	r2, [pc, #40]	; (800234c <HAL_Init+0x40>)
 8002322:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002326:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002328:	4b08      	ldr	r3, [pc, #32]	; (800234c <HAL_Init+0x40>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a07      	ldr	r2, [pc, #28]	; (800234c <HAL_Init+0x40>)
 800232e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002332:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002334:	2003      	movs	r0, #3
 8002336:	f000 f973 	bl	8002620 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800233a:	2000      	movs	r0, #0
 800233c:	f000 f808 	bl	8002350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002340:	f7ff fe0e 	bl	8001f60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40023c00 	.word	0x40023c00

08002350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002358:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <HAL_InitTick+0x54>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <HAL_InitTick+0x58>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	4619      	mov	r1, r3
 8002362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002366:	fbb3 f3f1 	udiv	r3, r3, r1
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	4618      	mov	r0, r3
 8002370:	f000 f999 	bl	80026a6 <HAL_SYSTICK_Config>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e00e      	b.n	800239c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b0f      	cmp	r3, #15
 8002382:	d80a      	bhi.n	800239a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002384:	2200      	movs	r2, #0
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800238c:	f000 f953 	bl	8002636 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002390:	4a06      	ldr	r2, [pc, #24]	; (80023ac <HAL_InitTick+0x5c>)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	e000      	b.n	800239c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
}
 800239c:	4618      	mov	r0, r3
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20000004 	.word	0x20000004
 80023a8:	2000000c 	.word	0x2000000c
 80023ac:	20000008 	.word	0x20000008

080023b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <HAL_IncTick+0x20>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	461a      	mov	r2, r3
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_IncTick+0x24>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4413      	add	r3, r2
 80023c0:	4a04      	ldr	r2, [pc, #16]	; (80023d4 <HAL_IncTick+0x24>)
 80023c2:	6013      	str	r3, [r2, #0]
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	2000000c 	.word	0x2000000c
 80023d4:	2000021c 	.word	0x2000021c

080023d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return uwTick;
 80023dc:	4b03      	ldr	r3, [pc, #12]	; (80023ec <HAL_GetTick+0x14>)
 80023de:	681b      	ldr	r3, [r3, #0]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	2000021c 	.word	0x2000021c

080023f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023f8:	f7ff ffee 	bl	80023d8 <HAL_GetTick>
 80023fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002408:	d005      	beq.n	8002416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800240a:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <HAL_Delay+0x44>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4413      	add	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002416:	bf00      	nop
 8002418:	f7ff ffde 	bl	80023d8 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	429a      	cmp	r2, r3
 8002426:	d8f7      	bhi.n	8002418 <HAL_Delay+0x28>
  {
  }
}
 8002428:	bf00      	nop
 800242a:	bf00      	nop
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	2000000c 	.word	0x2000000c

08002438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002448:	4b0c      	ldr	r3, [pc, #48]	; (800247c <__NVIC_SetPriorityGrouping+0x44>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002454:	4013      	ands	r3, r2
 8002456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002460:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800246a:	4a04      	ldr	r2, [pc, #16]	; (800247c <__NVIC_SetPriorityGrouping+0x44>)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	60d3      	str	r3, [r2, #12]
}
 8002470:	bf00      	nop
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002484:	4b04      	ldr	r3, [pc, #16]	; (8002498 <__NVIC_GetPriorityGrouping+0x18>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	0a1b      	lsrs	r3, r3, #8
 800248a:	f003 0307 	and.w	r3, r3, #7
}
 800248e:	4618      	mov	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	db0b      	blt.n	80024c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	f003 021f 	and.w	r2, r3, #31
 80024b4:	4907      	ldr	r1, [pc, #28]	; (80024d4 <__NVIC_EnableIRQ+0x38>)
 80024b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	2001      	movs	r0, #1
 80024be:	fa00 f202 	lsl.w	r2, r0, r2
 80024c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	e000e100 	.word	0xe000e100

080024d8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	db12      	blt.n	8002510 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ea:	79fb      	ldrb	r3, [r7, #7]
 80024ec:	f003 021f 	and.w	r2, r3, #31
 80024f0:	490a      	ldr	r1, [pc, #40]	; (800251c <__NVIC_DisableIRQ+0x44>)
 80024f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f6:	095b      	lsrs	r3, r3, #5
 80024f8:	2001      	movs	r0, #1
 80024fa:	fa00 f202 	lsl.w	r2, r0, r2
 80024fe:	3320      	adds	r3, #32
 8002500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002504:	f3bf 8f4f 	dsb	sy
}
 8002508:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800250a:	f3bf 8f6f 	isb	sy
}
 800250e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	e000e100 	.word	0xe000e100

08002520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	6039      	str	r1, [r7, #0]
 800252a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002530:	2b00      	cmp	r3, #0
 8002532:	db0a      	blt.n	800254a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	b2da      	uxtb	r2, r3
 8002538:	490c      	ldr	r1, [pc, #48]	; (800256c <__NVIC_SetPriority+0x4c>)
 800253a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253e:	0112      	lsls	r2, r2, #4
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	440b      	add	r3, r1
 8002544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002548:	e00a      	b.n	8002560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4908      	ldr	r1, [pc, #32]	; (8002570 <__NVIC_SetPriority+0x50>)
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	3b04      	subs	r3, #4
 8002558:	0112      	lsls	r2, r2, #4
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	440b      	add	r3, r1
 800255e:	761a      	strb	r2, [r3, #24]
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000e100 	.word	0xe000e100
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002574:	b480      	push	{r7}
 8002576:	b089      	sub	sp, #36	; 0x24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f1c3 0307 	rsb	r3, r3, #7
 800258e:	2b04      	cmp	r3, #4
 8002590:	bf28      	it	cs
 8002592:	2304      	movcs	r3, #4
 8002594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3304      	adds	r3, #4
 800259a:	2b06      	cmp	r3, #6
 800259c:	d902      	bls.n	80025a4 <NVIC_EncodePriority+0x30>
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	3b03      	subs	r3, #3
 80025a2:	e000      	b.n	80025a6 <NVIC_EncodePriority+0x32>
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43da      	mvns	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	401a      	ands	r2, r3
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	fa01 f303 	lsl.w	r3, r1, r3
 80025c6:	43d9      	mvns	r1, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025cc:	4313      	orrs	r3, r2
         );
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3724      	adds	r7, #36	; 0x24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025ec:	d301      	bcc.n	80025f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ee:	2301      	movs	r3, #1
 80025f0:	e00f      	b.n	8002612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025f2:	4a0a      	ldr	r2, [pc, #40]	; (800261c <SysTick_Config+0x40>)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025fa:	210f      	movs	r1, #15
 80025fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002600:	f7ff ff8e 	bl	8002520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002604:	4b05      	ldr	r3, [pc, #20]	; (800261c <SysTick_Config+0x40>)
 8002606:	2200      	movs	r2, #0
 8002608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800260a:	4b04      	ldr	r3, [pc, #16]	; (800261c <SysTick_Config+0x40>)
 800260c:	2207      	movs	r2, #7
 800260e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	e000e010 	.word	0xe000e010

08002620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff ff05 	bl	8002438 <__NVIC_SetPriorityGrouping>
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002636:	b580      	push	{r7, lr}
 8002638:	b086      	sub	sp, #24
 800263a:	af00      	add	r7, sp, #0
 800263c:	4603      	mov	r3, r0
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
 8002642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002648:	f7ff ff1a 	bl	8002480 <__NVIC_GetPriorityGrouping>
 800264c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	6978      	ldr	r0, [r7, #20]
 8002654:	f7ff ff8e 	bl	8002574 <NVIC_EncodePriority>
 8002658:	4602      	mov	r2, r0
 800265a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800265e:	4611      	mov	r1, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff ff5d 	bl	8002520 <__NVIC_SetPriority>
}
 8002666:	bf00      	nop
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	4603      	mov	r3, r0
 8002676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff ff0d 	bl	800249c <__NVIC_EnableIRQ>
}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	af00      	add	r7, sp, #0
 8002690:	4603      	mov	r3, r0
 8002692:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff ff1d 	bl	80024d8 <__NVIC_DisableIRQ>
}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff ff94 	bl	80025dc <SysTick_Config>
 80026b4:	4603      	mov	r3, r0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b089      	sub	sp, #36	; 0x24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
 80026da:	e159      	b.n	8002990 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026dc:	2201      	movs	r2, #1
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	4013      	ands	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	f040 8148 	bne.w	800298a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	2b01      	cmp	r3, #1
 8002704:	d005      	beq.n	8002712 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800270e:	2b02      	cmp	r3, #2
 8002710:	d130      	bne.n	8002774 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	2203      	movs	r2, #3
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43db      	mvns	r3, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4013      	ands	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	4313      	orrs	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002748:	2201      	movs	r2, #1
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4013      	ands	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	091b      	lsrs	r3, r3, #4
 800275e:	f003 0201 	and.w	r2, r3, #1
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	2b03      	cmp	r3, #3
 800277e:	d017      	beq.n	80027b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	2203      	movs	r2, #3
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 0303 	and.w	r3, r3, #3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d123      	bne.n	8002804 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	08da      	lsrs	r2, r3, #3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3208      	adds	r2, #8
 80027c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	220f      	movs	r2, #15
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	4013      	ands	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	691a      	ldr	r2, [r3, #16]
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	08da      	lsrs	r2, r3, #3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3208      	adds	r2, #8
 80027fe:	69b9      	ldr	r1, [r7, #24]
 8002800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	2203      	movs	r2, #3
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 0203 	and.w	r2, r3, #3
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 80a2 	beq.w	800298a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	4b57      	ldr	r3, [pc, #348]	; (80029a8 <HAL_GPIO_Init+0x2e8>)
 800284c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284e:	4a56      	ldr	r2, [pc, #344]	; (80029a8 <HAL_GPIO_Init+0x2e8>)
 8002850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002854:	6453      	str	r3, [r2, #68]	; 0x44
 8002856:	4b54      	ldr	r3, [pc, #336]	; (80029a8 <HAL_GPIO_Init+0x2e8>)
 8002858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002862:	4a52      	ldr	r2, [pc, #328]	; (80029ac <HAL_GPIO_Init+0x2ec>)
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	089b      	lsrs	r3, r3, #2
 8002868:	3302      	adds	r3, #2
 800286a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800286e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	220f      	movs	r2, #15
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43db      	mvns	r3, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4013      	ands	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a49      	ldr	r2, [pc, #292]	; (80029b0 <HAL_GPIO_Init+0x2f0>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d019      	beq.n	80028c2 <HAL_GPIO_Init+0x202>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a48      	ldr	r2, [pc, #288]	; (80029b4 <HAL_GPIO_Init+0x2f4>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d013      	beq.n	80028be <HAL_GPIO_Init+0x1fe>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a47      	ldr	r2, [pc, #284]	; (80029b8 <HAL_GPIO_Init+0x2f8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d00d      	beq.n	80028ba <HAL_GPIO_Init+0x1fa>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a46      	ldr	r2, [pc, #280]	; (80029bc <HAL_GPIO_Init+0x2fc>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d007      	beq.n	80028b6 <HAL_GPIO_Init+0x1f6>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a45      	ldr	r2, [pc, #276]	; (80029c0 <HAL_GPIO_Init+0x300>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d101      	bne.n	80028b2 <HAL_GPIO_Init+0x1f2>
 80028ae:	2304      	movs	r3, #4
 80028b0:	e008      	b.n	80028c4 <HAL_GPIO_Init+0x204>
 80028b2:	2307      	movs	r3, #7
 80028b4:	e006      	b.n	80028c4 <HAL_GPIO_Init+0x204>
 80028b6:	2303      	movs	r3, #3
 80028b8:	e004      	b.n	80028c4 <HAL_GPIO_Init+0x204>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e002      	b.n	80028c4 <HAL_GPIO_Init+0x204>
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <HAL_GPIO_Init+0x204>
 80028c2:	2300      	movs	r3, #0
 80028c4:	69fa      	ldr	r2, [r7, #28]
 80028c6:	f002 0203 	and.w	r2, r2, #3
 80028ca:	0092      	lsls	r2, r2, #2
 80028cc:	4093      	lsls	r3, r2
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028d4:	4935      	ldr	r1, [pc, #212]	; (80029ac <HAL_GPIO_Init+0x2ec>)
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	089b      	lsrs	r3, r3, #2
 80028da:	3302      	adds	r3, #2
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028e2:	4b38      	ldr	r3, [pc, #224]	; (80029c4 <HAL_GPIO_Init+0x304>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	43db      	mvns	r3, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4013      	ands	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002906:	4a2f      	ldr	r2, [pc, #188]	; (80029c4 <HAL_GPIO_Init+0x304>)
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800290c:	4b2d      	ldr	r3, [pc, #180]	; (80029c4 <HAL_GPIO_Init+0x304>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002930:	4a24      	ldr	r2, [pc, #144]	; (80029c4 <HAL_GPIO_Init+0x304>)
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002936:	4b23      	ldr	r3, [pc, #140]	; (80029c4 <HAL_GPIO_Init+0x304>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	43db      	mvns	r3, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4013      	ands	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800295a:	4a1a      	ldr	r2, [pc, #104]	; (80029c4 <HAL_GPIO_Init+0x304>)
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002960:	4b18      	ldr	r3, [pc, #96]	; (80029c4 <HAL_GPIO_Init+0x304>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	43db      	mvns	r3, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002984:	4a0f      	ldr	r2, [pc, #60]	; (80029c4 <HAL_GPIO_Init+0x304>)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3301      	adds	r3, #1
 800298e:	61fb      	str	r3, [r7, #28]
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	2b0f      	cmp	r3, #15
 8002994:	f67f aea2 	bls.w	80026dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002998:	bf00      	nop
 800299a:	bf00      	nop
 800299c:	3724      	adds	r7, #36	; 0x24
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40013800 	.word	0x40013800
 80029b0:	40020000 	.word	0x40020000
 80029b4:	40020400 	.word	0x40020400
 80029b8:	40020800 	.word	0x40020800
 80029bc:	40020c00 	.word	0x40020c00
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40013c00 	.word	0x40013c00

080029c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	807b      	strh	r3, [r7, #2]
 80029d4:	4613      	mov	r3, r2
 80029d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029d8:	787b      	ldrb	r3, [r7, #1]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029de:	887a      	ldrh	r2, [r7, #2]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029e4:	e003      	b.n	80029ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029e6:	887b      	ldrh	r3, [r7, #2]
 80029e8:	041a      	lsls	r2, r3, #16
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	619a      	str	r2, [r3, #24]
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
	...

080029fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a06:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a08:	695a      	ldr	r2, [r3, #20]
 8002a0a:	88fb      	ldrh	r3, [r7, #6]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d006      	beq.n	8002a20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a12:	4a05      	ldr	r2, [pc, #20]	; (8002a28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a14:	88fb      	ldrh	r3, [r7, #6]
 8002a16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a18:	88fb      	ldrh	r3, [r7, #6]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fe fe22 	bl	8001664 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a20:	bf00      	nop
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40013c00 	.word	0x40013c00

08002a2c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a2e:	b08f      	sub	sp, #60	; 0x3c
 8002a30:	af0a      	add	r7, sp, #40	; 0x28
 8002a32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e054      	b.n	8002ae8 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d106      	bne.n	8002a5e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f005 ff17 	bl	800888c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2203      	movs	r2, #3
 8002a62:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d102      	bne.n	8002a78 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f002 ff45 	bl	800590c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	603b      	str	r3, [r7, #0]
 8002a88:	687e      	ldr	r6, [r7, #4]
 8002a8a:	466d      	mov	r5, sp
 8002a8c:	f106 0410 	add.w	r4, r6, #16
 8002a90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002aa0:	1d33      	adds	r3, r6, #4
 8002aa2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aa4:	6838      	ldr	r0, [r7, #0]
 8002aa6:	f002 febf 	bl	8005828 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2101      	movs	r1, #1
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f002 ff3c 	bl	800592e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	603b      	str	r3, [r7, #0]
 8002abc:	687e      	ldr	r6, [r7, #4]
 8002abe:	466d      	mov	r5, sp
 8002ac0:	f106 0410 	add.w	r4, r6, #16
 8002ac4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ac6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002acc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ad0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ad4:	1d33      	adds	r3, r6, #4
 8002ad6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ad8:	6838      	ldr	r0, [r7, #0]
 8002ada:	f003 f8c5 	bl	8005c68 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3714      	adds	r7, #20
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002af0 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002af0:	b590      	push	{r4, r7, lr}
 8002af2:	b089      	sub	sp, #36	; 0x24
 8002af4:	af04      	add	r7, sp, #16
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	4608      	mov	r0, r1
 8002afa:	4611      	mov	r1, r2
 8002afc:	461a      	mov	r2, r3
 8002afe:	4603      	mov	r3, r0
 8002b00:	70fb      	strb	r3, [r7, #3]
 8002b02:	460b      	mov	r3, r1
 8002b04:	70bb      	strb	r3, [r7, #2]
 8002b06:	4613      	mov	r3, r2
 8002b08:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d101      	bne.n	8002b18 <HAL_HCD_HC_Init+0x28>
 8002b14:	2302      	movs	r3, #2
 8002b16:	e076      	b.n	8002c06 <HAL_HCD_HC_Init+0x116>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002b20:	78fb      	ldrb	r3, [r7, #3]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	212c      	movs	r1, #44	; 0x2c
 8002b26:	fb01 f303 	mul.w	r3, r1, r3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	333d      	adds	r3, #61	; 0x3d
 8002b2e:	2200      	movs	r2, #0
 8002b30:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002b32:	78fb      	ldrb	r3, [r7, #3]
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	212c      	movs	r1, #44	; 0x2c
 8002b38:	fb01 f303 	mul.w	r3, r1, r3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3338      	adds	r3, #56	; 0x38
 8002b40:	787a      	ldrb	r2, [r7, #1]
 8002b42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002b44:	78fb      	ldrb	r3, [r7, #3]
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	212c      	movs	r1, #44	; 0x2c
 8002b4a:	fb01 f303 	mul.w	r3, r1, r3
 8002b4e:	4413      	add	r3, r2
 8002b50:	3340      	adds	r3, #64	; 0x40
 8002b52:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002b54:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002b56:	78fb      	ldrb	r3, [r7, #3]
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	212c      	movs	r1, #44	; 0x2c
 8002b5c:	fb01 f303 	mul.w	r3, r1, r3
 8002b60:	4413      	add	r3, r2
 8002b62:	3339      	adds	r3, #57	; 0x39
 8002b64:	78fa      	ldrb	r2, [r7, #3]
 8002b66:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002b68:	78fb      	ldrb	r3, [r7, #3]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	212c      	movs	r1, #44	; 0x2c
 8002b6e:	fb01 f303 	mul.w	r3, r1, r3
 8002b72:	4413      	add	r3, r2
 8002b74:	333f      	adds	r3, #63	; 0x3f
 8002b76:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002b7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	78ba      	ldrb	r2, [r7, #2]
 8002b80:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b84:	b2d0      	uxtb	r0, r2
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	212c      	movs	r1, #44	; 0x2c
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	333a      	adds	r3, #58	; 0x3a
 8002b92:	4602      	mov	r2, r0
 8002b94:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002b96:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	da09      	bge.n	8002bb2 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002b9e:	78fb      	ldrb	r3, [r7, #3]
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	212c      	movs	r1, #44	; 0x2c
 8002ba4:	fb01 f303 	mul.w	r3, r1, r3
 8002ba8:	4413      	add	r3, r2
 8002baa:	333b      	adds	r3, #59	; 0x3b
 8002bac:	2201      	movs	r2, #1
 8002bae:	701a      	strb	r2, [r3, #0]
 8002bb0:	e008      	b.n	8002bc4 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002bb2:	78fb      	ldrb	r3, [r7, #3]
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	212c      	movs	r1, #44	; 0x2c
 8002bb8:	fb01 f303 	mul.w	r3, r1, r3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	333b      	adds	r3, #59	; 0x3b
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002bc4:	78fb      	ldrb	r3, [r7, #3]
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	212c      	movs	r1, #44	; 0x2c
 8002bca:	fb01 f303 	mul.w	r3, r1, r3
 8002bce:	4413      	add	r3, r2
 8002bd0:	333c      	adds	r3, #60	; 0x3c
 8002bd2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002bd6:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6818      	ldr	r0, [r3, #0]
 8002bdc:	787c      	ldrb	r4, [r7, #1]
 8002bde:	78ba      	ldrb	r2, [r7, #2]
 8002be0:	78f9      	ldrb	r1, [r7, #3]
 8002be2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002be4:	9302      	str	r3, [sp, #8]
 8002be6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002bea:	9301      	str	r3, [sp, #4]
 8002bec:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	4623      	mov	r3, r4
 8002bf4:	f003 f9be 	bl	8005f74 <USB_HC_Init>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd90      	pop	{r4, r7, pc}

08002c0e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b084      	sub	sp, #16
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	460b      	mov	r3, r1
 8002c18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_HCD_HC_Halt+0x1e>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e00f      	b.n	8002c4c <HAL_HCD_HC_Halt+0x3e>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	78fa      	ldrb	r2, [r7, #3]
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f003 fc0e 	bl	800645e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	4608      	mov	r0, r1
 8002c5e:	4611      	mov	r1, r2
 8002c60:	461a      	mov	r2, r3
 8002c62:	4603      	mov	r3, r0
 8002c64:	70fb      	strb	r3, [r7, #3]
 8002c66:	460b      	mov	r3, r1
 8002c68:	70bb      	strb	r3, [r7, #2]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002c6e:	78fb      	ldrb	r3, [r7, #3]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	212c      	movs	r1, #44	; 0x2c
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	333b      	adds	r3, #59	; 0x3b
 8002c7c:	78ba      	ldrb	r2, [r7, #2]
 8002c7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002c80:	78fb      	ldrb	r3, [r7, #3]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	212c      	movs	r1, #44	; 0x2c
 8002c86:	fb01 f303 	mul.w	r3, r1, r3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	333f      	adds	r3, #63	; 0x3f
 8002c8e:	787a      	ldrb	r2, [r7, #1]
 8002c90:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002c92:	7c3b      	ldrb	r3, [r7, #16]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d112      	bne.n	8002cbe <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002c98:	78fb      	ldrb	r3, [r7, #3]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	212c      	movs	r1, #44	; 0x2c
 8002c9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3342      	adds	r3, #66	; 0x42
 8002ca6:	2203      	movs	r2, #3
 8002ca8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002caa:	78fb      	ldrb	r3, [r7, #3]
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	212c      	movs	r1, #44	; 0x2c
 8002cb0:	fb01 f303 	mul.w	r3, r1, r3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	333d      	adds	r3, #61	; 0x3d
 8002cb8:	7f3a      	ldrb	r2, [r7, #28]
 8002cba:	701a      	strb	r2, [r3, #0]
 8002cbc:	e008      	b.n	8002cd0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cbe:	78fb      	ldrb	r3, [r7, #3]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	212c      	movs	r1, #44	; 0x2c
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	4413      	add	r3, r2
 8002cca:	3342      	adds	r3, #66	; 0x42
 8002ccc:	2202      	movs	r2, #2
 8002cce:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002cd0:	787b      	ldrb	r3, [r7, #1]
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	f200 80c6 	bhi.w	8002e64 <HAL_HCD_HC_SubmitRequest+0x210>
 8002cd8:	a201      	add	r2, pc, #4	; (adr r2, 8002ce0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cde:	bf00      	nop
 8002ce0:	08002cf1 	.word	0x08002cf1
 8002ce4:	08002e51 	.word	0x08002e51
 8002ce8:	08002d55 	.word	0x08002d55
 8002cec:	08002dd3 	.word	0x08002dd3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002cf0:	7c3b      	ldrb	r3, [r7, #16]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	f040 80b8 	bne.w	8002e68 <HAL_HCD_HC_SubmitRequest+0x214>
 8002cf8:	78bb      	ldrb	r3, [r7, #2]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f040 80b4 	bne.w	8002e68 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002d00:	8b3b      	ldrh	r3, [r7, #24]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d108      	bne.n	8002d18 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002d06:	78fb      	ldrb	r3, [r7, #3]
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	212c      	movs	r1, #44	; 0x2c
 8002d0c:	fb01 f303 	mul.w	r3, r1, r3
 8002d10:	4413      	add	r3, r2
 8002d12:	3355      	adds	r3, #85	; 0x55
 8002d14:	2201      	movs	r2, #1
 8002d16:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d18:	78fb      	ldrb	r3, [r7, #3]
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	212c      	movs	r1, #44	; 0x2c
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	3355      	adds	r3, #85	; 0x55
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d109      	bne.n	8002d40 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d2c:	78fb      	ldrb	r3, [r7, #3]
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	212c      	movs	r1, #44	; 0x2c
 8002d32:	fb01 f303 	mul.w	r3, r1, r3
 8002d36:	4413      	add	r3, r2
 8002d38:	3342      	adds	r3, #66	; 0x42
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002d3e:	e093      	b.n	8002e68 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d40:	78fb      	ldrb	r3, [r7, #3]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	212c      	movs	r1, #44	; 0x2c
 8002d46:	fb01 f303 	mul.w	r3, r1, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3342      	adds	r3, #66	; 0x42
 8002d4e:	2202      	movs	r2, #2
 8002d50:	701a      	strb	r2, [r3, #0]
      break;
 8002d52:	e089      	b.n	8002e68 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002d54:	78bb      	ldrb	r3, [r7, #2]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d11d      	bne.n	8002d96 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d5a:	78fb      	ldrb	r3, [r7, #3]
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	212c      	movs	r1, #44	; 0x2c
 8002d60:	fb01 f303 	mul.w	r3, r1, r3
 8002d64:	4413      	add	r3, r2
 8002d66:	3355      	adds	r3, #85	; 0x55
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d6e:	78fb      	ldrb	r3, [r7, #3]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	212c      	movs	r1, #44	; 0x2c
 8002d74:	fb01 f303 	mul.w	r3, r1, r3
 8002d78:	4413      	add	r3, r2
 8002d7a:	3342      	adds	r3, #66	; 0x42
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002d80:	e073      	b.n	8002e6a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d82:	78fb      	ldrb	r3, [r7, #3]
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	212c      	movs	r1, #44	; 0x2c
 8002d88:	fb01 f303 	mul.w	r3, r1, r3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3342      	adds	r3, #66	; 0x42
 8002d90:	2202      	movs	r2, #2
 8002d92:	701a      	strb	r2, [r3, #0]
      break;
 8002d94:	e069      	b.n	8002e6a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	212c      	movs	r1, #44	; 0x2c
 8002d9c:	fb01 f303 	mul.w	r3, r1, r3
 8002da0:	4413      	add	r3, r2
 8002da2:	3354      	adds	r3, #84	; 0x54
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d109      	bne.n	8002dbe <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002daa:	78fb      	ldrb	r3, [r7, #3]
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	212c      	movs	r1, #44	; 0x2c
 8002db0:	fb01 f303 	mul.w	r3, r1, r3
 8002db4:	4413      	add	r3, r2
 8002db6:	3342      	adds	r3, #66	; 0x42
 8002db8:	2200      	movs	r2, #0
 8002dba:	701a      	strb	r2, [r3, #0]
      break;
 8002dbc:	e055      	b.n	8002e6a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002dbe:	78fb      	ldrb	r3, [r7, #3]
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	212c      	movs	r1, #44	; 0x2c
 8002dc4:	fb01 f303 	mul.w	r3, r1, r3
 8002dc8:	4413      	add	r3, r2
 8002dca:	3342      	adds	r3, #66	; 0x42
 8002dcc:	2202      	movs	r2, #2
 8002dce:	701a      	strb	r2, [r3, #0]
      break;
 8002dd0:	e04b      	b.n	8002e6a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002dd2:	78bb      	ldrb	r3, [r7, #2]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d11d      	bne.n	8002e14 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002dd8:	78fb      	ldrb	r3, [r7, #3]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	212c      	movs	r1, #44	; 0x2c
 8002dde:	fb01 f303 	mul.w	r3, r1, r3
 8002de2:	4413      	add	r3, r2
 8002de4:	3355      	adds	r3, #85	; 0x55
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d109      	bne.n	8002e00 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002dec:	78fb      	ldrb	r3, [r7, #3]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	212c      	movs	r1, #44	; 0x2c
 8002df2:	fb01 f303 	mul.w	r3, r1, r3
 8002df6:	4413      	add	r3, r2
 8002df8:	3342      	adds	r3, #66	; 0x42
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002dfe:	e034      	b.n	8002e6a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e00:	78fb      	ldrb	r3, [r7, #3]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	212c      	movs	r1, #44	; 0x2c
 8002e06:	fb01 f303 	mul.w	r3, r1, r3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3342      	adds	r3, #66	; 0x42
 8002e0e:	2202      	movs	r2, #2
 8002e10:	701a      	strb	r2, [r3, #0]
      break;
 8002e12:	e02a      	b.n	8002e6a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002e14:	78fb      	ldrb	r3, [r7, #3]
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	212c      	movs	r1, #44	; 0x2c
 8002e1a:	fb01 f303 	mul.w	r3, r1, r3
 8002e1e:	4413      	add	r3, r2
 8002e20:	3354      	adds	r3, #84	; 0x54
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d109      	bne.n	8002e3c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	212c      	movs	r1, #44	; 0x2c
 8002e2e:	fb01 f303 	mul.w	r3, r1, r3
 8002e32:	4413      	add	r3, r2
 8002e34:	3342      	adds	r3, #66	; 0x42
 8002e36:	2200      	movs	r2, #0
 8002e38:	701a      	strb	r2, [r3, #0]
      break;
 8002e3a:	e016      	b.n	8002e6a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e3c:	78fb      	ldrb	r3, [r7, #3]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	212c      	movs	r1, #44	; 0x2c
 8002e42:	fb01 f303 	mul.w	r3, r1, r3
 8002e46:	4413      	add	r3, r2
 8002e48:	3342      	adds	r3, #66	; 0x42
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	701a      	strb	r2, [r3, #0]
      break;
 8002e4e:	e00c      	b.n	8002e6a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e50:	78fb      	ldrb	r3, [r7, #3]
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	212c      	movs	r1, #44	; 0x2c
 8002e56:	fb01 f303 	mul.w	r3, r1, r3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3342      	adds	r3, #66	; 0x42
 8002e5e:	2200      	movs	r2, #0
 8002e60:	701a      	strb	r2, [r3, #0]
      break;
 8002e62:	e002      	b.n	8002e6a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002e64:	bf00      	nop
 8002e66:	e000      	b.n	8002e6a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002e68:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002e6a:	78fb      	ldrb	r3, [r7, #3]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	212c      	movs	r1, #44	; 0x2c
 8002e70:	fb01 f303 	mul.w	r3, r1, r3
 8002e74:	4413      	add	r3, r2
 8002e76:	3344      	adds	r3, #68	; 0x44
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002e7c:	78fb      	ldrb	r3, [r7, #3]
 8002e7e:	8b3a      	ldrh	r2, [r7, #24]
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	202c      	movs	r0, #44	; 0x2c
 8002e84:	fb00 f303 	mul.w	r3, r0, r3
 8002e88:	440b      	add	r3, r1
 8002e8a:	334c      	adds	r3, #76	; 0x4c
 8002e8c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002e8e:	78fb      	ldrb	r3, [r7, #3]
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	212c      	movs	r1, #44	; 0x2c
 8002e94:	fb01 f303 	mul.w	r3, r1, r3
 8002e98:	4413      	add	r3, r2
 8002e9a:	3360      	adds	r3, #96	; 0x60
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	212c      	movs	r1, #44	; 0x2c
 8002ea6:	fb01 f303 	mul.w	r3, r1, r3
 8002eaa:	4413      	add	r3, r2
 8002eac:	3350      	adds	r3, #80	; 0x50
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002eb2:	78fb      	ldrb	r3, [r7, #3]
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	212c      	movs	r1, #44	; 0x2c
 8002eb8:	fb01 f303 	mul.w	r3, r1, r3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	3339      	adds	r3, #57	; 0x39
 8002ec0:	78fa      	ldrb	r2, [r7, #3]
 8002ec2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002ec4:	78fb      	ldrb	r3, [r7, #3]
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	212c      	movs	r1, #44	; 0x2c
 8002eca:	fb01 f303 	mul.w	r3, r1, r3
 8002ece:	4413      	add	r3, r2
 8002ed0:	3361      	adds	r3, #97	; 0x61
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6818      	ldr	r0, [r3, #0]
 8002eda:	78fb      	ldrb	r3, [r7, #3]
 8002edc:	222c      	movs	r2, #44	; 0x2c
 8002ede:	fb02 f303 	mul.w	r3, r2, r3
 8002ee2:	3338      	adds	r3, #56	; 0x38
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	18d1      	adds	r1, r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	461a      	mov	r2, r3
 8002ef0:	f003 f962 	bl	80061b8 <USB_HC_StartXfer>
 8002ef4:	4603      	mov	r3, r0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop

08002f00 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f002 fe63 	bl	8005be2 <USB_GetMode>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	f040 80f6 	bne.w	8003110 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f002 fe47 	bl	8005bbc <USB_ReadInterrupts>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 80ec 	beq.w	800310e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f002 fe3e 	bl	8005bbc <USB_ReadInterrupts>
 8002f40:	4603      	mov	r3, r0
 8002f42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f4a:	d104      	bne.n	8002f56 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002f54:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f002 fe2e 	bl	8005bbc <USB_ReadInterrupts>
 8002f60:	4603      	mov	r3, r0
 8002f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f6a:	d104      	bne.n	8002f76 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f74:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f002 fe1e 	bl	8005bbc <USB_ReadInterrupts>
 8002f80:	4603      	mov	r3, r0
 8002f82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f8a:	d104      	bne.n	8002f96 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002f94:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f002 fe0e 	bl	8005bbc <USB_ReadInterrupts>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d103      	bne.n	8002fb2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f002 fe00 	bl	8005bbc <USB_ReadInterrupts>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fc6:	d11c      	bne.n	8003002 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002fd0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10f      	bne.n	8003002 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002fe2:	2110      	movs	r1, #16
 8002fe4:	6938      	ldr	r0, [r7, #16]
 8002fe6:	f002 fcef 	bl	80059c8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002fea:	6938      	ldr	r0, [r7, #16]
 8002fec:	f002 fd20 	bl	8005a30 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f002 fef6 	bl	8005de8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f005 fcc3 	bl	8008988 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f002 fdd8 	bl	8005bbc <USB_ReadInterrupts>
 800300c:	4603      	mov	r3, r0
 800300e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003012:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003016:	d102      	bne.n	800301e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f001 f89e 	bl	800415a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f002 fdca 	bl	8005bbc <USB_ReadInterrupts>
 8003028:	4603      	mov	r3, r0
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	2b08      	cmp	r3, #8
 8003030:	d106      	bne.n	8003040 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f005 fc8c 	bl	8008950 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2208      	movs	r2, #8
 800303e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f002 fdb9 	bl	8005bbc <USB_ReadInterrupts>
 800304a:	4603      	mov	r3, r0
 800304c:	f003 0310 	and.w	r3, r3, #16
 8003050:	2b10      	cmp	r3, #16
 8003052:	d101      	bne.n	8003058 <HAL_HCD_IRQHandler+0x158>
 8003054:	2301      	movs	r3, #1
 8003056:	e000      	b.n	800305a <HAL_HCD_IRQHandler+0x15a>
 8003058:	2300      	movs	r3, #0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d012      	beq.n	8003084 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	699a      	ldr	r2, [r3, #24]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0210 	bic.w	r2, r2, #16
 800306c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 ffa1 	bl	8003fb6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	699a      	ldr	r2, [r3, #24]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0210 	orr.w	r2, r2, #16
 8003082:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f002 fd97 	bl	8005bbc <USB_ReadInterrupts>
 800308e:	4603      	mov	r3, r0
 8003090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003094:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003098:	d13a      	bne.n	8003110 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f003 f9cc 	bl	800643c <USB_HC_ReadInterrupt>
 80030a4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	e025      	b.n	80030f8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d018      	beq.n	80030f2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	015a      	lsls	r2, r3, #5
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4413      	add	r3, r2
 80030c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030d6:	d106      	bne.n	80030e6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	4619      	mov	r1, r3
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f8ab 	bl	800323a <HCD_HC_IN_IRQHandler>
 80030e4:	e005      	b.n	80030f2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	4619      	mov	r1, r3
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 fbf9 	bl	80038e4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	3301      	adds	r3, #1
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d3d4      	bcc.n	80030ac <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800310a:	615a      	str	r2, [r3, #20]
 800310c:	e000      	b.n	8003110 <HAL_HCD_IRQHandler+0x210>
      return;
 800310e:	bf00      	nop
    }
  }
}
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003124:	2b01      	cmp	r3, #1
 8003126:	d101      	bne.n	800312c <HAL_HCD_Start+0x16>
 8003128:	2302      	movs	r3, #2
 800312a:	e013      	b.n	8003154 <HAL_HCD_Start+0x3e>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2101      	movs	r1, #1
 800313a:	4618      	mov	r0, r3
 800313c:	f002 feb8 	bl	8005eb0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f002 fbd0 	bl	80058ea <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800316a:	2b01      	cmp	r3, #1
 800316c:	d101      	bne.n	8003172 <HAL_HCD_Stop+0x16>
 800316e:	2302      	movs	r3, #2
 8003170:	e00d      	b.n	800318e <HAL_HCD_Stop+0x32>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f003 faa6 	bl	80066d0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f002 fe5a 	bl	8005e5c <USB_ResetPort>
 80031a8:	4603      	mov	r3, r0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	460b      	mov	r3, r1
 80031bc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80031be:	78fb      	ldrb	r3, [r7, #3]
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	212c      	movs	r1, #44	; 0x2c
 80031c4:	fb01 f303 	mul.w	r3, r1, r3
 80031c8:	4413      	add	r3, r2
 80031ca:	3360      	adds	r3, #96	; 0x60
 80031cc:	781b      	ldrb	r3, [r3, #0]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
 80031e2:	460b      	mov	r3, r1
 80031e4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80031e6:	78fb      	ldrb	r3, [r7, #3]
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	212c      	movs	r1, #44	; 0x2c
 80031ec:	fb01 f303 	mul.w	r3, r1, r3
 80031f0:	4413      	add	r3, r2
 80031f2:	3350      	adds	r3, #80	; 0x50
 80031f4:	681b      	ldr	r3, [r3, #0]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f002 fe9e 	bl	8005f50 <USB_GetCurrentFrame>
 8003214:	4603      	mov	r3, r0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b082      	sub	sp, #8
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f002 fe79 	bl	8005f22 <USB_GetHostSpeed>
 8003230:	4603      	mov	r3, r0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b086      	sub	sp, #24
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
 8003242:	460b      	mov	r3, r1
 8003244:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003250:	78fb      	ldrb	r3, [r7, #3]
 8003252:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	015a      	lsls	r2, r3, #5
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4413      	add	r3, r2
 800325c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b04      	cmp	r3, #4
 8003268:	d11a      	bne.n	80032a0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	015a      	lsls	r2, r3, #5
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	4413      	add	r3, r2
 8003272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003276:	461a      	mov	r2, r3
 8003278:	2304      	movs	r3, #4
 800327a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	212c      	movs	r1, #44	; 0x2c
 8003282:	fb01 f303 	mul.w	r3, r1, r3
 8003286:	4413      	add	r3, r2
 8003288:	3361      	adds	r3, #97	; 0x61
 800328a:	2206      	movs	r2, #6
 800328c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	4611      	mov	r1, r2
 8003298:	4618      	mov	r0, r3
 800329a:	f003 f8e0 	bl	800645e <USB_HC_Halt>
 800329e:	e0af      	b.n	8003400 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	015a      	lsls	r2, r3, #5
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	4413      	add	r3, r2
 80032a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032b6:	d11b      	bne.n	80032f0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c4:	461a      	mov	r2, r3
 80032c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	212c      	movs	r1, #44	; 0x2c
 80032d2:	fb01 f303 	mul.w	r3, r1, r3
 80032d6:	4413      	add	r3, r2
 80032d8:	3361      	adds	r3, #97	; 0x61
 80032da:	2207      	movs	r2, #7
 80032dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	4611      	mov	r1, r2
 80032e8:	4618      	mov	r0, r3
 80032ea:	f003 f8b8 	bl	800645e <USB_HC_Halt>
 80032ee:	e087      	b.n	8003400 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 0320 	and.w	r3, r3, #32
 8003302:	2b20      	cmp	r3, #32
 8003304:	d109      	bne.n	800331a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	4413      	add	r3, r2
 800330e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003312:	461a      	mov	r2, r3
 8003314:	2320      	movs	r3, #32
 8003316:	6093      	str	r3, [r2, #8]
 8003318:	e072      	b.n	8003400 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	015a      	lsls	r2, r3, #5
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	4413      	add	r3, r2
 8003322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 0308 	and.w	r3, r3, #8
 800332c:	2b08      	cmp	r3, #8
 800332e:	d11a      	bne.n	8003366 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4413      	add	r3, r2
 8003338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333c:	461a      	mov	r2, r3
 800333e:	2308      	movs	r3, #8
 8003340:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	212c      	movs	r1, #44	; 0x2c
 8003348:	fb01 f303 	mul.w	r3, r1, r3
 800334c:	4413      	add	r3, r2
 800334e:	3361      	adds	r3, #97	; 0x61
 8003350:	2205      	movs	r2, #5
 8003352:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	4611      	mov	r1, r2
 800335e:	4618      	mov	r0, r3
 8003360:	f003 f87d 	bl	800645e <USB_HC_Halt>
 8003364:	e04c      	b.n	8003400 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	015a      	lsls	r2, r3, #5
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	4413      	add	r3, r2
 800336e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800337c:	d11b      	bne.n	80033b6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	015a      	lsls	r2, r3, #5
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	4413      	add	r3, r2
 8003386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338a:	461a      	mov	r2, r3
 800338c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003390:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	212c      	movs	r1, #44	; 0x2c
 8003398:	fb01 f303 	mul.w	r3, r1, r3
 800339c:	4413      	add	r3, r2
 800339e:	3361      	adds	r3, #97	; 0x61
 80033a0:	2208      	movs	r2, #8
 80033a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	4611      	mov	r1, r2
 80033ae:	4618      	mov	r0, r3
 80033b0:	f003 f855 	bl	800645e <USB_HC_Halt>
 80033b4:	e024      	b.n	8003400 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	015a      	lsls	r2, r3, #5
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	4413      	add	r3, r2
 80033be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c8:	2b80      	cmp	r3, #128	; 0x80
 80033ca:	d119      	bne.n	8003400 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	015a      	lsls	r2, r3, #5
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	4413      	add	r3, r2
 80033d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d8:	461a      	mov	r2, r3
 80033da:	2380      	movs	r3, #128	; 0x80
 80033dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	212c      	movs	r1, #44	; 0x2c
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	4413      	add	r3, r2
 80033ea:	3361      	adds	r3, #97	; 0x61
 80033ec:	2206      	movs	r2, #6
 80033ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	4611      	mov	r1, r2
 80033fa:	4618      	mov	r0, r3
 80033fc:	f003 f82f 	bl	800645e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	015a      	lsls	r2, r3, #5
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	4413      	add	r3, r2
 8003408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003412:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003416:	d112      	bne.n	800343e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	4611      	mov	r1, r2
 8003422:	4618      	mov	r0, r3
 8003424:	f003 f81b 	bl	800645e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	015a      	lsls	r2, r3, #5
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	4413      	add	r3, r2
 8003430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003434:	461a      	mov	r2, r3
 8003436:	f44f 7300 	mov.w	r3, #512	; 0x200
 800343a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800343c:	e24e      	b.n	80038dc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	015a      	lsls	r2, r3, #5
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	4413      	add	r3, r2
 8003446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b01      	cmp	r3, #1
 8003452:	f040 80df 	bne.w	8003614 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d019      	beq.n	8003492 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	212c      	movs	r1, #44	; 0x2c
 8003464:	fb01 f303 	mul.w	r3, r1, r3
 8003468:	4413      	add	r3, r2
 800346a:	3348      	adds	r3, #72	; 0x48
 800346c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	0159      	lsls	r1, r3, #5
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	440b      	add	r3, r1
 8003476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003480:	1ad2      	subs	r2, r2, r3
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	202c      	movs	r0, #44	; 0x2c
 8003488:	fb00 f303 	mul.w	r3, r0, r3
 800348c:	440b      	add	r3, r1
 800348e:	3350      	adds	r3, #80	; 0x50
 8003490:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	212c      	movs	r1, #44	; 0x2c
 8003498:	fb01 f303 	mul.w	r3, r1, r3
 800349c:	4413      	add	r3, r2
 800349e:	3361      	adds	r3, #97	; 0x61
 80034a0:	2201      	movs	r2, #1
 80034a2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	212c      	movs	r1, #44	; 0x2c
 80034aa:	fb01 f303 	mul.w	r3, r1, r3
 80034ae:	4413      	add	r3, r2
 80034b0:	335c      	adds	r3, #92	; 0x5c
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	015a      	lsls	r2, r3, #5
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	4413      	add	r3, r2
 80034be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c2:	461a      	mov	r2, r3
 80034c4:	2301      	movs	r3, #1
 80034c6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	212c      	movs	r1, #44	; 0x2c
 80034ce:	fb01 f303 	mul.w	r3, r1, r3
 80034d2:	4413      	add	r3, r2
 80034d4:	333f      	adds	r3, #63	; 0x3f
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d009      	beq.n	80034f0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	212c      	movs	r1, #44	; 0x2c
 80034e2:	fb01 f303 	mul.w	r3, r1, r3
 80034e6:	4413      	add	r3, r2
 80034e8:	333f      	adds	r3, #63	; 0x3f
 80034ea:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d111      	bne.n	8003514 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	4611      	mov	r1, r2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f002 ffaf 	bl	800645e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	4413      	add	r3, r2
 8003508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800350c:	461a      	mov	r2, r3
 800350e:	2310      	movs	r3, #16
 8003510:	6093      	str	r3, [r2, #8]
 8003512:	e03a      	b.n	800358a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	212c      	movs	r1, #44	; 0x2c
 800351a:	fb01 f303 	mul.w	r3, r1, r3
 800351e:	4413      	add	r3, r2
 8003520:	333f      	adds	r3, #63	; 0x3f
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b03      	cmp	r3, #3
 8003526:	d009      	beq.n	800353c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	212c      	movs	r1, #44	; 0x2c
 800352e:	fb01 f303 	mul.w	r3, r1, r3
 8003532:	4413      	add	r3, r2
 8003534:	333f      	adds	r3, #63	; 0x3f
 8003536:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003538:	2b01      	cmp	r3, #1
 800353a:	d126      	bne.n	800358a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	015a      	lsls	r2, r3, #5
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	4413      	add	r3, r2
 8003544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	0151      	lsls	r1, r2, #5
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	440a      	add	r2, r1
 8003552:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003556:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800355a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	212c      	movs	r1, #44	; 0x2c
 8003562:	fb01 f303 	mul.w	r3, r1, r3
 8003566:	4413      	add	r3, r2
 8003568:	3360      	adds	r3, #96	; 0x60
 800356a:	2201      	movs	r2, #1
 800356c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	b2d9      	uxtb	r1, r3
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	202c      	movs	r0, #44	; 0x2c
 8003578:	fb00 f303 	mul.w	r3, r0, r3
 800357c:	4413      	add	r3, r2
 800357e:	3360      	adds	r3, #96	; 0x60
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f005 fa0d 	bl	80089a4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d12b      	bne.n	80035ea <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	212c      	movs	r1, #44	; 0x2c
 8003598:	fb01 f303 	mul.w	r3, r1, r3
 800359c:	4413      	add	r3, r2
 800359e:	3348      	adds	r3, #72	; 0x48
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	202c      	movs	r0, #44	; 0x2c
 80035a8:	fb00 f202 	mul.w	r2, r0, r2
 80035ac:	440a      	add	r2, r1
 80035ae:	3240      	adds	r2, #64	; 0x40
 80035b0:	8812      	ldrh	r2, [r2, #0]
 80035b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 818e 	beq.w	80038dc <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	212c      	movs	r1, #44	; 0x2c
 80035c6:	fb01 f303 	mul.w	r3, r1, r3
 80035ca:	4413      	add	r3, r2
 80035cc:	3354      	adds	r3, #84	; 0x54
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	f083 0301 	eor.w	r3, r3, #1
 80035d4:	b2d8      	uxtb	r0, r3
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	212c      	movs	r1, #44	; 0x2c
 80035dc:	fb01 f303 	mul.w	r3, r1, r3
 80035e0:	4413      	add	r3, r2
 80035e2:	3354      	adds	r3, #84	; 0x54
 80035e4:	4602      	mov	r2, r0
 80035e6:	701a      	strb	r2, [r3, #0]
}
 80035e8:	e178      	b.n	80038dc <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	212c      	movs	r1, #44	; 0x2c
 80035f0:	fb01 f303 	mul.w	r3, r1, r3
 80035f4:	4413      	add	r3, r2
 80035f6:	3354      	adds	r3, #84	; 0x54
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	f083 0301 	eor.w	r3, r3, #1
 80035fe:	b2d8      	uxtb	r0, r3
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	212c      	movs	r1, #44	; 0x2c
 8003606:	fb01 f303 	mul.w	r3, r1, r3
 800360a:	4413      	add	r3, r2
 800360c:	3354      	adds	r3, #84	; 0x54
 800360e:	4602      	mov	r2, r0
 8003610:	701a      	strb	r2, [r3, #0]
}
 8003612:	e163      	b.n	80038dc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	4413      	add	r3, r2
 800361c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b02      	cmp	r3, #2
 8003628:	f040 80f6 	bne.w	8003818 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	212c      	movs	r1, #44	; 0x2c
 8003632:	fb01 f303 	mul.w	r3, r1, r3
 8003636:	4413      	add	r3, r2
 8003638:	3361      	adds	r3, #97	; 0x61
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d109      	bne.n	8003654 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	212c      	movs	r1, #44	; 0x2c
 8003646:	fb01 f303 	mul.w	r3, r1, r3
 800364a:	4413      	add	r3, r2
 800364c:	3360      	adds	r3, #96	; 0x60
 800364e:	2201      	movs	r2, #1
 8003650:	701a      	strb	r2, [r3, #0]
 8003652:	e0c9      	b.n	80037e8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	212c      	movs	r1, #44	; 0x2c
 800365a:	fb01 f303 	mul.w	r3, r1, r3
 800365e:	4413      	add	r3, r2
 8003660:	3361      	adds	r3, #97	; 0x61
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b05      	cmp	r3, #5
 8003666:	d109      	bne.n	800367c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	212c      	movs	r1, #44	; 0x2c
 800366e:	fb01 f303 	mul.w	r3, r1, r3
 8003672:	4413      	add	r3, r2
 8003674:	3360      	adds	r3, #96	; 0x60
 8003676:	2205      	movs	r2, #5
 8003678:	701a      	strb	r2, [r3, #0]
 800367a:	e0b5      	b.n	80037e8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	212c      	movs	r1, #44	; 0x2c
 8003682:	fb01 f303 	mul.w	r3, r1, r3
 8003686:	4413      	add	r3, r2
 8003688:	3361      	adds	r3, #97	; 0x61
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b06      	cmp	r3, #6
 800368e:	d009      	beq.n	80036a4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	212c      	movs	r1, #44	; 0x2c
 8003696:	fb01 f303 	mul.w	r3, r1, r3
 800369a:	4413      	add	r3, r2
 800369c:	3361      	adds	r3, #97	; 0x61
 800369e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036a0:	2b08      	cmp	r3, #8
 80036a2:	d150      	bne.n	8003746 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	212c      	movs	r1, #44	; 0x2c
 80036aa:	fb01 f303 	mul.w	r3, r1, r3
 80036ae:	4413      	add	r3, r2
 80036b0:	335c      	adds	r3, #92	; 0x5c
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	1c5a      	adds	r2, r3, #1
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	202c      	movs	r0, #44	; 0x2c
 80036bc:	fb00 f303 	mul.w	r3, r0, r3
 80036c0:	440b      	add	r3, r1
 80036c2:	335c      	adds	r3, #92	; 0x5c
 80036c4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	212c      	movs	r1, #44	; 0x2c
 80036cc:	fb01 f303 	mul.w	r3, r1, r3
 80036d0:	4413      	add	r3, r2
 80036d2:	335c      	adds	r3, #92	; 0x5c
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d912      	bls.n	8003700 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	212c      	movs	r1, #44	; 0x2c
 80036e0:	fb01 f303 	mul.w	r3, r1, r3
 80036e4:	4413      	add	r3, r2
 80036e6:	335c      	adds	r3, #92	; 0x5c
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	212c      	movs	r1, #44	; 0x2c
 80036f2:	fb01 f303 	mul.w	r3, r1, r3
 80036f6:	4413      	add	r3, r2
 80036f8:	3360      	adds	r3, #96	; 0x60
 80036fa:	2204      	movs	r2, #4
 80036fc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80036fe:	e073      	b.n	80037e8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	212c      	movs	r1, #44	; 0x2c
 8003706:	fb01 f303 	mul.w	r3, r1, r3
 800370a:	4413      	add	r3, r2
 800370c:	3360      	adds	r3, #96	; 0x60
 800370e:	2202      	movs	r2, #2
 8003710:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	015a      	lsls	r2, r3, #5
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	4413      	add	r3, r2
 800371a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003728:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003730:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	015a      	lsls	r2, r3, #5
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	4413      	add	r3, r2
 800373a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800373e:	461a      	mov	r2, r3
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003744:	e050      	b.n	80037e8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	212c      	movs	r1, #44	; 0x2c
 800374c:	fb01 f303 	mul.w	r3, r1, r3
 8003750:	4413      	add	r3, r2
 8003752:	3361      	adds	r3, #97	; 0x61
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2b03      	cmp	r3, #3
 8003758:	d122      	bne.n	80037a0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	212c      	movs	r1, #44	; 0x2c
 8003760:	fb01 f303 	mul.w	r3, r1, r3
 8003764:	4413      	add	r3, r2
 8003766:	3360      	adds	r3, #96	; 0x60
 8003768:	2202      	movs	r2, #2
 800376a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	4413      	add	r3, r2
 8003774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003782:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800378a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	015a      	lsls	r2, r3, #5
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	4413      	add	r3, r2
 8003794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003798:	461a      	mov	r2, r3
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	e023      	b.n	80037e8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	212c      	movs	r1, #44	; 0x2c
 80037a6:	fb01 f303 	mul.w	r3, r1, r3
 80037aa:	4413      	add	r3, r2
 80037ac:	3361      	adds	r3, #97	; 0x61
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b07      	cmp	r3, #7
 80037b2:	d119      	bne.n	80037e8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	212c      	movs	r1, #44	; 0x2c
 80037ba:	fb01 f303 	mul.w	r3, r1, r3
 80037be:	4413      	add	r3, r2
 80037c0:	335c      	adds	r3, #92	; 0x5c
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	1c5a      	adds	r2, r3, #1
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	202c      	movs	r0, #44	; 0x2c
 80037cc:	fb00 f303 	mul.w	r3, r0, r3
 80037d0:	440b      	add	r3, r1
 80037d2:	335c      	adds	r3, #92	; 0x5c
 80037d4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	212c      	movs	r1, #44	; 0x2c
 80037dc:	fb01 f303 	mul.w	r3, r1, r3
 80037e0:	4413      	add	r3, r2
 80037e2:	3360      	adds	r3, #96	; 0x60
 80037e4:	2204      	movs	r2, #4
 80037e6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	015a      	lsls	r2, r3, #5
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f4:	461a      	mov	r2, r3
 80037f6:	2302      	movs	r3, #2
 80037f8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	b2d9      	uxtb	r1, r3
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	202c      	movs	r0, #44	; 0x2c
 8003804:	fb00 f303 	mul.w	r3, r0, r3
 8003808:	4413      	add	r3, r2
 800380a:	3360      	adds	r3, #96	; 0x60
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f005 f8c7 	bl	80089a4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003816:	e061      	b.n	80038dc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	015a      	lsls	r2, r3, #5
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	4413      	add	r3, r2
 8003820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 0310 	and.w	r3, r3, #16
 800382a:	2b10      	cmp	r3, #16
 800382c:	d156      	bne.n	80038dc <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	212c      	movs	r1, #44	; 0x2c
 8003834:	fb01 f303 	mul.w	r3, r1, r3
 8003838:	4413      	add	r3, r2
 800383a:	333f      	adds	r3, #63	; 0x3f
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b03      	cmp	r3, #3
 8003840:	d111      	bne.n	8003866 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	212c      	movs	r1, #44	; 0x2c
 8003848:	fb01 f303 	mul.w	r3, r1, r3
 800384c:	4413      	add	r3, r2
 800384e:	335c      	adds	r3, #92	; 0x5c
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	4611      	mov	r1, r2
 800385e:	4618      	mov	r0, r3
 8003860:	f002 fdfd 	bl	800645e <USB_HC_Halt>
 8003864:	e031      	b.n	80038ca <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	212c      	movs	r1, #44	; 0x2c
 800386c:	fb01 f303 	mul.w	r3, r1, r3
 8003870:	4413      	add	r3, r2
 8003872:	333f      	adds	r3, #63	; 0x3f
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d009      	beq.n	800388e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	212c      	movs	r1, #44	; 0x2c
 8003880:	fb01 f303 	mul.w	r3, r1, r3
 8003884:	4413      	add	r3, r2
 8003886:	333f      	adds	r3, #63	; 0x3f
 8003888:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800388a:	2b02      	cmp	r3, #2
 800388c:	d11d      	bne.n	80038ca <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	212c      	movs	r1, #44	; 0x2c
 8003894:	fb01 f303 	mul.w	r3, r1, r3
 8003898:	4413      	add	r3, r2
 800389a:	335c      	adds	r3, #92	; 0x5c
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d110      	bne.n	80038ca <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	212c      	movs	r1, #44	; 0x2c
 80038ae:	fb01 f303 	mul.w	r3, r1, r3
 80038b2:	4413      	add	r3, r2
 80038b4:	3361      	adds	r3, #97	; 0x61
 80038b6:	2203      	movs	r2, #3
 80038b8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	b2d2      	uxtb	r2, r2
 80038c2:	4611      	mov	r1, r2
 80038c4:	4618      	mov	r0, r3
 80038c6:	f002 fdca 	bl	800645e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	015a      	lsls	r2, r3, #5
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d6:	461a      	mov	r2, r3
 80038d8:	2310      	movs	r3, #16
 80038da:	6093      	str	r3, [r2, #8]
}
 80038dc:	bf00      	nop
 80038de:	3718      	adds	r7, #24
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b088      	sub	sp, #32
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	460b      	mov	r3, r1
 80038ee:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80038fa:	78fb      	ldrb	r3, [r7, #3]
 80038fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	015a      	lsls	r2, r3, #5
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	4413      	add	r3, r2
 8003906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b04      	cmp	r3, #4
 8003912:	d11a      	bne.n	800394a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	015a      	lsls	r2, r3, #5
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	4413      	add	r3, r2
 800391c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003920:	461a      	mov	r2, r3
 8003922:	2304      	movs	r3, #4
 8003924:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	212c      	movs	r1, #44	; 0x2c
 800392c:	fb01 f303 	mul.w	r3, r1, r3
 8003930:	4413      	add	r3, r2
 8003932:	3361      	adds	r3, #97	; 0x61
 8003934:	2206      	movs	r2, #6
 8003936:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	4611      	mov	r1, r2
 8003942:	4618      	mov	r0, r3
 8003944:	f002 fd8b 	bl	800645e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003948:	e331      	b.n	8003fae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	4413      	add	r3, r2
 8003952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	2b20      	cmp	r3, #32
 800395e:	d12e      	bne.n	80039be <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	4413      	add	r3, r2
 8003968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800396c:	461a      	mov	r2, r3
 800396e:	2320      	movs	r3, #32
 8003970:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	212c      	movs	r1, #44	; 0x2c
 8003978:	fb01 f303 	mul.w	r3, r1, r3
 800397c:	4413      	add	r3, r2
 800397e:	333d      	adds	r3, #61	; 0x3d
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2b01      	cmp	r3, #1
 8003984:	f040 8313 	bne.w	8003fae <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	212c      	movs	r1, #44	; 0x2c
 800398e:	fb01 f303 	mul.w	r3, r1, r3
 8003992:	4413      	add	r3, r2
 8003994:	333d      	adds	r3, #61	; 0x3d
 8003996:	2200      	movs	r2, #0
 8003998:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	212c      	movs	r1, #44	; 0x2c
 80039a0:	fb01 f303 	mul.w	r3, r1, r3
 80039a4:	4413      	add	r3, r2
 80039a6:	3360      	adds	r3, #96	; 0x60
 80039a8:	2202      	movs	r2, #2
 80039aa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	4611      	mov	r1, r2
 80039b6:	4618      	mov	r0, r3
 80039b8:	f002 fd51 	bl	800645e <USB_HC_Halt>
}
 80039bc:	e2f7      	b.n	8003fae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039d4:	d112      	bne.n	80039fc <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	015a      	lsls	r2, r3, #5
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	4413      	add	r3, r2
 80039de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e2:	461a      	mov	r2, r3
 80039e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039e8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	4611      	mov	r1, r2
 80039f4:	4618      	mov	r0, r3
 80039f6:	f002 fd32 	bl	800645e <USB_HC_Halt>
}
 80039fa:	e2d8      	b.n	8003fae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d140      	bne.n	8003a94 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	212c      	movs	r1, #44	; 0x2c
 8003a18:	fb01 f303 	mul.w	r3, r1, r3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	335c      	adds	r3, #92	; 0x5c
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a36:	2b40      	cmp	r3, #64	; 0x40
 8003a38:	d111      	bne.n	8003a5e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	212c      	movs	r1, #44	; 0x2c
 8003a40:	fb01 f303 	mul.w	r3, r1, r3
 8003a44:	4413      	add	r3, r2
 8003a46:	333d      	adds	r3, #61	; 0x3d
 8003a48:	2201      	movs	r2, #1
 8003a4a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a58:	461a      	mov	r2, r3
 8003a5a:	2340      	movs	r3, #64	; 0x40
 8003a5c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	015a      	lsls	r2, r3, #5
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	4413      	add	r3, r2
 8003a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	212c      	movs	r1, #44	; 0x2c
 8003a76:	fb01 f303 	mul.w	r3, r1, r3
 8003a7a:	4413      	add	r3, r2
 8003a7c:	3361      	adds	r3, #97	; 0x61
 8003a7e:	2201      	movs	r2, #1
 8003a80:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	b2d2      	uxtb	r2, r2
 8003a8a:	4611      	mov	r1, r2
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f002 fce6 	bl	800645e <USB_HC_Halt>
}
 8003a92:	e28c      	b.n	8003fae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa6:	2b40      	cmp	r3, #64	; 0x40
 8003aa8:	d12c      	bne.n	8003b04 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	212c      	movs	r1, #44	; 0x2c
 8003ab0:	fb01 f303 	mul.w	r3, r1, r3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	3361      	adds	r3, #97	; 0x61
 8003ab8:	2204      	movs	r2, #4
 8003aba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	212c      	movs	r1, #44	; 0x2c
 8003ac2:	fb01 f303 	mul.w	r3, r1, r3
 8003ac6:	4413      	add	r3, r2
 8003ac8:	333d      	adds	r3, #61	; 0x3d
 8003aca:	2201      	movs	r2, #1
 8003acc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	212c      	movs	r1, #44	; 0x2c
 8003ad4:	fb01 f303 	mul.w	r3, r1, r3
 8003ad8:	4413      	add	r3, r2
 8003ada:	335c      	adds	r3, #92	; 0x5c
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	4611      	mov	r1, r2
 8003aea:	4618      	mov	r0, r3
 8003aec:	f002 fcb7 	bl	800645e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003afc:	461a      	mov	r2, r3
 8003afe:	2340      	movs	r3, #64	; 0x40
 8003b00:	6093      	str	r3, [r2, #8]
}
 8003b02:	e254      	b.n	8003fae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	015a      	lsls	r2, r3, #5
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 0308 	and.w	r3, r3, #8
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d11a      	bne.n	8003b50 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	015a      	lsls	r2, r3, #5
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b26:	461a      	mov	r2, r3
 8003b28:	2308      	movs	r3, #8
 8003b2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	212c      	movs	r1, #44	; 0x2c
 8003b32:	fb01 f303 	mul.w	r3, r1, r3
 8003b36:	4413      	add	r3, r2
 8003b38:	3361      	adds	r3, #97	; 0x61
 8003b3a:	2205      	movs	r2, #5
 8003b3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	4611      	mov	r1, r2
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f002 fc88 	bl	800645e <USB_HC_Halt>
}
 8003b4e:	e22e      	b.n	8003fae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	015a      	lsls	r2, r3, #5
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	4413      	add	r3, r2
 8003b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 0310 	and.w	r3, r3, #16
 8003b62:	2b10      	cmp	r3, #16
 8003b64:	d140      	bne.n	8003be8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	212c      	movs	r1, #44	; 0x2c
 8003b6c:	fb01 f303 	mul.w	r3, r1, r3
 8003b70:	4413      	add	r3, r2
 8003b72:	335c      	adds	r3, #92	; 0x5c
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	212c      	movs	r1, #44	; 0x2c
 8003b7e:	fb01 f303 	mul.w	r3, r1, r3
 8003b82:	4413      	add	r3, r2
 8003b84:	3361      	adds	r3, #97	; 0x61
 8003b86:	2203      	movs	r2, #3
 8003b88:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	212c      	movs	r1, #44	; 0x2c
 8003b90:	fb01 f303 	mul.w	r3, r1, r3
 8003b94:	4413      	add	r3, r2
 8003b96:	333d      	adds	r3, #61	; 0x3d
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d112      	bne.n	8003bc4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	212c      	movs	r1, #44	; 0x2c
 8003ba4:	fb01 f303 	mul.w	r3, r1, r3
 8003ba8:	4413      	add	r3, r2
 8003baa:	333c      	adds	r3, #60	; 0x3c
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d108      	bne.n	8003bc4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	212c      	movs	r1, #44	; 0x2c
 8003bb8:	fb01 f303 	mul.w	r3, r1, r3
 8003bbc:	4413      	add	r3, r2
 8003bbe:	333d      	adds	r3, #61	; 0x3d
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	b2d2      	uxtb	r2, r2
 8003bcc:	4611      	mov	r1, r2
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f002 fc45 	bl	800645e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	015a      	lsls	r2, r3, #5
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be0:	461a      	mov	r2, r3
 8003be2:	2310      	movs	r3, #16
 8003be4:	6093      	str	r3, [r2, #8]
}
 8003be6:	e1e2      	b.n	8003fae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfa:	2b80      	cmp	r3, #128	; 0x80
 8003bfc:	d164      	bne.n	8003cc8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d111      	bne.n	8003c2a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	212c      	movs	r1, #44	; 0x2c
 8003c0c:	fb01 f303 	mul.w	r3, r1, r3
 8003c10:	4413      	add	r3, r2
 8003c12:	3361      	adds	r3, #97	; 0x61
 8003c14:	2206      	movs	r2, #6
 8003c16:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	4611      	mov	r1, r2
 8003c22:	4618      	mov	r0, r3
 8003c24:	f002 fc1b 	bl	800645e <USB_HC_Halt>
 8003c28:	e044      	b.n	8003cb4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	212c      	movs	r1, #44	; 0x2c
 8003c30:	fb01 f303 	mul.w	r3, r1, r3
 8003c34:	4413      	add	r3, r2
 8003c36:	335c      	adds	r3, #92	; 0x5c
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	202c      	movs	r0, #44	; 0x2c
 8003c42:	fb00 f303 	mul.w	r3, r0, r3
 8003c46:	440b      	add	r3, r1
 8003c48:	335c      	adds	r3, #92	; 0x5c
 8003c4a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	212c      	movs	r1, #44	; 0x2c
 8003c52:	fb01 f303 	mul.w	r3, r1, r3
 8003c56:	4413      	add	r3, r2
 8003c58:	335c      	adds	r3, #92	; 0x5c
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d920      	bls.n	8003ca2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	212c      	movs	r1, #44	; 0x2c
 8003c66:	fb01 f303 	mul.w	r3, r1, r3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	335c      	adds	r3, #92	; 0x5c
 8003c6e:	2200      	movs	r2, #0
 8003c70:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	212c      	movs	r1, #44	; 0x2c
 8003c78:	fb01 f303 	mul.w	r3, r1, r3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	3360      	adds	r3, #96	; 0x60
 8003c80:	2204      	movs	r2, #4
 8003c82:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	b2d9      	uxtb	r1, r3
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	202c      	movs	r0, #44	; 0x2c
 8003c8e:	fb00 f303 	mul.w	r3, r0, r3
 8003c92:	4413      	add	r3, r2
 8003c94:	3360      	adds	r3, #96	; 0x60
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f004 fe82 	bl	80089a4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003ca0:	e008      	b.n	8003cb4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	212c      	movs	r1, #44	; 0x2c
 8003ca8:	fb01 f303 	mul.w	r3, r1, r3
 8003cac:	4413      	add	r3, r2
 8003cae:	3360      	adds	r3, #96	; 0x60
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	2380      	movs	r3, #128	; 0x80
 8003cc4:	6093      	str	r3, [r2, #8]
}
 8003cc6:	e172      	b.n	8003fae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	015a      	lsls	r2, r3, #5
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cde:	d11b      	bne.n	8003d18 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	212c      	movs	r1, #44	; 0x2c
 8003ce6:	fb01 f303 	mul.w	r3, r1, r3
 8003cea:	4413      	add	r3, r2
 8003cec:	3361      	adds	r3, #97	; 0x61
 8003cee:	2208      	movs	r2, #8
 8003cf0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	b2d2      	uxtb	r2, r2
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f002 fbae 	bl	800645e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	015a      	lsls	r2, r3, #5
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	4413      	add	r3, r2
 8003d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d0e:	461a      	mov	r2, r3
 8003d10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d14:	6093      	str	r3, [r2, #8]
}
 8003d16:	e14a      	b.n	8003fae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	f040 813f 	bne.w	8003fae <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	212c      	movs	r1, #44	; 0x2c
 8003d36:	fb01 f303 	mul.w	r3, r1, r3
 8003d3a:	4413      	add	r3, r2
 8003d3c:	3361      	adds	r3, #97	; 0x61
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d17d      	bne.n	8003e40 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	212c      	movs	r1, #44	; 0x2c
 8003d4a:	fb01 f303 	mul.w	r3, r1, r3
 8003d4e:	4413      	add	r3, r2
 8003d50:	3360      	adds	r3, #96	; 0x60
 8003d52:	2201      	movs	r2, #1
 8003d54:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	212c      	movs	r1, #44	; 0x2c
 8003d5c:	fb01 f303 	mul.w	r3, r1, r3
 8003d60:	4413      	add	r3, r2
 8003d62:	333f      	adds	r3, #63	; 0x3f
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d00a      	beq.n	8003d80 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	212c      	movs	r1, #44	; 0x2c
 8003d70:	fb01 f303 	mul.w	r3, r1, r3
 8003d74:	4413      	add	r3, r2
 8003d76:	333f      	adds	r3, #63	; 0x3f
 8003d78:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003d7a:	2b03      	cmp	r3, #3
 8003d7c:	f040 8100 	bne.w	8003f80 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d113      	bne.n	8003db0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	212c      	movs	r1, #44	; 0x2c
 8003d8e:	fb01 f303 	mul.w	r3, r1, r3
 8003d92:	4413      	add	r3, r2
 8003d94:	3355      	adds	r3, #85	; 0x55
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	f083 0301 	eor.w	r3, r3, #1
 8003d9c:	b2d8      	uxtb	r0, r3
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	212c      	movs	r1, #44	; 0x2c
 8003da4:	fb01 f303 	mul.w	r3, r1, r3
 8003da8:	4413      	add	r3, r2
 8003daa:	3355      	adds	r3, #85	; 0x55
 8003dac:	4602      	mov	r2, r0
 8003dae:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	f040 80e3 	bne.w	8003f80 <HCD_HC_OUT_IRQHandler+0x69c>
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	212c      	movs	r1, #44	; 0x2c
 8003dc0:	fb01 f303 	mul.w	r3, r1, r3
 8003dc4:	4413      	add	r3, r2
 8003dc6:	334c      	adds	r3, #76	; 0x4c
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 80d8 	beq.w	8003f80 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	212c      	movs	r1, #44	; 0x2c
 8003dd6:	fb01 f303 	mul.w	r3, r1, r3
 8003dda:	4413      	add	r3, r2
 8003ddc:	334c      	adds	r3, #76	; 0x4c
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6879      	ldr	r1, [r7, #4]
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	202c      	movs	r0, #44	; 0x2c
 8003de6:	fb00 f202 	mul.w	r2, r0, r2
 8003dea:	440a      	add	r2, r1
 8003dec:	3240      	adds	r2, #64	; 0x40
 8003dee:	8812      	ldrh	r2, [r2, #0]
 8003df0:	4413      	add	r3, r2
 8003df2:	3b01      	subs	r3, #1
 8003df4:	6879      	ldr	r1, [r7, #4]
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	202c      	movs	r0, #44	; 0x2c
 8003dfa:	fb00 f202 	mul.w	r2, r0, r2
 8003dfe:	440a      	add	r2, r1
 8003e00:	3240      	adds	r2, #64	; 0x40
 8003e02:	8812      	ldrh	r2, [r2, #0]
 8003e04:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 80b5 	beq.w	8003f80 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	212c      	movs	r1, #44	; 0x2c
 8003e1c:	fb01 f303 	mul.w	r3, r1, r3
 8003e20:	4413      	add	r3, r2
 8003e22:	3355      	adds	r3, #85	; 0x55
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	f083 0301 	eor.w	r3, r3, #1
 8003e2a:	b2d8      	uxtb	r0, r3
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	212c      	movs	r1, #44	; 0x2c
 8003e32:	fb01 f303 	mul.w	r3, r1, r3
 8003e36:	4413      	add	r3, r2
 8003e38:	3355      	adds	r3, #85	; 0x55
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	701a      	strb	r2, [r3, #0]
 8003e3e:	e09f      	b.n	8003f80 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	212c      	movs	r1, #44	; 0x2c
 8003e46:	fb01 f303 	mul.w	r3, r1, r3
 8003e4a:	4413      	add	r3, r2
 8003e4c:	3361      	adds	r3, #97	; 0x61
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b03      	cmp	r3, #3
 8003e52:	d109      	bne.n	8003e68 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	212c      	movs	r1, #44	; 0x2c
 8003e5a:	fb01 f303 	mul.w	r3, r1, r3
 8003e5e:	4413      	add	r3, r2
 8003e60:	3360      	adds	r3, #96	; 0x60
 8003e62:	2202      	movs	r2, #2
 8003e64:	701a      	strb	r2, [r3, #0]
 8003e66:	e08b      	b.n	8003f80 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	212c      	movs	r1, #44	; 0x2c
 8003e6e:	fb01 f303 	mul.w	r3, r1, r3
 8003e72:	4413      	add	r3, r2
 8003e74:	3361      	adds	r3, #97	; 0x61
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b04      	cmp	r3, #4
 8003e7a:	d109      	bne.n	8003e90 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	212c      	movs	r1, #44	; 0x2c
 8003e82:	fb01 f303 	mul.w	r3, r1, r3
 8003e86:	4413      	add	r3, r2
 8003e88:	3360      	adds	r3, #96	; 0x60
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	701a      	strb	r2, [r3, #0]
 8003e8e:	e077      	b.n	8003f80 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	212c      	movs	r1, #44	; 0x2c
 8003e96:	fb01 f303 	mul.w	r3, r1, r3
 8003e9a:	4413      	add	r3, r2
 8003e9c:	3361      	adds	r3, #97	; 0x61
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b05      	cmp	r3, #5
 8003ea2:	d109      	bne.n	8003eb8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	212c      	movs	r1, #44	; 0x2c
 8003eaa:	fb01 f303 	mul.w	r3, r1, r3
 8003eae:	4413      	add	r3, r2
 8003eb0:	3360      	adds	r3, #96	; 0x60
 8003eb2:	2205      	movs	r2, #5
 8003eb4:	701a      	strb	r2, [r3, #0]
 8003eb6:	e063      	b.n	8003f80 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	212c      	movs	r1, #44	; 0x2c
 8003ebe:	fb01 f303 	mul.w	r3, r1, r3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	3361      	adds	r3, #97	; 0x61
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	2b06      	cmp	r3, #6
 8003eca:	d009      	beq.n	8003ee0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	212c      	movs	r1, #44	; 0x2c
 8003ed2:	fb01 f303 	mul.w	r3, r1, r3
 8003ed6:	4413      	add	r3, r2
 8003ed8:	3361      	adds	r3, #97	; 0x61
 8003eda:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d14f      	bne.n	8003f80 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	212c      	movs	r1, #44	; 0x2c
 8003ee6:	fb01 f303 	mul.w	r3, r1, r3
 8003eea:	4413      	add	r3, r2
 8003eec:	335c      	adds	r3, #92	; 0x5c
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	6879      	ldr	r1, [r7, #4]
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	202c      	movs	r0, #44	; 0x2c
 8003ef8:	fb00 f303 	mul.w	r3, r0, r3
 8003efc:	440b      	add	r3, r1
 8003efe:	335c      	adds	r3, #92	; 0x5c
 8003f00:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	212c      	movs	r1, #44	; 0x2c
 8003f08:	fb01 f303 	mul.w	r3, r1, r3
 8003f0c:	4413      	add	r3, r2
 8003f0e:	335c      	adds	r3, #92	; 0x5c
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d912      	bls.n	8003f3c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	212c      	movs	r1, #44	; 0x2c
 8003f1c:	fb01 f303 	mul.w	r3, r1, r3
 8003f20:	4413      	add	r3, r2
 8003f22:	335c      	adds	r3, #92	; 0x5c
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	212c      	movs	r1, #44	; 0x2c
 8003f2e:	fb01 f303 	mul.w	r3, r1, r3
 8003f32:	4413      	add	r3, r2
 8003f34:	3360      	adds	r3, #96	; 0x60
 8003f36:	2204      	movs	r2, #4
 8003f38:	701a      	strb	r2, [r3, #0]
 8003f3a:	e021      	b.n	8003f80 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	212c      	movs	r1, #44	; 0x2c
 8003f42:	fb01 f303 	mul.w	r3, r1, r3
 8003f46:	4413      	add	r3, r2
 8003f48:	3360      	adds	r3, #96	; 0x60
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f64:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f6c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	015a      	lsls	r2, r3, #5
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	2302      	movs	r3, #2
 8003f90:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	b2d9      	uxtb	r1, r3
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	202c      	movs	r0, #44	; 0x2c
 8003f9c:	fb00 f303 	mul.w	r3, r0, r3
 8003fa0:	4413      	add	r3, r2
 8003fa2:	3360      	adds	r3, #96	; 0x60
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f004 fcfb 	bl	80089a4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003fae:	bf00      	nop
 8003fb0:	3720      	adds	r7, #32
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b08a      	sub	sp, #40	; 0x28
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	0c5b      	lsrs	r3, r3, #17
 8003fdc:	f003 030f 	and.w	r3, r3, #15
 8003fe0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	091b      	lsrs	r3, r3, #4
 8003fe6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fea:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d004      	beq.n	8003ffc <HCD_RXQLVL_IRQHandler+0x46>
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2b05      	cmp	r3, #5
 8003ff6:	f000 80a9 	beq.w	800414c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003ffa:	e0aa      	b.n	8004152 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 80a6 	beq.w	8004150 <HCD_RXQLVL_IRQHandler+0x19a>
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	212c      	movs	r1, #44	; 0x2c
 800400a:	fb01 f303 	mul.w	r3, r1, r3
 800400e:	4413      	add	r3, r2
 8004010:	3344      	adds	r3, #68	; 0x44
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 809b 	beq.w	8004150 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	212c      	movs	r1, #44	; 0x2c
 8004020:	fb01 f303 	mul.w	r3, r1, r3
 8004024:	4413      	add	r3, r2
 8004026:	3350      	adds	r3, #80	; 0x50
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	441a      	add	r2, r3
 800402e:	6879      	ldr	r1, [r7, #4]
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	202c      	movs	r0, #44	; 0x2c
 8004034:	fb00 f303 	mul.w	r3, r0, r3
 8004038:	440b      	add	r3, r1
 800403a:	334c      	adds	r3, #76	; 0x4c
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d87a      	bhi.n	8004138 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6818      	ldr	r0, [r3, #0]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	212c      	movs	r1, #44	; 0x2c
 800404c:	fb01 f303 	mul.w	r3, r1, r3
 8004050:	4413      	add	r3, r2
 8004052:	3344      	adds	r3, #68	; 0x44
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	b292      	uxth	r2, r2
 800405a:	4619      	mov	r1, r3
 800405c:	f001 fd56 	bl	8005b0c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	212c      	movs	r1, #44	; 0x2c
 8004066:	fb01 f303 	mul.w	r3, r1, r3
 800406a:	4413      	add	r3, r2
 800406c:	3344      	adds	r3, #68	; 0x44
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	441a      	add	r2, r3
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	202c      	movs	r0, #44	; 0x2c
 800407a:	fb00 f303 	mul.w	r3, r0, r3
 800407e:	440b      	add	r3, r1
 8004080:	3344      	adds	r3, #68	; 0x44
 8004082:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	212c      	movs	r1, #44	; 0x2c
 800408a:	fb01 f303 	mul.w	r3, r1, r3
 800408e:	4413      	add	r3, r2
 8004090:	3350      	adds	r3, #80	; 0x50
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	441a      	add	r2, r3
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	202c      	movs	r0, #44	; 0x2c
 800409e:	fb00 f303 	mul.w	r3, r0, r3
 80040a2:	440b      	add	r3, r1
 80040a4:	3350      	adds	r3, #80	; 0x50
 80040a6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	0cdb      	lsrs	r3, r3, #19
 80040b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040bc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	212c      	movs	r1, #44	; 0x2c
 80040c4:	fb01 f303 	mul.w	r3, r1, r3
 80040c8:	4413      	add	r3, r2
 80040ca:	3340      	adds	r3, #64	; 0x40
 80040cc:	881b      	ldrh	r3, [r3, #0]
 80040ce:	461a      	mov	r2, r3
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d13c      	bne.n	8004150 <HCD_RXQLVL_IRQHandler+0x19a>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d039      	beq.n	8004150 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040f2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80040fa:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	015a      	lsls	r2, r3, #5
 8004100:	6a3b      	ldr	r3, [r7, #32]
 8004102:	4413      	add	r3, r2
 8004104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004108:	461a      	mov	r2, r3
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	212c      	movs	r1, #44	; 0x2c
 8004114:	fb01 f303 	mul.w	r3, r1, r3
 8004118:	4413      	add	r3, r2
 800411a:	3354      	adds	r3, #84	; 0x54
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	f083 0301 	eor.w	r3, r3, #1
 8004122:	b2d8      	uxtb	r0, r3
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	212c      	movs	r1, #44	; 0x2c
 800412a:	fb01 f303 	mul.w	r3, r1, r3
 800412e:	4413      	add	r3, r2
 8004130:	3354      	adds	r3, #84	; 0x54
 8004132:	4602      	mov	r2, r0
 8004134:	701a      	strb	r2, [r3, #0]
      break;
 8004136:	e00b      	b.n	8004150 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	212c      	movs	r1, #44	; 0x2c
 800413e:	fb01 f303 	mul.w	r3, r1, r3
 8004142:	4413      	add	r3, r2
 8004144:	3360      	adds	r3, #96	; 0x60
 8004146:	2204      	movs	r2, #4
 8004148:	701a      	strb	r2, [r3, #0]
      break;
 800414a:	e001      	b.n	8004150 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800414c:	bf00      	nop
 800414e:	e000      	b.n	8004152 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004150:	bf00      	nop
  }
}
 8004152:	bf00      	nop
 8004154:	3728      	adds	r7, #40	; 0x28
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b086      	sub	sp, #24
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004186:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b02      	cmp	r3, #2
 8004190:	d10b      	bne.n	80041aa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b01      	cmp	r3, #1
 800419a:	d102      	bne.n	80041a2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f004 fbe5 	bl	800896c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	f043 0302 	orr.w	r3, r3, #2
 80041a8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d132      	bne.n	800421a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f043 0308 	orr.w	r3, r3, #8
 80041ba:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f003 0304 	and.w	r3, r3, #4
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d126      	bne.n	8004214 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d113      	bne.n	80041f6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80041d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041d8:	d106      	bne.n	80041e8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2102      	movs	r1, #2
 80041e0:	4618      	mov	r0, r3
 80041e2:	f001 fe01 	bl	8005de8 <USB_InitFSLSPClkSel>
 80041e6:	e011      	b.n	800420c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2101      	movs	r1, #1
 80041ee:	4618      	mov	r0, r3
 80041f0:	f001 fdfa 	bl	8005de8 <USB_InitFSLSPClkSel>
 80041f4:	e00a      	b.n	800420c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d106      	bne.n	800420c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004204:	461a      	mov	r2, r3
 8004206:	f64e 2360 	movw	r3, #60000	; 0xea60
 800420a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f004 fbd7 	bl	80089c0 <HAL_HCD_PortEnabled_Callback>
 8004212:	e002      	b.n	800421a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f004 fbe1 	bl	80089dc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f003 0320 	and.w	r3, r3, #32
 8004220:	2b20      	cmp	r3, #32
 8004222:	d103      	bne.n	800422c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	f043 0320 	orr.w	r3, r3, #32
 800422a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004232:	461a      	mov	r2, r3
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	6013      	str	r3, [r2, #0]
}
 8004238:	bf00      	nop
 800423a:	3718      	adds	r7, #24
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e12b      	b.n	80044aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d106      	bne.n	800426c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7fd fea2 	bl	8001fb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2224      	movs	r2, #36	; 0x24
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0201 	bic.w	r2, r2, #1
 8004282:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004292:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042a4:	f000 fd80 	bl	8004da8 <HAL_RCC_GetPCLK1Freq>
 80042a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	4a81      	ldr	r2, [pc, #516]	; (80044b4 <HAL_I2C_Init+0x274>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d807      	bhi.n	80042c4 <HAL_I2C_Init+0x84>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4a80      	ldr	r2, [pc, #512]	; (80044b8 <HAL_I2C_Init+0x278>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	bf94      	ite	ls
 80042bc:	2301      	movls	r3, #1
 80042be:	2300      	movhi	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	e006      	b.n	80042d2 <HAL_I2C_Init+0x92>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4a7d      	ldr	r2, [pc, #500]	; (80044bc <HAL_I2C_Init+0x27c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	bf94      	ite	ls
 80042cc:	2301      	movls	r3, #1
 80042ce:	2300      	movhi	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e0e7      	b.n	80044aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	4a78      	ldr	r2, [pc, #480]	; (80044c0 <HAL_I2C_Init+0x280>)
 80042de:	fba2 2303 	umull	r2, r3, r2, r3
 80042e2:	0c9b      	lsrs	r3, r3, #18
 80042e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	4a6a      	ldr	r2, [pc, #424]	; (80044b4 <HAL_I2C_Init+0x274>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d802      	bhi.n	8004314 <HAL_I2C_Init+0xd4>
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	3301      	adds	r3, #1
 8004312:	e009      	b.n	8004328 <HAL_I2C_Init+0xe8>
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800431a:	fb02 f303 	mul.w	r3, r2, r3
 800431e:	4a69      	ldr	r2, [pc, #420]	; (80044c4 <HAL_I2C_Init+0x284>)
 8004320:	fba2 2303 	umull	r2, r3, r2, r3
 8004324:	099b      	lsrs	r3, r3, #6
 8004326:	3301      	adds	r3, #1
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6812      	ldr	r2, [r2, #0]
 800432c:	430b      	orrs	r3, r1
 800432e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800433a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	495c      	ldr	r1, [pc, #368]	; (80044b4 <HAL_I2C_Init+0x274>)
 8004344:	428b      	cmp	r3, r1
 8004346:	d819      	bhi.n	800437c <HAL_I2C_Init+0x13c>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	1e59      	subs	r1, r3, #1
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	fbb1 f3f3 	udiv	r3, r1, r3
 8004356:	1c59      	adds	r1, r3, #1
 8004358:	f640 73fc 	movw	r3, #4092	; 0xffc
 800435c:	400b      	ands	r3, r1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00a      	beq.n	8004378 <HAL_I2C_Init+0x138>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	1e59      	subs	r1, r3, #1
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004370:	3301      	adds	r3, #1
 8004372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004376:	e051      	b.n	800441c <HAL_I2C_Init+0x1dc>
 8004378:	2304      	movs	r3, #4
 800437a:	e04f      	b.n	800441c <HAL_I2C_Init+0x1dc>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d111      	bne.n	80043a8 <HAL_I2C_Init+0x168>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	1e58      	subs	r0, r3, #1
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6859      	ldr	r1, [r3, #4]
 800438c:	460b      	mov	r3, r1
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	440b      	add	r3, r1
 8004392:	fbb0 f3f3 	udiv	r3, r0, r3
 8004396:	3301      	adds	r3, #1
 8004398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800439c:	2b00      	cmp	r3, #0
 800439e:	bf0c      	ite	eq
 80043a0:	2301      	moveq	r3, #1
 80043a2:	2300      	movne	r3, #0
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	e012      	b.n	80043ce <HAL_I2C_Init+0x18e>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	1e58      	subs	r0, r3, #1
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6859      	ldr	r1, [r3, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	440b      	add	r3, r1
 80043b6:	0099      	lsls	r1, r3, #2
 80043b8:	440b      	add	r3, r1
 80043ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80043be:	3301      	adds	r3, #1
 80043c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	bf0c      	ite	eq
 80043c8:	2301      	moveq	r3, #1
 80043ca:	2300      	movne	r3, #0
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <HAL_I2C_Init+0x196>
 80043d2:	2301      	movs	r3, #1
 80043d4:	e022      	b.n	800441c <HAL_I2C_Init+0x1dc>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10e      	bne.n	80043fc <HAL_I2C_Init+0x1bc>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	1e58      	subs	r0, r3, #1
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6859      	ldr	r1, [r3, #4]
 80043e6:	460b      	mov	r3, r1
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	440b      	add	r3, r1
 80043ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80043f0:	3301      	adds	r3, #1
 80043f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043fa:	e00f      	b.n	800441c <HAL_I2C_Init+0x1dc>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	1e58      	subs	r0, r3, #1
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6859      	ldr	r1, [r3, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	440b      	add	r3, r1
 800440a:	0099      	lsls	r1, r3, #2
 800440c:	440b      	add	r3, r1
 800440e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004412:	3301      	adds	r3, #1
 8004414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004418:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800441c:	6879      	ldr	r1, [r7, #4]
 800441e:	6809      	ldr	r1, [r1, #0]
 8004420:	4313      	orrs	r3, r2
 8004422:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69da      	ldr	r2, [r3, #28]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	430a      	orrs	r2, r1
 800443e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800444a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6911      	ldr	r1, [r2, #16]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	68d2      	ldr	r2, [r2, #12]
 8004456:	4311      	orrs	r1, r2
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6812      	ldr	r2, [r2, #0]
 800445c:	430b      	orrs	r3, r1
 800445e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	695a      	ldr	r2, [r3, #20]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	431a      	orrs	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f042 0201 	orr.w	r2, r2, #1
 800448a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2220      	movs	r2, #32
 8004496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	000186a0 	.word	0x000186a0
 80044b8:	001e847f 	.word	0x001e847f
 80044bc:	003d08ff 	.word	0x003d08ff
 80044c0:	431bde83 	.word	0x431bde83
 80044c4:	10624dd3 	.word	0x10624dd3

080044c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e267      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d075      	beq.n	80045d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044e6:	4b88      	ldr	r3, [pc, #544]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 030c 	and.w	r3, r3, #12
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d00c      	beq.n	800450c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044f2:	4b85      	ldr	r3, [pc, #532]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044fa:	2b08      	cmp	r3, #8
 80044fc:	d112      	bne.n	8004524 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044fe:	4b82      	ldr	r3, [pc, #520]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800450a:	d10b      	bne.n	8004524 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800450c:	4b7e      	ldr	r3, [pc, #504]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d05b      	beq.n	80045d0 <HAL_RCC_OscConfig+0x108>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d157      	bne.n	80045d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e242      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800452c:	d106      	bne.n	800453c <HAL_RCC_OscConfig+0x74>
 800452e:	4b76      	ldr	r3, [pc, #472]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a75      	ldr	r2, [pc, #468]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	e01d      	b.n	8004578 <HAL_RCC_OscConfig+0xb0>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004544:	d10c      	bne.n	8004560 <HAL_RCC_OscConfig+0x98>
 8004546:	4b70      	ldr	r3, [pc, #448]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a6f      	ldr	r2, [pc, #444]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 800454c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004550:	6013      	str	r3, [r2, #0]
 8004552:	4b6d      	ldr	r3, [pc, #436]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a6c      	ldr	r2, [pc, #432]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	e00b      	b.n	8004578 <HAL_RCC_OscConfig+0xb0>
 8004560:	4b69      	ldr	r3, [pc, #420]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a68      	ldr	r2, [pc, #416]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800456a:	6013      	str	r3, [r2, #0]
 800456c:	4b66      	ldr	r3, [pc, #408]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a65      	ldr	r2, [pc, #404]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d013      	beq.n	80045a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004580:	f7fd ff2a 	bl	80023d8 <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004588:	f7fd ff26 	bl	80023d8 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b64      	cmp	r3, #100	; 0x64
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e207      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800459a:	4b5b      	ldr	r3, [pc, #364]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0f0      	beq.n	8004588 <HAL_RCC_OscConfig+0xc0>
 80045a6:	e014      	b.n	80045d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a8:	f7fd ff16 	bl	80023d8 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045b0:	f7fd ff12 	bl	80023d8 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b64      	cmp	r3, #100	; 0x64
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e1f3      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045c2:	4b51      	ldr	r3, [pc, #324]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1f0      	bne.n	80045b0 <HAL_RCC_OscConfig+0xe8>
 80045ce:	e000      	b.n	80045d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d063      	beq.n	80046a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045de:	4b4a      	ldr	r3, [pc, #296]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 030c 	and.w	r3, r3, #12
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00b      	beq.n	8004602 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ea:	4b47      	ldr	r3, [pc, #284]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045f2:	2b08      	cmp	r3, #8
 80045f4:	d11c      	bne.n	8004630 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045f6:	4b44      	ldr	r3, [pc, #272]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d116      	bne.n	8004630 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004602:	4b41      	ldr	r3, [pc, #260]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d005      	beq.n	800461a <HAL_RCC_OscConfig+0x152>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d001      	beq.n	800461a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e1c7      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800461a:	4b3b      	ldr	r3, [pc, #236]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	4937      	ldr	r1, [pc, #220]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 800462a:	4313      	orrs	r3, r2
 800462c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800462e:	e03a      	b.n	80046a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d020      	beq.n	800467a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004638:	4b34      	ldr	r3, [pc, #208]	; (800470c <HAL_RCC_OscConfig+0x244>)
 800463a:	2201      	movs	r2, #1
 800463c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463e:	f7fd fecb 	bl	80023d8 <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004644:	e008      	b.n	8004658 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004646:	f7fd fec7 	bl	80023d8 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e1a8      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004658:	4b2b      	ldr	r3, [pc, #172]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0f0      	beq.n	8004646 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004664:	4b28      	ldr	r3, [pc, #160]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	00db      	lsls	r3, r3, #3
 8004672:	4925      	ldr	r1, [pc, #148]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004674:	4313      	orrs	r3, r2
 8004676:	600b      	str	r3, [r1, #0]
 8004678:	e015      	b.n	80046a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800467a:	4b24      	ldr	r3, [pc, #144]	; (800470c <HAL_RCC_OscConfig+0x244>)
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004680:	f7fd feaa 	bl	80023d8 <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004686:	e008      	b.n	800469a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004688:	f7fd fea6 	bl	80023d8 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e187      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800469a:	4b1b      	ldr	r3, [pc, #108]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1f0      	bne.n	8004688 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0308 	and.w	r3, r3, #8
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d036      	beq.n	8004720 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d016      	beq.n	80046e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046ba:	4b15      	ldr	r3, [pc, #84]	; (8004710 <HAL_RCC_OscConfig+0x248>)
 80046bc:	2201      	movs	r2, #1
 80046be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c0:	f7fd fe8a 	bl	80023d8 <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046c8:	f7fd fe86 	bl	80023d8 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e167      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046da:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 80046dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d0f0      	beq.n	80046c8 <HAL_RCC_OscConfig+0x200>
 80046e6:	e01b      	b.n	8004720 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046e8:	4b09      	ldr	r3, [pc, #36]	; (8004710 <HAL_RCC_OscConfig+0x248>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ee:	f7fd fe73 	bl	80023d8 <HAL_GetTick>
 80046f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046f4:	e00e      	b.n	8004714 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046f6:	f7fd fe6f 	bl	80023d8 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d907      	bls.n	8004714 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e150      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
 8004708:	40023800 	.word	0x40023800
 800470c:	42470000 	.word	0x42470000
 8004710:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004714:	4b88      	ldr	r3, [pc, #544]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 8004716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1ea      	bne.n	80046f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 8097 	beq.w	800485c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800472e:	2300      	movs	r3, #0
 8004730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004732:	4b81      	ldr	r3, [pc, #516]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10f      	bne.n	800475e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800473e:	2300      	movs	r3, #0
 8004740:	60bb      	str	r3, [r7, #8]
 8004742:	4b7d      	ldr	r3, [pc, #500]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	4a7c      	ldr	r2, [pc, #496]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 8004748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800474c:	6413      	str	r3, [r2, #64]	; 0x40
 800474e:	4b7a      	ldr	r3, [pc, #488]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004756:	60bb      	str	r3, [r7, #8]
 8004758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800475a:	2301      	movs	r3, #1
 800475c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800475e:	4b77      	ldr	r3, [pc, #476]	; (800493c <HAL_RCC_OscConfig+0x474>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004766:	2b00      	cmp	r3, #0
 8004768:	d118      	bne.n	800479c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800476a:	4b74      	ldr	r3, [pc, #464]	; (800493c <HAL_RCC_OscConfig+0x474>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a73      	ldr	r2, [pc, #460]	; (800493c <HAL_RCC_OscConfig+0x474>)
 8004770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004776:	f7fd fe2f 	bl	80023d8 <HAL_GetTick>
 800477a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800477c:	e008      	b.n	8004790 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800477e:	f7fd fe2b 	bl	80023d8 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d901      	bls.n	8004790 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e10c      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004790:	4b6a      	ldr	r3, [pc, #424]	; (800493c <HAL_RCC_OscConfig+0x474>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004798:	2b00      	cmp	r3, #0
 800479a:	d0f0      	beq.n	800477e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d106      	bne.n	80047b2 <HAL_RCC_OscConfig+0x2ea>
 80047a4:	4b64      	ldr	r3, [pc, #400]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80047a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a8:	4a63      	ldr	r2, [pc, #396]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80047aa:	f043 0301 	orr.w	r3, r3, #1
 80047ae:	6713      	str	r3, [r2, #112]	; 0x70
 80047b0:	e01c      	b.n	80047ec <HAL_RCC_OscConfig+0x324>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	2b05      	cmp	r3, #5
 80047b8:	d10c      	bne.n	80047d4 <HAL_RCC_OscConfig+0x30c>
 80047ba:	4b5f      	ldr	r3, [pc, #380]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80047bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047be:	4a5e      	ldr	r2, [pc, #376]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80047c0:	f043 0304 	orr.w	r3, r3, #4
 80047c4:	6713      	str	r3, [r2, #112]	; 0x70
 80047c6:	4b5c      	ldr	r3, [pc, #368]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80047c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ca:	4a5b      	ldr	r2, [pc, #364]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80047cc:	f043 0301 	orr.w	r3, r3, #1
 80047d0:	6713      	str	r3, [r2, #112]	; 0x70
 80047d2:	e00b      	b.n	80047ec <HAL_RCC_OscConfig+0x324>
 80047d4:	4b58      	ldr	r3, [pc, #352]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80047d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d8:	4a57      	ldr	r2, [pc, #348]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80047da:	f023 0301 	bic.w	r3, r3, #1
 80047de:	6713      	str	r3, [r2, #112]	; 0x70
 80047e0:	4b55      	ldr	r3, [pc, #340]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80047e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e4:	4a54      	ldr	r2, [pc, #336]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80047e6:	f023 0304 	bic.w	r3, r3, #4
 80047ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d015      	beq.n	8004820 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f4:	f7fd fdf0 	bl	80023d8 <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047fa:	e00a      	b.n	8004812 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047fc:	f7fd fdec 	bl	80023d8 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	f241 3288 	movw	r2, #5000	; 0x1388
 800480a:	4293      	cmp	r3, r2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e0cb      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004812:	4b49      	ldr	r3, [pc, #292]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 8004814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0ee      	beq.n	80047fc <HAL_RCC_OscConfig+0x334>
 800481e:	e014      	b.n	800484a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004820:	f7fd fdda 	bl	80023d8 <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004826:	e00a      	b.n	800483e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004828:	f7fd fdd6 	bl	80023d8 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	f241 3288 	movw	r2, #5000	; 0x1388
 8004836:	4293      	cmp	r3, r2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e0b5      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800483e:	4b3e      	ldr	r3, [pc, #248]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 8004840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1ee      	bne.n	8004828 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800484a:	7dfb      	ldrb	r3, [r7, #23]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d105      	bne.n	800485c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004850:	4b39      	ldr	r3, [pc, #228]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 8004852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004854:	4a38      	ldr	r2, [pc, #224]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 8004856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800485a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 80a1 	beq.w	80049a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004866:	4b34      	ldr	r3, [pc, #208]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f003 030c 	and.w	r3, r3, #12
 800486e:	2b08      	cmp	r3, #8
 8004870:	d05c      	beq.n	800492c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	2b02      	cmp	r3, #2
 8004878:	d141      	bne.n	80048fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800487a:	4b31      	ldr	r3, [pc, #196]	; (8004940 <HAL_RCC_OscConfig+0x478>)
 800487c:	2200      	movs	r2, #0
 800487e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004880:	f7fd fdaa 	bl	80023d8 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004888:	f7fd fda6 	bl	80023d8 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e087      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800489a:	4b27      	ldr	r3, [pc, #156]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1f0      	bne.n	8004888 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	69da      	ldr	r2, [r3, #28]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	019b      	lsls	r3, r3, #6
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048bc:	085b      	lsrs	r3, r3, #1
 80048be:	3b01      	subs	r3, #1
 80048c0:	041b      	lsls	r3, r3, #16
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c8:	061b      	lsls	r3, r3, #24
 80048ca:	491b      	ldr	r1, [pc, #108]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048d0:	4b1b      	ldr	r3, [pc, #108]	; (8004940 <HAL_RCC_OscConfig+0x478>)
 80048d2:	2201      	movs	r2, #1
 80048d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d6:	f7fd fd7f 	bl	80023d8 <HAL_GetTick>
 80048da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048dc:	e008      	b.n	80048f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048de:	f7fd fd7b 	bl	80023d8 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e05c      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048f0:	4b11      	ldr	r3, [pc, #68]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0f0      	beq.n	80048de <HAL_RCC_OscConfig+0x416>
 80048fc:	e054      	b.n	80049a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048fe:	4b10      	ldr	r3, [pc, #64]	; (8004940 <HAL_RCC_OscConfig+0x478>)
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004904:	f7fd fd68 	bl	80023d8 <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800490c:	f7fd fd64 	bl	80023d8 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e045      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800491e:	4b06      	ldr	r3, [pc, #24]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1f0      	bne.n	800490c <HAL_RCC_OscConfig+0x444>
 800492a:	e03d      	b.n	80049a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d107      	bne.n	8004944 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e038      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
 8004938:	40023800 	.word	0x40023800
 800493c:	40007000 	.word	0x40007000
 8004940:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004944:	4b1b      	ldr	r3, [pc, #108]	; (80049b4 <HAL_RCC_OscConfig+0x4ec>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d028      	beq.n	80049a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800495c:	429a      	cmp	r2, r3
 800495e:	d121      	bne.n	80049a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800496a:	429a      	cmp	r2, r3
 800496c:	d11a      	bne.n	80049a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004974:	4013      	ands	r3, r2
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800497a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800497c:	4293      	cmp	r3, r2
 800497e:	d111      	bne.n	80049a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498a:	085b      	lsrs	r3, r3, #1
 800498c:	3b01      	subs	r3, #1
 800498e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004990:	429a      	cmp	r2, r3
 8004992:	d107      	bne.n	80049a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d001      	beq.n	80049a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e000      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	40023800 	.word	0x40023800

080049b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e0cc      	b.n	8004b66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049cc:	4b68      	ldr	r3, [pc, #416]	; (8004b70 <HAL_RCC_ClockConfig+0x1b8>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d90c      	bls.n	80049f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049da:	4b65      	ldr	r3, [pc, #404]	; (8004b70 <HAL_RCC_ClockConfig+0x1b8>)
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	b2d2      	uxtb	r2, r2
 80049e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049e2:	4b63      	ldr	r3, [pc, #396]	; (8004b70 <HAL_RCC_ClockConfig+0x1b8>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0307 	and.w	r3, r3, #7
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d001      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e0b8      	b.n	8004b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d020      	beq.n	8004a42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d005      	beq.n	8004a18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a0c:	4b59      	ldr	r3, [pc, #356]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	4a58      	ldr	r2, [pc, #352]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004a12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0308 	and.w	r3, r3, #8
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d005      	beq.n	8004a30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a24:	4b53      	ldr	r3, [pc, #332]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	4a52      	ldr	r2, [pc, #328]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a30:	4b50      	ldr	r3, [pc, #320]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	494d      	ldr	r1, [pc, #308]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d044      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d107      	bne.n	8004a66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a56:	4b47      	ldr	r3, [pc, #284]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d119      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e07f      	b.n	8004b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d003      	beq.n	8004a76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a72:	2b03      	cmp	r3, #3
 8004a74:	d107      	bne.n	8004a86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a76:	4b3f      	ldr	r3, [pc, #252]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d109      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e06f      	b.n	8004b66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a86:	4b3b      	ldr	r3, [pc, #236]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e067      	b.n	8004b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a96:	4b37      	ldr	r3, [pc, #220]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f023 0203 	bic.w	r2, r3, #3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	4934      	ldr	r1, [pc, #208]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004aa8:	f7fd fc96 	bl	80023d8 <HAL_GetTick>
 8004aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aae:	e00a      	b.n	8004ac6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ab0:	f7fd fc92 	bl	80023d8 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e04f      	b.n	8004b66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ac6:	4b2b      	ldr	r3, [pc, #172]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f003 020c 	and.w	r2, r3, #12
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d1eb      	bne.n	8004ab0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ad8:	4b25      	ldr	r3, [pc, #148]	; (8004b70 <HAL_RCC_ClockConfig+0x1b8>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d20c      	bcs.n	8004b00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ae6:	4b22      	ldr	r3, [pc, #136]	; (8004b70 <HAL_RCC_ClockConfig+0x1b8>)
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	b2d2      	uxtb	r2, r2
 8004aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aee:	4b20      	ldr	r3, [pc, #128]	; (8004b70 <HAL_RCC_ClockConfig+0x1b8>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d001      	beq.n	8004b00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e032      	b.n	8004b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d008      	beq.n	8004b1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b0c:	4b19      	ldr	r3, [pc, #100]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	4916      	ldr	r1, [pc, #88]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0308 	and.w	r3, r3, #8
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d009      	beq.n	8004b3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b2a:	4b12      	ldr	r3, [pc, #72]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	490e      	ldr	r1, [pc, #56]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b3e:	f000 f821 	bl	8004b84 <HAL_RCC_GetSysClockFreq>
 8004b42:	4602      	mov	r2, r0
 8004b44:	4b0b      	ldr	r3, [pc, #44]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	091b      	lsrs	r3, r3, #4
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	490a      	ldr	r1, [pc, #40]	; (8004b78 <HAL_RCC_ClockConfig+0x1c0>)
 8004b50:	5ccb      	ldrb	r3, [r1, r3]
 8004b52:	fa22 f303 	lsr.w	r3, r2, r3
 8004b56:	4a09      	ldr	r2, [pc, #36]	; (8004b7c <HAL_RCC_ClockConfig+0x1c4>)
 8004b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b5a:	4b09      	ldr	r3, [pc, #36]	; (8004b80 <HAL_RCC_ClockConfig+0x1c8>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fd fbf6 	bl	8002350 <HAL_InitTick>

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	40023c00 	.word	0x40023c00
 8004b74:	40023800 	.word	0x40023800
 8004b78:	08009e60 	.word	0x08009e60
 8004b7c:	20000004 	.word	0x20000004
 8004b80:	20000008 	.word	0x20000008

08004b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b88:	b094      	sub	sp, #80	; 0x50
 8004b8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b90:	2300      	movs	r3, #0
 8004b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b94:	2300      	movs	r3, #0
 8004b96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b9c:	4b79      	ldr	r3, [pc, #484]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f003 030c 	and.w	r3, r3, #12
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d00d      	beq.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x40>
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	f200 80e1 	bhi.w	8004d70 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d002      	beq.n	8004bb8 <HAL_RCC_GetSysClockFreq+0x34>
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	d003      	beq.n	8004bbe <HAL_RCC_GetSysClockFreq+0x3a>
 8004bb6:	e0db      	b.n	8004d70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bb8:	4b73      	ldr	r3, [pc, #460]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004bbc:	e0db      	b.n	8004d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bbe:	4b73      	ldr	r3, [pc, #460]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x208>)
 8004bc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bc2:	e0d8      	b.n	8004d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bc4:	4b6f      	ldr	r3, [pc, #444]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bcc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bce:	4b6d      	ldr	r3, [pc, #436]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d063      	beq.n	8004ca2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bda:	4b6a      	ldr	r3, [pc, #424]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	099b      	lsrs	r3, r3, #6
 8004be0:	2200      	movs	r2, #0
 8004be2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004be4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bec:	633b      	str	r3, [r7, #48]	; 0x30
 8004bee:	2300      	movs	r3, #0
 8004bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8004bf2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004bf6:	4622      	mov	r2, r4
 8004bf8:	462b      	mov	r3, r5
 8004bfa:	f04f 0000 	mov.w	r0, #0
 8004bfe:	f04f 0100 	mov.w	r1, #0
 8004c02:	0159      	lsls	r1, r3, #5
 8004c04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c08:	0150      	lsls	r0, r2, #5
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	4621      	mov	r1, r4
 8004c10:	1a51      	subs	r1, r2, r1
 8004c12:	6139      	str	r1, [r7, #16]
 8004c14:	4629      	mov	r1, r5
 8004c16:	eb63 0301 	sbc.w	r3, r3, r1
 8004c1a:	617b      	str	r3, [r7, #20]
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	f04f 0300 	mov.w	r3, #0
 8004c24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c28:	4659      	mov	r1, fp
 8004c2a:	018b      	lsls	r3, r1, #6
 8004c2c:	4651      	mov	r1, sl
 8004c2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c32:	4651      	mov	r1, sl
 8004c34:	018a      	lsls	r2, r1, #6
 8004c36:	4651      	mov	r1, sl
 8004c38:	ebb2 0801 	subs.w	r8, r2, r1
 8004c3c:	4659      	mov	r1, fp
 8004c3e:	eb63 0901 	sbc.w	r9, r3, r1
 8004c42:	f04f 0200 	mov.w	r2, #0
 8004c46:	f04f 0300 	mov.w	r3, #0
 8004c4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c56:	4690      	mov	r8, r2
 8004c58:	4699      	mov	r9, r3
 8004c5a:	4623      	mov	r3, r4
 8004c5c:	eb18 0303 	adds.w	r3, r8, r3
 8004c60:	60bb      	str	r3, [r7, #8]
 8004c62:	462b      	mov	r3, r5
 8004c64:	eb49 0303 	adc.w	r3, r9, r3
 8004c68:	60fb      	str	r3, [r7, #12]
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	f04f 0300 	mov.w	r3, #0
 8004c72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c76:	4629      	mov	r1, r5
 8004c78:	024b      	lsls	r3, r1, #9
 8004c7a:	4621      	mov	r1, r4
 8004c7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c80:	4621      	mov	r1, r4
 8004c82:	024a      	lsls	r2, r1, #9
 8004c84:	4610      	mov	r0, r2
 8004c86:	4619      	mov	r1, r3
 8004c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c94:	f7fb fee2 	bl	8000a5c <__aeabi_uldivmod>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ca0:	e058      	b.n	8004d54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ca2:	4b38      	ldr	r3, [pc, #224]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	099b      	lsrs	r3, r3, #6
 8004ca8:	2200      	movs	r2, #0
 8004caa:	4618      	mov	r0, r3
 8004cac:	4611      	mov	r1, r2
 8004cae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004cb2:	623b      	str	r3, [r7, #32]
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004cbc:	4642      	mov	r2, r8
 8004cbe:	464b      	mov	r3, r9
 8004cc0:	f04f 0000 	mov.w	r0, #0
 8004cc4:	f04f 0100 	mov.w	r1, #0
 8004cc8:	0159      	lsls	r1, r3, #5
 8004cca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cce:	0150      	lsls	r0, r2, #5
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	4641      	mov	r1, r8
 8004cd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cda:	4649      	mov	r1, r9
 8004cdc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ce0:	f04f 0200 	mov.w	r2, #0
 8004ce4:	f04f 0300 	mov.w	r3, #0
 8004ce8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cf0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cf4:	ebb2 040a 	subs.w	r4, r2, sl
 8004cf8:	eb63 050b 	sbc.w	r5, r3, fp
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	f04f 0300 	mov.w	r3, #0
 8004d04:	00eb      	lsls	r3, r5, #3
 8004d06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d0a:	00e2      	lsls	r2, r4, #3
 8004d0c:	4614      	mov	r4, r2
 8004d0e:	461d      	mov	r5, r3
 8004d10:	4643      	mov	r3, r8
 8004d12:	18e3      	adds	r3, r4, r3
 8004d14:	603b      	str	r3, [r7, #0]
 8004d16:	464b      	mov	r3, r9
 8004d18:	eb45 0303 	adc.w	r3, r5, r3
 8004d1c:	607b      	str	r3, [r7, #4]
 8004d1e:	f04f 0200 	mov.w	r2, #0
 8004d22:	f04f 0300 	mov.w	r3, #0
 8004d26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d2a:	4629      	mov	r1, r5
 8004d2c:	028b      	lsls	r3, r1, #10
 8004d2e:	4621      	mov	r1, r4
 8004d30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d34:	4621      	mov	r1, r4
 8004d36:	028a      	lsls	r2, r1, #10
 8004d38:	4610      	mov	r0, r2
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d3e:	2200      	movs	r2, #0
 8004d40:	61bb      	str	r3, [r7, #24]
 8004d42:	61fa      	str	r2, [r7, #28]
 8004d44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d48:	f7fb fe88 	bl	8000a5c <__aeabi_uldivmod>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4613      	mov	r3, r2
 8004d52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d54:	4b0b      	ldr	r3, [pc, #44]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	0c1b      	lsrs	r3, r3, #16
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	3301      	adds	r3, #1
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004d64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d6e:	e002      	b.n	8004d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d70:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3750      	adds	r7, #80	; 0x50
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d82:	bf00      	nop
 8004d84:	40023800 	.word	0x40023800
 8004d88:	00f42400 	.word	0x00f42400
 8004d8c:	007a1200 	.word	0x007a1200

08004d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d94:	4b03      	ldr	r3, [pc, #12]	; (8004da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d96:	681b      	ldr	r3, [r3, #0]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	20000004 	.word	0x20000004

08004da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004dac:	f7ff fff0 	bl	8004d90 <HAL_RCC_GetHCLKFreq>
 8004db0:	4602      	mov	r2, r0
 8004db2:	4b05      	ldr	r3, [pc, #20]	; (8004dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	0a9b      	lsrs	r3, r3, #10
 8004db8:	f003 0307 	and.w	r3, r3, #7
 8004dbc:	4903      	ldr	r1, [pc, #12]	; (8004dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dbe:	5ccb      	ldrb	r3, [r1, r3]
 8004dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	08009e70 	.word	0x08009e70

08004dd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e07b      	b.n	8004eda <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d108      	bne.n	8004dfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004df2:	d009      	beq.n	8004e08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	61da      	str	r2, [r3, #28]
 8004dfa:	e005      	b.n	8004e08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d106      	bne.n	8004e28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7fd f90c 	bl	8002040 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e50:	431a      	orrs	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	431a      	orrs	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e82:	431a      	orrs	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e8c:	ea42 0103 	orr.w	r1, r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e94:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	0c1b      	lsrs	r3, r3, #16
 8004ea6:	f003 0104 	and.w	r1, r3, #4
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	f003 0210 	and.w	r2, r3, #16
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	69da      	ldr	r2, [r3, #28]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ec8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b088      	sub	sp, #32
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	60f8      	str	r0, [r7, #12]
 8004eea:	60b9      	str	r1, [r7, #8]
 8004eec:	603b      	str	r3, [r7, #0]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d101      	bne.n	8004f04 <HAL_SPI_Transmit+0x22>
 8004f00:	2302      	movs	r3, #2
 8004f02:	e126      	b.n	8005152 <HAL_SPI_Transmit+0x270>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f0c:	f7fd fa64 	bl	80023d8 <HAL_GetTick>
 8004f10:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004f12:	88fb      	ldrh	r3, [r7, #6]
 8004f14:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d002      	beq.n	8004f28 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004f22:	2302      	movs	r3, #2
 8004f24:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f26:	e10b      	b.n	8005140 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d002      	beq.n	8004f34 <HAL_SPI_Transmit+0x52>
 8004f2e:	88fb      	ldrh	r3, [r7, #6]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d102      	bne.n	8004f3a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f38:	e102      	b.n	8005140 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2203      	movs	r2, #3
 8004f3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	88fa      	ldrh	r2, [r7, #6]
 8004f52:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	88fa      	ldrh	r2, [r7, #6]
 8004f58:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f80:	d10f      	bne.n	8004fa2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fa0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fac:	2b40      	cmp	r3, #64	; 0x40
 8004fae:	d007      	beq.n	8004fc0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fc8:	d14b      	bne.n	8005062 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d002      	beq.n	8004fd8 <HAL_SPI_Transmit+0xf6>
 8004fd2:	8afb      	ldrh	r3, [r7, #22]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d13e      	bne.n	8005056 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fdc:	881a      	ldrh	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe8:	1c9a      	adds	r2, r3, #2
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ffc:	e02b      	b.n	8005056 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b02      	cmp	r3, #2
 800500a:	d112      	bne.n	8005032 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005010:	881a      	ldrh	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501c:	1c9a      	adds	r2, r3, #2
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005026:	b29b      	uxth	r3, r3
 8005028:	3b01      	subs	r3, #1
 800502a:	b29a      	uxth	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005030:	e011      	b.n	8005056 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005032:	f7fd f9d1 	bl	80023d8 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	429a      	cmp	r2, r3
 8005040:	d803      	bhi.n	800504a <HAL_SPI_Transmit+0x168>
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005048:	d102      	bne.n	8005050 <HAL_SPI_Transmit+0x16e>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d102      	bne.n	8005056 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005054:	e074      	b.n	8005140 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800505a:	b29b      	uxth	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1ce      	bne.n	8004ffe <HAL_SPI_Transmit+0x11c>
 8005060:	e04c      	b.n	80050fc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d002      	beq.n	8005070 <HAL_SPI_Transmit+0x18e>
 800506a:	8afb      	ldrh	r3, [r7, #22]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d140      	bne.n	80050f2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	330c      	adds	r3, #12
 800507a:	7812      	ldrb	r2, [r2, #0]
 800507c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005082:	1c5a      	adds	r2, r3, #1
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800508c:	b29b      	uxth	r3, r3
 800508e:	3b01      	subs	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005096:	e02c      	b.n	80050f2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d113      	bne.n	80050ce <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	330c      	adds	r3, #12
 80050b0:	7812      	ldrb	r2, [r2, #0]
 80050b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b8:	1c5a      	adds	r2, r3, #1
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	3b01      	subs	r3, #1
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	86da      	strh	r2, [r3, #54]	; 0x36
 80050cc:	e011      	b.n	80050f2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050ce:	f7fd f983 	bl	80023d8 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d803      	bhi.n	80050e6 <HAL_SPI_Transmit+0x204>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050e4:	d102      	bne.n	80050ec <HAL_SPI_Transmit+0x20a>
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d102      	bne.n	80050f2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80050f0:	e026      	b.n	8005140 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1cd      	bne.n	8005098 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	6839      	ldr	r1, [r7, #0]
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 f8b3 	bl	800526c <SPI_EndRxTxTransaction>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2220      	movs	r2, #32
 8005110:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10a      	bne.n	8005130 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800511a:	2300      	movs	r3, #0
 800511c:	613b      	str	r3, [r7, #16]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	613b      	str	r3, [r7, #16]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	613b      	str	r3, [r7, #16]
 800512e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	77fb      	strb	r3, [r7, #31]
 800513c:	e000      	b.n	8005140 <HAL_SPI_Transmit+0x25e>
  }

error:
 800513e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005150:	7ffb      	ldrb	r3, [r7, #31]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3720      	adds	r7, #32
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
	...

0800515c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b088      	sub	sp, #32
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	603b      	str	r3, [r7, #0]
 8005168:	4613      	mov	r3, r2
 800516a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800516c:	f7fd f934 	bl	80023d8 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005174:	1a9b      	subs	r3, r3, r2
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	4413      	add	r3, r2
 800517a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800517c:	f7fd f92c 	bl	80023d8 <HAL_GetTick>
 8005180:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005182:	4b39      	ldr	r3, [pc, #228]	; (8005268 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	015b      	lsls	r3, r3, #5
 8005188:	0d1b      	lsrs	r3, r3, #20
 800518a:	69fa      	ldr	r2, [r7, #28]
 800518c:	fb02 f303 	mul.w	r3, r2, r3
 8005190:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005192:	e054      	b.n	800523e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800519a:	d050      	beq.n	800523e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800519c:	f7fd f91c 	bl	80023d8 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	69fa      	ldr	r2, [r7, #28]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d902      	bls.n	80051b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d13d      	bne.n	800522e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051ca:	d111      	bne.n	80051f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051d4:	d004      	beq.n	80051e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051de:	d107      	bne.n	80051f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051f8:	d10f      	bne.n	800521a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005218:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e017      	b.n	800525e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005234:	2300      	movs	r3, #0
 8005236:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	3b01      	subs	r3, #1
 800523c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	4013      	ands	r3, r2
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	429a      	cmp	r2, r3
 800524c:	bf0c      	ite	eq
 800524e:	2301      	moveq	r3, #1
 8005250:	2300      	movne	r3, #0
 8005252:	b2db      	uxtb	r3, r3
 8005254:	461a      	mov	r2, r3
 8005256:	79fb      	ldrb	r3, [r7, #7]
 8005258:	429a      	cmp	r2, r3
 800525a:	d19b      	bne.n	8005194 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3720      	adds	r7, #32
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	20000004 	.word	0x20000004

0800526c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b088      	sub	sp, #32
 8005270:	af02      	add	r7, sp, #8
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005278:	4b1b      	ldr	r3, [pc, #108]	; (80052e8 <SPI_EndRxTxTransaction+0x7c>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a1b      	ldr	r2, [pc, #108]	; (80052ec <SPI_EndRxTxTransaction+0x80>)
 800527e:	fba2 2303 	umull	r2, r3, r2, r3
 8005282:	0d5b      	lsrs	r3, r3, #21
 8005284:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005288:	fb02 f303 	mul.w	r3, r2, r3
 800528c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005296:	d112      	bne.n	80052be <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	2200      	movs	r2, #0
 80052a0:	2180      	movs	r1, #128	; 0x80
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f7ff ff5a 	bl	800515c <SPI_WaitFlagStateUntilTimeout>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d016      	beq.n	80052dc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b2:	f043 0220 	orr.w	r2, r3, #32
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e00f      	b.n	80052de <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00a      	beq.n	80052da <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	3b01      	subs	r3, #1
 80052c8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d4:	2b80      	cmp	r3, #128	; 0x80
 80052d6:	d0f2      	beq.n	80052be <SPI_EndRxTxTransaction+0x52>
 80052d8:	e000      	b.n	80052dc <SPI_EndRxTxTransaction+0x70>
        break;
 80052da:	bf00      	nop
  }

  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3718      	adds	r7, #24
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	20000004 	.word	0x20000004
 80052ec:	165e9f81 	.word	0x165e9f81

080052f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e041      	b.n	8005386 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d106      	bne.n	800531c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7fc ff10 	bl	800213c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	3304      	adds	r3, #4
 800532c:	4619      	mov	r1, r3
 800532e:	4610      	mov	r0, r2
 8005330:	f000 f9e6 	bl	8005700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800538e:	b480      	push	{r7}
 8005390:	b083      	sub	sp, #12
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6a1a      	ldr	r2, [r3, #32]
 800539c:	f241 1311 	movw	r3, #4369	; 0x1111
 80053a0:	4013      	ands	r3, r2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10f      	bne.n	80053c6 <HAL_TIM_Base_Stop+0x38>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6a1a      	ldr	r2, [r3, #32]
 80053ac:	f240 4344 	movw	r3, #1092	; 0x444
 80053b0:	4013      	ands	r3, r2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d107      	bne.n	80053c6 <HAL_TIM_Base_Stop+0x38>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f022 0201 	bic.w	r2, r2, #1
 80053c4:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d001      	beq.n	80053f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e044      	b.n	800547e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2202      	movs	r2, #2
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68da      	ldr	r2, [r3, #12]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f042 0201 	orr.w	r2, r2, #1
 800540a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a1e      	ldr	r2, [pc, #120]	; (800548c <HAL_TIM_Base_Start_IT+0xb0>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d018      	beq.n	8005448 <HAL_TIM_Base_Start_IT+0x6c>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800541e:	d013      	beq.n	8005448 <HAL_TIM_Base_Start_IT+0x6c>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a1a      	ldr	r2, [pc, #104]	; (8005490 <HAL_TIM_Base_Start_IT+0xb4>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d00e      	beq.n	8005448 <HAL_TIM_Base_Start_IT+0x6c>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a19      	ldr	r2, [pc, #100]	; (8005494 <HAL_TIM_Base_Start_IT+0xb8>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d009      	beq.n	8005448 <HAL_TIM_Base_Start_IT+0x6c>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a17      	ldr	r2, [pc, #92]	; (8005498 <HAL_TIM_Base_Start_IT+0xbc>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d004      	beq.n	8005448 <HAL_TIM_Base_Start_IT+0x6c>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a16      	ldr	r2, [pc, #88]	; (800549c <HAL_TIM_Base_Start_IT+0xc0>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d111      	bne.n	800546c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 0307 	and.w	r3, r3, #7
 8005452:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2b06      	cmp	r3, #6
 8005458:	d010      	beq.n	800547c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f042 0201 	orr.w	r2, r2, #1
 8005468:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800546a:	e007      	b.n	800547c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0201 	orr.w	r2, r2, #1
 800547a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	40010000 	.word	0x40010000
 8005490:	40000400 	.word	0x40000400
 8005494:	40000800 	.word	0x40000800
 8005498:	40000c00 	.word	0x40000c00
 800549c:	40014000 	.word	0x40014000

080054a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d122      	bne.n	80054fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d11b      	bne.n	80054fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f06f 0202 	mvn.w	r2, #2
 80054cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	f003 0303 	and.w	r3, r3, #3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d003      	beq.n	80054ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f8ee 	bl	80056c4 <HAL_TIM_IC_CaptureCallback>
 80054e8:	e005      	b.n	80054f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f8e0 	bl	80056b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 f8f1 	bl	80056d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	f003 0304 	and.w	r3, r3, #4
 8005506:	2b04      	cmp	r3, #4
 8005508:	d122      	bne.n	8005550 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f003 0304 	and.w	r3, r3, #4
 8005514:	2b04      	cmp	r3, #4
 8005516:	d11b      	bne.n	8005550 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f06f 0204 	mvn.w	r2, #4
 8005520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2202      	movs	r2, #2
 8005526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f8c4 	bl	80056c4 <HAL_TIM_IC_CaptureCallback>
 800553c:	e005      	b.n	800554a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f8b6 	bl	80056b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f8c7 	bl	80056d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	f003 0308 	and.w	r3, r3, #8
 800555a:	2b08      	cmp	r3, #8
 800555c:	d122      	bne.n	80055a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f003 0308 	and.w	r3, r3, #8
 8005568:	2b08      	cmp	r3, #8
 800556a:	d11b      	bne.n	80055a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f06f 0208 	mvn.w	r2, #8
 8005574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2204      	movs	r2, #4
 800557a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	f003 0303 	and.w	r3, r3, #3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f89a 	bl	80056c4 <HAL_TIM_IC_CaptureCallback>
 8005590:	e005      	b.n	800559e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f88c 	bl	80056b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 f89d 	bl	80056d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	f003 0310 	and.w	r3, r3, #16
 80055ae:	2b10      	cmp	r3, #16
 80055b0:	d122      	bne.n	80055f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f003 0310 	and.w	r3, r3, #16
 80055bc:	2b10      	cmp	r3, #16
 80055be:	d11b      	bne.n	80055f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f06f 0210 	mvn.w	r2, #16
 80055c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2208      	movs	r2, #8
 80055ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f870 	bl	80056c4 <HAL_TIM_IC_CaptureCallback>
 80055e4:	e005      	b.n	80055f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f862 	bl	80056b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f873 	bl	80056d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b01      	cmp	r3, #1
 8005604:	d10e      	bne.n	8005624 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f003 0301 	and.w	r3, r3, #1
 8005610:	2b01      	cmp	r3, #1
 8005612:	d107      	bne.n	8005624 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f06f 0201 	mvn.w	r2, #1
 800561c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7fb ffa0 	bl	8001564 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800562e:	2b80      	cmp	r3, #128	; 0x80
 8005630:	d10e      	bne.n	8005650 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800563c:	2b80      	cmp	r3, #128	; 0x80
 800563e:	d107      	bne.n	8005650 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f8e2 	bl	8005814 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565a:	2b40      	cmp	r3, #64	; 0x40
 800565c:	d10e      	bne.n	800567c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005668:	2b40      	cmp	r3, #64	; 0x40
 800566a:	d107      	bne.n	800567c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f838 	bl	80056ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f003 0320 	and.w	r3, r3, #32
 8005686:	2b20      	cmp	r3, #32
 8005688:	d10e      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f003 0320 	and.w	r3, r3, #32
 8005694:	2b20      	cmp	r3, #32
 8005696:	d107      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f06f 0220 	mvn.w	r2, #32
 80056a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f8ac 	bl	8005800 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056a8:	bf00      	nop
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a34      	ldr	r2, [pc, #208]	; (80057e4 <TIM_Base_SetConfig+0xe4>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d00f      	beq.n	8005738 <TIM_Base_SetConfig+0x38>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800571e:	d00b      	beq.n	8005738 <TIM_Base_SetConfig+0x38>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a31      	ldr	r2, [pc, #196]	; (80057e8 <TIM_Base_SetConfig+0xe8>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d007      	beq.n	8005738 <TIM_Base_SetConfig+0x38>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a30      	ldr	r2, [pc, #192]	; (80057ec <TIM_Base_SetConfig+0xec>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d003      	beq.n	8005738 <TIM_Base_SetConfig+0x38>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a2f      	ldr	r2, [pc, #188]	; (80057f0 <TIM_Base_SetConfig+0xf0>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d108      	bne.n	800574a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	4313      	orrs	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a25      	ldr	r2, [pc, #148]	; (80057e4 <TIM_Base_SetConfig+0xe4>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d01b      	beq.n	800578a <TIM_Base_SetConfig+0x8a>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005758:	d017      	beq.n	800578a <TIM_Base_SetConfig+0x8a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a22      	ldr	r2, [pc, #136]	; (80057e8 <TIM_Base_SetConfig+0xe8>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d013      	beq.n	800578a <TIM_Base_SetConfig+0x8a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a21      	ldr	r2, [pc, #132]	; (80057ec <TIM_Base_SetConfig+0xec>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d00f      	beq.n	800578a <TIM_Base_SetConfig+0x8a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a20      	ldr	r2, [pc, #128]	; (80057f0 <TIM_Base_SetConfig+0xf0>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d00b      	beq.n	800578a <TIM_Base_SetConfig+0x8a>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a1f      	ldr	r2, [pc, #124]	; (80057f4 <TIM_Base_SetConfig+0xf4>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d007      	beq.n	800578a <TIM_Base_SetConfig+0x8a>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a1e      	ldr	r2, [pc, #120]	; (80057f8 <TIM_Base_SetConfig+0xf8>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d003      	beq.n	800578a <TIM_Base_SetConfig+0x8a>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a1d      	ldr	r2, [pc, #116]	; (80057fc <TIM_Base_SetConfig+0xfc>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d108      	bne.n	800579c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	4313      	orrs	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	689a      	ldr	r2, [r3, #8]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a08      	ldr	r2, [pc, #32]	; (80057e4 <TIM_Base_SetConfig+0xe4>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d103      	bne.n	80057d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	691a      	ldr	r2, [r3, #16]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	615a      	str	r2, [r3, #20]
}
 80057d6:	bf00      	nop
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	40010000 	.word	0x40010000
 80057e8:	40000400 	.word	0x40000400
 80057ec:	40000800 	.word	0x40000800
 80057f0:	40000c00 	.word	0x40000c00
 80057f4:	40014000 	.word	0x40014000
 80057f8:	40014400 	.word	0x40014400
 80057fc:	40014800 	.word	0x40014800

08005800 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005828:	b084      	sub	sp, #16
 800582a:	b580      	push	{r7, lr}
 800582c:	b084      	sub	sp, #16
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	f107 001c 	add.w	r0, r7, #28
 8005836:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800583a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583c:	2b01      	cmp	r3, #1
 800583e:	d122      	bne.n	8005886 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005844:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800586a:	2b01      	cmp	r3, #1
 800586c:	d105      	bne.n	800587a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f9c0 	bl	8005c00 <USB_CoreReset>
 8005880:	4603      	mov	r3, r0
 8005882:	73fb      	strb	r3, [r7, #15]
 8005884:	e01a      	b.n	80058bc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f9b4 	bl	8005c00 <USB_CoreReset>
 8005898:	4603      	mov	r3, r0
 800589a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800589c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d106      	bne.n	80058b0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	639a      	str	r2, [r3, #56]	; 0x38
 80058ae:	e005      	b.n	80058bc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80058bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d10b      	bne.n	80058da <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f043 0206 	orr.w	r2, r3, #6
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f043 0220 	orr.w	r2, r3, #32
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80058da:	7bfb      	ldrb	r3, [r7, #15]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058e6:	b004      	add	sp, #16
 80058e8:	4770      	bx	lr

080058ea <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058ea:	b480      	push	{r7}
 80058ec:	b083      	sub	sp, #12
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f043 0201 	orr.w	r2, r3, #1
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f023 0201 	bic.w	r2, r3, #1
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b084      	sub	sp, #16
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
 8005936:	460b      	mov	r3, r1
 8005938:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800594a:	78fb      	ldrb	r3, [r7, #3]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d115      	bne.n	800597c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800595c:	2001      	movs	r0, #1
 800595e:	f7fc fd47 	bl	80023f0 <HAL_Delay>
      ms++;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	3301      	adds	r3, #1
 8005966:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 f93a 	bl	8005be2 <USB_GetMode>
 800596e:	4603      	mov	r3, r0
 8005970:	2b01      	cmp	r3, #1
 8005972:	d01e      	beq.n	80059b2 <USB_SetCurrentMode+0x84>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2b31      	cmp	r3, #49	; 0x31
 8005978:	d9f0      	bls.n	800595c <USB_SetCurrentMode+0x2e>
 800597a:	e01a      	b.n	80059b2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800597c:	78fb      	ldrb	r3, [r7, #3]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d115      	bne.n	80059ae <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800598e:	2001      	movs	r0, #1
 8005990:	f7fc fd2e 	bl	80023f0 <HAL_Delay>
      ms++;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	3301      	adds	r3, #1
 8005998:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f921 	bl	8005be2 <USB_GetMode>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d005      	beq.n	80059b2 <USB_SetCurrentMode+0x84>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2b31      	cmp	r3, #49	; 0x31
 80059aa:	d9f0      	bls.n	800598e <USB_SetCurrentMode+0x60>
 80059ac:	e001      	b.n	80059b2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e005      	b.n	80059be <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2b32      	cmp	r3, #50	; 0x32
 80059b6:	d101      	bne.n	80059bc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e000      	b.n	80059be <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
	...

080059c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80059d2:	2300      	movs	r3, #0
 80059d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	3301      	adds	r3, #1
 80059da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4a13      	ldr	r2, [pc, #76]	; (8005a2c <USB_FlushTxFifo+0x64>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d901      	bls.n	80059e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e01b      	b.n	8005a20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	daf2      	bge.n	80059d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	019b      	lsls	r3, r3, #6
 80059f8:	f043 0220 	orr.w	r2, r3, #32
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	3301      	adds	r3, #1
 8005a04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	4a08      	ldr	r2, [pc, #32]	; (8005a2c <USB_FlushTxFifo+0x64>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d901      	bls.n	8005a12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e006      	b.n	8005a20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	f003 0320 	and.w	r3, r3, #32
 8005a1a:	2b20      	cmp	r3, #32
 8005a1c:	d0f0      	beq.n	8005a00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	00030d40 	.word	0x00030d40

08005a30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4a11      	ldr	r2, [pc, #68]	; (8005a8c <USB_FlushRxFifo+0x5c>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d901      	bls.n	8005a4e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e018      	b.n	8005a80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	daf2      	bge.n	8005a3c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a56:	2300      	movs	r3, #0
 8005a58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2210      	movs	r2, #16
 8005a5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	3301      	adds	r3, #1
 8005a64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	4a08      	ldr	r2, [pc, #32]	; (8005a8c <USB_FlushRxFifo+0x5c>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d901      	bls.n	8005a72 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e006      	b.n	8005a80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	f003 0310 	and.w	r3, r3, #16
 8005a7a:	2b10      	cmp	r3, #16
 8005a7c:	d0f0      	beq.n	8005a60 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	00030d40 	.word	0x00030d40

08005a90 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b089      	sub	sp, #36	; 0x24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	4611      	mov	r1, r2
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	71fb      	strb	r3, [r7, #7]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005aae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d123      	bne.n	8005afe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005ab6:	88bb      	ldrh	r3, [r7, #4]
 8005ab8:	3303      	adds	r3, #3
 8005aba:	089b      	lsrs	r3, r3, #2
 8005abc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005abe:	2300      	movs	r3, #0
 8005ac0:	61bb      	str	r3, [r7, #24]
 8005ac2:	e018      	b.n	8005af6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ac4:	79fb      	ldrb	r3, [r7, #7]
 8005ac6:	031a      	lsls	r2, r3, #12
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	3301      	adds	r3, #1
 8005adc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	3301      	adds	r3, #1
 8005aee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	3301      	adds	r3, #1
 8005af4:	61bb      	str	r3, [r7, #24]
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d3e2      	bcc.n	8005ac4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3724      	adds	r7, #36	; 0x24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b08b      	sub	sp, #44	; 0x2c
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	4613      	mov	r3, r2
 8005b18:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005b22:	88fb      	ldrh	r3, [r7, #6]
 8005b24:	089b      	lsrs	r3, r3, #2
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005b2a:	88fb      	ldrh	r3, [r7, #6]
 8005b2c:	f003 0303 	and.w	r3, r3, #3
 8005b30:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005b32:	2300      	movs	r3, #0
 8005b34:	623b      	str	r3, [r7, #32]
 8005b36:	e014      	b.n	8005b62 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	3301      	adds	r3, #1
 8005b48:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	3301      	adds	r3, #1
 8005b54:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	3301      	adds	r3, #1
 8005b5a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	623b      	str	r3, [r7, #32]
 8005b62:	6a3a      	ldr	r2, [r7, #32]
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d3e6      	bcc.n	8005b38 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005b6a:	8bfb      	ldrh	r3, [r7, #30]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d01e      	beq.n	8005bae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005b70:	2300      	movs	r3, #0
 8005b72:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	f107 0310 	add.w	r3, r7, #16
 8005b80:	6812      	ldr	r2, [r2, #0]
 8005b82:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	6a3b      	ldr	r3, [r7, #32]
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	701a      	strb	r2, [r3, #0]
      i++;
 8005b96:	6a3b      	ldr	r3, [r7, #32]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	623b      	str	r3, [r7, #32]
      pDest++;
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005ba2:	8bfb      	ldrh	r3, [r7, #30]
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005ba8:	8bfb      	ldrh	r3, [r7, #30]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1ea      	bne.n	8005b84 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	372c      	adds	r7, #44	; 0x2c
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b083      	sub	sp, #12
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	f003 0301 	and.w	r3, r3, #1
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
	...

08005c00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	4a13      	ldr	r2, [pc, #76]	; (8005c64 <USB_CoreReset+0x64>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d901      	bls.n	8005c1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e01b      	b.n	8005c56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	daf2      	bge.n	8005c0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c26:	2300      	movs	r3, #0
 8005c28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	f043 0201 	orr.w	r2, r3, #1
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4a09      	ldr	r2, [pc, #36]	; (8005c64 <USB_CoreReset+0x64>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d901      	bls.n	8005c48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e006      	b.n	8005c56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d0f0      	beq.n	8005c36 <USB_CoreReset+0x36>

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	00030d40 	.word	0x00030d40

08005c68 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c68:	b084      	sub	sp, #16
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b086      	sub	sp, #24
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c88:	461a      	mov	r2, r3
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c92:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005caa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d018      	beq.n	8005cf0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d10a      	bne.n	8005cda <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cd2:	f043 0304 	orr.w	r3, r3, #4
 8005cd6:	6013      	str	r3, [r2, #0]
 8005cd8:	e014      	b.n	8005d04 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ce8:	f023 0304 	bic.w	r3, r3, #4
 8005cec:	6013      	str	r3, [r2, #0]
 8005cee:	e009      	b.n	8005d04 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cfe:	f023 0304 	bic.w	r3, r3, #4
 8005d02:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d04:	2110      	movs	r1, #16
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7ff fe5e 	bl	80059c8 <USB_FlushTxFifo>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d001      	beq.n	8005d16 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7ff fe8a 	bl	8005a30 <USB_FlushRxFifo>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d001      	beq.n	8005d26 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d26:	2300      	movs	r3, #0
 8005d28:	613b      	str	r3, [r7, #16]
 8005d2a:	e015      	b.n	8005d58 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d38:	461a      	mov	r2, r3
 8005d3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d3e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	3301      	adds	r3, #1
 8005d56:	613b      	str	r3, [r7, #16]
 8005d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d3e5      	bcc.n	8005d2c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d6c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00b      	beq.n	8005d92 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d80:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a13      	ldr	r2, [pc, #76]	; (8005dd4 <USB_HostInit+0x16c>)
 8005d86:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a13      	ldr	r2, [pc, #76]	; (8005dd8 <USB_HostInit+0x170>)
 8005d8c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005d90:	e009      	b.n	8005da6 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2280      	movs	r2, #128	; 0x80
 8005d96:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a10      	ldr	r2, [pc, #64]	; (8005ddc <USB_HostInit+0x174>)
 8005d9c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a0f      	ldr	r2, [pc, #60]	; (8005de0 <USB_HostInit+0x178>)
 8005da2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d105      	bne.n	8005db8 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	f043 0210 	orr.w	r2, r3, #16
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	699a      	ldr	r2, [r3, #24]
 8005dbc:	4b09      	ldr	r3, [pc, #36]	; (8005de4 <USB_HostInit+0x17c>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dd0:	b004      	add	sp, #16
 8005dd2:	4770      	bx	lr
 8005dd4:	01000200 	.word	0x01000200
 8005dd8:	00e00300 	.word	0x00e00300
 8005ddc:	00600080 	.word	0x00600080
 8005de0:	004000e0 	.word	0x004000e0
 8005de4:	a3200008 	.word	0xa3200008

08005de8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	460b      	mov	r3, r1
 8005df2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e06:	f023 0303 	bic.w	r3, r3, #3
 8005e0a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	78fb      	ldrb	r3, [r7, #3]
 8005e16:	f003 0303 	and.w	r3, r3, #3
 8005e1a:	68f9      	ldr	r1, [r7, #12]
 8005e1c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005e20:	4313      	orrs	r3, r2
 8005e22:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005e24:	78fb      	ldrb	r3, [r7, #3]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d107      	bne.n	8005e3a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e30:	461a      	mov	r2, r3
 8005e32:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005e36:	6053      	str	r3, [r2, #4]
 8005e38:	e009      	b.n	8005e4e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005e3a:	78fb      	ldrb	r3, [r7, #3]
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d106      	bne.n	8005e4e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e46:	461a      	mov	r2, r3
 8005e48:	f241 7370 	movw	r3, #6000	; 0x1770
 8005e4c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e7c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e8a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005e8c:	2064      	movs	r0, #100	; 0x64
 8005e8e:	f7fc faaf 	bl	80023f0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e9e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005ea0:	200a      	movs	r0, #10
 8005ea2:	f7fc faa5 	bl	80023f0 <HAL_Delay>

  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	460b      	mov	r3, r1
 8005eba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005ed4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d109      	bne.n	8005ef4 <USB_DriveVbus+0x44>
 8005ee0:	78fb      	ldrb	r3, [r7, #3]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d106      	bne.n	8005ef4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005eee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ef2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005efe:	d109      	bne.n	8005f14 <USB_DriveVbus+0x64>
 8005f00:	78fb      	ldrb	r3, [r7, #3]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d106      	bne.n	8005f14 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f12:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b085      	sub	sp, #20
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	0c5b      	lsrs	r3, r3, #17
 8005f40:	f003 0303 	and.w	r3, r3, #3
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	b29b      	uxth	r3, r3
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3714      	adds	r7, #20
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
	...

08005f74 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b088      	sub	sp, #32
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	4608      	mov	r0, r1
 8005f7e:	4611      	mov	r1, r2
 8005f80:	461a      	mov	r2, r3
 8005f82:	4603      	mov	r3, r0
 8005f84:	70fb      	strb	r3, [r7, #3]
 8005f86:	460b      	mov	r3, r1
 8005f88:	70bb      	strb	r3, [r7, #2]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005f96:	78fb      	ldrb	r3, [r7, #3]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fa8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005faa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005fae:	2b03      	cmp	r3, #3
 8005fb0:	d87e      	bhi.n	80060b0 <USB_HC_Init+0x13c>
 8005fb2:	a201      	add	r2, pc, #4	; (adr r2, 8005fb8 <USB_HC_Init+0x44>)
 8005fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb8:	08005fc9 	.word	0x08005fc9
 8005fbc:	08006073 	.word	0x08006073
 8005fc0:	08005fc9 	.word	0x08005fc9
 8005fc4:	08006035 	.word	0x08006035
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005fc8:	78fb      	ldrb	r3, [r7, #3]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	f240 439d 	movw	r3, #1181	; 0x49d
 8005fda:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005fdc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	da10      	bge.n	8006006 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005fe4:	78fb      	ldrb	r3, [r7, #3]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	78fa      	ldrb	r2, [r7, #3]
 8005ff4:	0151      	lsls	r1, r2, #5
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	440a      	add	r2, r1
 8005ffa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006002:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006004:	e057      	b.n	80060b6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800600e:	2b00      	cmp	r3, #0
 8006010:	d051      	beq.n	80060b6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006012:	78fb      	ldrb	r3, [r7, #3]
 8006014:	015a      	lsls	r2, r3, #5
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	4413      	add	r3, r2
 800601a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	78fa      	ldrb	r2, [r7, #3]
 8006022:	0151      	lsls	r1, r2, #5
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	440a      	add	r2, r1
 8006028:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800602c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006030:	60d3      	str	r3, [r2, #12]
      break;
 8006032:	e040      	b.n	80060b6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006034:	78fb      	ldrb	r3, [r7, #3]
 8006036:	015a      	lsls	r2, r3, #5
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	4413      	add	r3, r2
 800603c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006040:	461a      	mov	r2, r3
 8006042:	f240 639d 	movw	r3, #1693	; 0x69d
 8006046:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006048:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800604c:	2b00      	cmp	r3, #0
 800604e:	da34      	bge.n	80060ba <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006050:	78fb      	ldrb	r3, [r7, #3]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	4413      	add	r3, r2
 8006058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	78fa      	ldrb	r2, [r7, #3]
 8006060:	0151      	lsls	r1, r2, #5
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	440a      	add	r2, r1
 8006066:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800606a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800606e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006070:	e023      	b.n	80060ba <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006072:	78fb      	ldrb	r3, [r7, #3]
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	4413      	add	r3, r2
 800607a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800607e:	461a      	mov	r2, r3
 8006080:	f240 2325 	movw	r3, #549	; 0x225
 8006084:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006086:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800608a:	2b00      	cmp	r3, #0
 800608c:	da17      	bge.n	80060be <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800608e:	78fb      	ldrb	r3, [r7, #3]
 8006090:	015a      	lsls	r2, r3, #5
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	4413      	add	r3, r2
 8006096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	78fa      	ldrb	r2, [r7, #3]
 800609e:	0151      	lsls	r1, r2, #5
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	440a      	add	r2, r1
 80060a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060a8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80060ac:	60d3      	str	r3, [r2, #12]
      }
      break;
 80060ae:	e006      	b.n	80060be <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	77fb      	strb	r3, [r7, #31]
      break;
 80060b4:	e004      	b.n	80060c0 <USB_HC_Init+0x14c>
      break;
 80060b6:	bf00      	nop
 80060b8:	e002      	b.n	80060c0 <USB_HC_Init+0x14c>
      break;
 80060ba:	bf00      	nop
 80060bc:	e000      	b.n	80060c0 <USB_HC_Init+0x14c>
      break;
 80060be:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80060c0:	78fb      	ldrb	r3, [r7, #3]
 80060c2:	015a      	lsls	r2, r3, #5
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	78fa      	ldrb	r2, [r7, #3]
 80060d0:	0151      	lsls	r1, r2, #5
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	440a      	add	r2, r1
 80060d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060da:	f043 0302 	orr.w	r3, r3, #2
 80060de:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060e6:	699a      	ldr	r2, [r3, #24]
 80060e8:	78fb      	ldrb	r3, [r7, #3]
 80060ea:	f003 030f 	and.w	r3, r3, #15
 80060ee:	2101      	movs	r1, #1
 80060f0:	fa01 f303 	lsl.w	r3, r1, r3
 80060f4:	6939      	ldr	r1, [r7, #16]
 80060f6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80060fa:	4313      	orrs	r3, r2
 80060fc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800610a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800610e:	2b00      	cmp	r3, #0
 8006110:	da03      	bge.n	800611a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006116:	61bb      	str	r3, [r7, #24]
 8006118:	e001      	b.n	800611e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800611a:	2300      	movs	r3, #0
 800611c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f7ff feff 	bl	8005f22 <USB_GetHostSpeed>
 8006124:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006126:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800612a:	2b02      	cmp	r3, #2
 800612c:	d106      	bne.n	800613c <USB_HC_Init+0x1c8>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2b02      	cmp	r3, #2
 8006132:	d003      	beq.n	800613c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006134:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006138:	617b      	str	r3, [r7, #20]
 800613a:	e001      	b.n	8006140 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800613c:	2300      	movs	r3, #0
 800613e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006140:	787b      	ldrb	r3, [r7, #1]
 8006142:	059b      	lsls	r3, r3, #22
 8006144:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006148:	78bb      	ldrb	r3, [r7, #2]
 800614a:	02db      	lsls	r3, r3, #11
 800614c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006150:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006152:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006156:	049b      	lsls	r3, r3, #18
 8006158:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800615c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800615e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006160:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006164:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800616a:	78fb      	ldrb	r3, [r7, #3]
 800616c:	0159      	lsls	r1, r3, #5
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	440b      	add	r3, r1
 8006172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006176:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800617c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800617e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006182:	2b03      	cmp	r3, #3
 8006184:	d003      	beq.n	800618e <USB_HC_Init+0x21a>
 8006186:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800618a:	2b01      	cmp	r3, #1
 800618c:	d10f      	bne.n	80061ae <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800618e:	78fb      	ldrb	r3, [r7, #3]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	4413      	add	r3, r2
 8006196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	78fa      	ldrb	r2, [r7, #3]
 800619e:	0151      	lsls	r1, r2, #5
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	440a      	add	r2, r1
 80061a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061ac:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80061ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3720      	adds	r7, #32
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b08c      	sub	sp, #48	; 0x30
 80061bc:	af02      	add	r7, sp, #8
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	4613      	mov	r3, r2
 80061c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	785b      	ldrb	r3, [r3, #1]
 80061ce:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80061d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061d4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d02d      	beq.n	800623e <USB_HC_StartXfer+0x86>
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	791b      	ldrb	r3, [r3, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d129      	bne.n	800623e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80061ea:	79fb      	ldrb	r3, [r7, #7]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d117      	bne.n	8006220 <USB_HC_StartXfer+0x68>
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	79db      	ldrb	r3, [r3, #7]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d003      	beq.n	8006200 <USB_HC_StartXfer+0x48>
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	79db      	ldrb	r3, [r3, #7]
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d10f      	bne.n	8006220 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	6a3b      	ldr	r3, [r7, #32]
 8006206:	4413      	add	r3, r2
 8006208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	69fa      	ldr	r2, [r7, #28]
 8006210:	0151      	lsls	r1, r2, #5
 8006212:	6a3a      	ldr	r2, [r7, #32]
 8006214:	440a      	add	r2, r1
 8006216:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800621a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006220:	79fb      	ldrb	r3, [r7, #7]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10b      	bne.n	800623e <USB_HC_StartXfer+0x86>
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	795b      	ldrb	r3, [r3, #5]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d107      	bne.n	800623e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	785b      	ldrb	r3, [r3, #1]
 8006232:	4619      	mov	r1, r3
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f000 fa0f 	bl	8006658 <USB_DoPing>
      return HAL_OK;
 800623a:	2300      	movs	r3, #0
 800623c:	e0f8      	b.n	8006430 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d018      	beq.n	8006278 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	8912      	ldrh	r2, [r2, #8]
 800624e:	4413      	add	r3, r2
 8006250:	3b01      	subs	r3, #1
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	8912      	ldrh	r2, [r2, #8]
 8006256:	fbb3 f3f2 	udiv	r3, r3, r2
 800625a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800625c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800625e:	8b7b      	ldrh	r3, [r7, #26]
 8006260:	429a      	cmp	r2, r3
 8006262:	d90b      	bls.n	800627c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006264:	8b7b      	ldrh	r3, [r7, #26]
 8006266:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006268:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	8912      	ldrh	r2, [r2, #8]
 800626e:	fb03 f202 	mul.w	r2, r3, r2
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	611a      	str	r2, [r3, #16]
 8006276:	e001      	b.n	800627c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006278:	2301      	movs	r3, #1
 800627a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	78db      	ldrb	r3, [r3, #3]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d007      	beq.n	8006294 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006284:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	8912      	ldrh	r2, [r2, #8]
 800628a:	fb03 f202 	mul.w	r2, r3, r2
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	611a      	str	r2, [r3, #16]
 8006292:	e003      	b.n	800629c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	695a      	ldr	r2, [r3, #20]
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80062a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062a6:	04d9      	lsls	r1, r3, #19
 80062a8:	4b63      	ldr	r3, [pc, #396]	; (8006438 <USB_HC_StartXfer+0x280>)
 80062aa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062ac:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	7a9b      	ldrb	r3, [r3, #10]
 80062b2:	075b      	lsls	r3, r3, #29
 80062b4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062b8:	69f9      	ldr	r1, [r7, #28]
 80062ba:	0148      	lsls	r0, r1, #5
 80062bc:	6a39      	ldr	r1, [r7, #32]
 80062be:	4401      	add	r1, r0
 80062c0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80062c4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062c6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80062c8:	79fb      	ldrb	r3, [r7, #7]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d009      	beq.n	80062e2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	68d9      	ldr	r1, [r3, #12]
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	6a3b      	ldr	r3, [r7, #32]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062de:	460a      	mov	r2, r1
 80062e0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80062e2:	6a3b      	ldr	r3, [r7, #32]
 80062e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	bf0c      	ite	eq
 80062f2:	2301      	moveq	r3, #1
 80062f4:	2300      	movne	r3, #0
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	6a3b      	ldr	r3, [r7, #32]
 8006300:	4413      	add	r3, r2
 8006302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	69fa      	ldr	r2, [r7, #28]
 800630a:	0151      	lsls	r1, r2, #5
 800630c:	6a3a      	ldr	r2, [r7, #32]
 800630e:	440a      	add	r2, r1
 8006310:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006314:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006318:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	015a      	lsls	r2, r3, #5
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	4413      	add	r3, r2
 8006322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	7e7b      	ldrb	r3, [r7, #25]
 800632a:	075b      	lsls	r3, r3, #29
 800632c:	69f9      	ldr	r1, [r7, #28]
 800632e:	0148      	lsls	r0, r1, #5
 8006330:	6a39      	ldr	r1, [r7, #32]
 8006332:	4401      	add	r1, r0
 8006334:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006338:	4313      	orrs	r3, r2
 800633a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	6a3b      	ldr	r3, [r7, #32]
 8006342:	4413      	add	r3, r2
 8006344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006352:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	78db      	ldrb	r3, [r3, #3]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d004      	beq.n	8006366 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006362:	613b      	str	r3, [r7, #16]
 8006364:	e003      	b.n	800636e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800636c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006374:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	015a      	lsls	r2, r3, #5
 800637a:	6a3b      	ldr	r3, [r7, #32]
 800637c:	4413      	add	r3, r2
 800637e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006382:	461a      	mov	r2, r3
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006388:	79fb      	ldrb	r3, [r7, #7]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800638e:	2300      	movs	r3, #0
 8006390:	e04e      	b.n	8006430 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	78db      	ldrb	r3, [r3, #3]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d149      	bne.n	800642e <USB_HC_StartXfer+0x276>
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d045      	beq.n	800642e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	79db      	ldrb	r3, [r3, #7]
 80063a6:	2b03      	cmp	r3, #3
 80063a8:	d830      	bhi.n	800640c <USB_HC_StartXfer+0x254>
 80063aa:	a201      	add	r2, pc, #4	; (adr r2, 80063b0 <USB_HC_StartXfer+0x1f8>)
 80063ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b0:	080063c1 	.word	0x080063c1
 80063b4:	080063e5 	.word	0x080063e5
 80063b8:	080063c1 	.word	0x080063c1
 80063bc:	080063e5 	.word	0x080063e5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	3303      	adds	r3, #3
 80063c6:	089b      	lsrs	r3, r3, #2
 80063c8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80063ca:	8afa      	ldrh	r2, [r7, #22]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d91c      	bls.n	8006410 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	f043 0220 	orr.w	r2, r3, #32
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	619a      	str	r2, [r3, #24]
        }
        break;
 80063e2:	e015      	b.n	8006410 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	695b      	ldr	r3, [r3, #20]
 80063e8:	3303      	adds	r3, #3
 80063ea:	089b      	lsrs	r3, r3, #2
 80063ec:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80063ee:	8afa      	ldrh	r2, [r7, #22]
 80063f0:	6a3b      	ldr	r3, [r7, #32]
 80063f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d90a      	bls.n	8006414 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	619a      	str	r2, [r3, #24]
        }
        break;
 800640a:	e003      	b.n	8006414 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800640c:	bf00      	nop
 800640e:	e002      	b.n	8006416 <USB_HC_StartXfer+0x25e>
        break;
 8006410:	bf00      	nop
 8006412:	e000      	b.n	8006416 <USB_HC_StartXfer+0x25e>
        break;
 8006414:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	68d9      	ldr	r1, [r3, #12]
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	785a      	ldrb	r2, [r3, #1]
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	b29b      	uxth	r3, r3
 8006424:	2000      	movs	r0, #0
 8006426:	9000      	str	r0, [sp, #0]
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f7ff fb31 	bl	8005a90 <USB_WritePacket>
  }

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3728      	adds	r7, #40	; 0x28
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	1ff80000 	.word	0x1ff80000

0800643c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	b29b      	uxth	r3, r3
}
 8006452:	4618      	mov	r0, r3
 8006454:	3714      	adds	r7, #20
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800645e:	b480      	push	{r7}
 8006460:	b089      	sub	sp, #36	; 0x24
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	460b      	mov	r3, r1
 8006468:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800646e:	78fb      	ldrb	r3, [r7, #3]
 8006470:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006472:	2300      	movs	r3, #0
 8006474:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	4413      	add	r3, r2
 800647e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	0c9b      	lsrs	r3, r3, #18
 8006486:	f003 0303 	and.w	r3, r3, #3
 800648a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	4413      	add	r3, r2
 8006494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	0fdb      	lsrs	r3, r3, #31
 800649c:	f003 0301 	and.w	r3, r3, #1
 80064a0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f003 0320 	and.w	r3, r3, #32
 80064aa:	2b20      	cmp	r3, #32
 80064ac:	d104      	bne.n	80064b8 <USB_HC_Halt+0x5a>
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d101      	bne.n	80064b8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80064b4:	2300      	movs	r3, #0
 80064b6:	e0c8      	b.n	800664a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d002      	beq.n	80064c4 <USB_HC_Halt+0x66>
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d163      	bne.n	800658c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	0151      	lsls	r1, r2, #5
 80064d6:	69fa      	ldr	r2, [r7, #28]
 80064d8:	440a      	add	r2, r1
 80064da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064e2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f003 0320 	and.w	r3, r3, #32
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f040 80ab 	bne.w	8006648 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d133      	bne.n	8006566 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	015a      	lsls	r2, r3, #5
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	4413      	add	r3, r2
 8006506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	0151      	lsls	r1, r2, #5
 8006510:	69fa      	ldr	r2, [r7, #28]
 8006512:	440a      	add	r2, r1
 8006514:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006518:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800651c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	015a      	lsls	r2, r3, #5
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	4413      	add	r3, r2
 8006526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	69ba      	ldr	r2, [r7, #24]
 800652e:	0151      	lsls	r1, r2, #5
 8006530:	69fa      	ldr	r2, [r7, #28]
 8006532:	440a      	add	r2, r1
 8006534:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006538:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800653c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	3301      	adds	r3, #1
 8006542:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800654a:	d81d      	bhi.n	8006588 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	4413      	add	r3, r2
 8006554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800655e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006562:	d0ec      	beq.n	800653e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006564:	e070      	b.n	8006648 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	4413      	add	r3, r2
 800656e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	0151      	lsls	r1, r2, #5
 8006578:	69fa      	ldr	r2, [r7, #28]
 800657a:	440a      	add	r2, r1
 800657c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006580:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006584:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006586:	e05f      	b.n	8006648 <USB_HC_Halt+0x1ea>
            break;
 8006588:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800658a:	e05d      	b.n	8006648 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	015a      	lsls	r2, r3, #5
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	4413      	add	r3, r2
 8006594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	69ba      	ldr	r2, [r7, #24]
 800659c:	0151      	lsls	r1, r2, #5
 800659e:	69fa      	ldr	r2, [r7, #28]
 80065a0:	440a      	add	r2, r1
 80065a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065aa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d133      	bne.n	8006624 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	015a      	lsls	r2, r3, #5
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	69ba      	ldr	r2, [r7, #24]
 80065cc:	0151      	lsls	r1, r2, #5
 80065ce:	69fa      	ldr	r2, [r7, #28]
 80065d0:	440a      	add	r2, r1
 80065d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065da:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	0151      	lsls	r1, r2, #5
 80065ee:	69fa      	ldr	r2, [r7, #28]
 80065f0:	440a      	add	r2, r1
 80065f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065fa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	3301      	adds	r3, #1
 8006600:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006608:	d81d      	bhi.n	8006646 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	015a      	lsls	r2, r3, #5
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	4413      	add	r3, r2
 8006612:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800661c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006620:	d0ec      	beq.n	80065fc <USB_HC_Halt+0x19e>
 8006622:	e011      	b.n	8006648 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	015a      	lsls	r2, r3, #5
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	4413      	add	r3, r2
 800662c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	69ba      	ldr	r2, [r7, #24]
 8006634:	0151      	lsls	r1, r2, #5
 8006636:	69fa      	ldr	r2, [r7, #28]
 8006638:	440a      	add	r2, r1
 800663a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800663e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006642:	6013      	str	r3, [r2, #0]
 8006644:	e000      	b.n	8006648 <USB_HC_Halt+0x1ea>
          break;
 8006646:	bf00      	nop
    }
  }

  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3724      	adds	r7, #36	; 0x24
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
	...

08006658 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006658:	b480      	push	{r7}
 800665a:	b087      	sub	sp, #28
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	460b      	mov	r3, r1
 8006662:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006668:	78fb      	ldrb	r3, [r7, #3]
 800666a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800666c:	2301      	movs	r3, #1
 800666e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	04da      	lsls	r2, r3, #19
 8006674:	4b15      	ldr	r3, [pc, #84]	; (80066cc <USB_DoPing+0x74>)
 8006676:	4013      	ands	r3, r2
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	0151      	lsls	r1, r2, #5
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	440a      	add	r2, r1
 8006680:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006684:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006688:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	015a      	lsls	r2, r3, #5
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	4413      	add	r3, r2
 8006692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066a0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066a8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b6:	461a      	mov	r2, r3
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	371c      	adds	r7, #28
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	1ff80000 	.word	0x1ff80000

080066d0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b088      	sub	sp, #32
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80066d8:	2300      	movs	r3, #0
 80066da:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80066e0:	2300      	movs	r3, #0
 80066e2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f7ff f911 	bl	800590c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80066ea:	2110      	movs	r1, #16
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f7ff f96b 	bl	80059c8 <USB_FlushTxFifo>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d001      	beq.n	80066fc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f7ff f997 	bl	8005a30 <USB_FlushRxFifo>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d001      	beq.n	800670c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800670c:	2300      	movs	r3, #0
 800670e:	61bb      	str	r3, [r7, #24]
 8006710:	e01f      	b.n	8006752 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	015a      	lsls	r2, r3, #5
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	4413      	add	r3, r2
 800671a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006728:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006730:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006738:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	015a      	lsls	r2, r3, #5
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	4413      	add	r3, r2
 8006742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006746:	461a      	mov	r2, r3
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	3301      	adds	r3, #1
 8006750:	61bb      	str	r3, [r7, #24]
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	2b0f      	cmp	r3, #15
 8006756:	d9dc      	bls.n	8006712 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006758:	2300      	movs	r3, #0
 800675a:	61bb      	str	r3, [r7, #24]
 800675c:	e034      	b.n	80067c8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	4413      	add	r3, r2
 8006766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006774:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800677c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006784:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	015a      	lsls	r2, r3, #5
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	4413      	add	r3, r2
 800678e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006792:	461a      	mov	r2, r3
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	3301      	adds	r3, #1
 800679c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067a4:	d80c      	bhi.n	80067c0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	015a      	lsls	r2, r3, #5
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067bc:	d0ec      	beq.n	8006798 <USB_StopHost+0xc8>
 80067be:	e000      	b.n	80067c2 <USB_StopHost+0xf2>
        break;
 80067c0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	3301      	adds	r3, #1
 80067c6:	61bb      	str	r3, [r7, #24]
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	2b0f      	cmp	r3, #15
 80067cc:	d9c7      	bls.n	800675e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067d4:	461a      	mov	r2, r3
 80067d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067da:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067e2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f7ff f880 	bl	80058ea <USB_EnableGlobalInt>

  return ret;
 80067ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3720      	adds	r7, #32
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80067f4:	b590      	push	{r4, r7, lr}
 80067f6:	b089      	sub	sp, #36	; 0x24
 80067f8:	af04      	add	r7, sp, #16
 80067fa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80067fc:	2301      	movs	r3, #1
 80067fe:	2202      	movs	r2, #2
 8006800:	2102      	movs	r1, #2
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fc66 	bl	80070d4 <USBH_FindInterface>
 8006808:	4603      	mov	r3, r0
 800680a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800680c:	7bfb      	ldrb	r3, [r7, #15]
 800680e:	2bff      	cmp	r3, #255	; 0xff
 8006810:	d002      	beq.n	8006818 <USBH_CDC_InterfaceInit+0x24>
 8006812:	7bfb      	ldrb	r3, [r7, #15]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d901      	bls.n	800681c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006818:	2302      	movs	r3, #2
 800681a:	e13d      	b.n	8006a98 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800681c:	7bfb      	ldrb	r3, [r7, #15]
 800681e:	4619      	mov	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fc3b 	bl	800709c <USBH_SelectInterface>
 8006826:	4603      	mov	r3, r0
 8006828:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800682a:	7bbb      	ldrb	r3, [r7, #14]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d001      	beq.n	8006834 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006830:	2302      	movs	r3, #2
 8006832:	e131      	b.n	8006a98 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800683a:	2050      	movs	r0, #80	; 0x50
 800683c:	f002 fafa 	bl	8008e34 <malloc>
 8006840:	4603      	mov	r3, r0
 8006842:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800684a:	69db      	ldr	r3, [r3, #28]
 800684c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006854:	2302      	movs	r3, #2
 8006856:	e11f      	b.n	8006a98 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006858:	2250      	movs	r2, #80	; 0x50
 800685a:	2100      	movs	r1, #0
 800685c:	68b8      	ldr	r0, [r7, #8]
 800685e:	f002 faf9 	bl	8008e54 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006862:	7bfb      	ldrb	r3, [r7, #15]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	211a      	movs	r1, #26
 8006868:	fb01 f303 	mul.w	r3, r1, r3
 800686c:	4413      	add	r3, r2
 800686e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	b25b      	sxtb	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	da15      	bge.n	80068a6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800687a:	7bfb      	ldrb	r3, [r7, #15]
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	211a      	movs	r1, #26
 8006880:	fb01 f303 	mul.w	r3, r1, r3
 8006884:	4413      	add	r3, r2
 8006886:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800688a:	781a      	ldrb	r2, [r3, #0]
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006890:	7bfb      	ldrb	r3, [r7, #15]
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	211a      	movs	r1, #26
 8006896:	fb01 f303 	mul.w	r3, r1, r3
 800689a:	4413      	add	r3, r2
 800689c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80068a0:	881a      	ldrh	r2, [r3, #0]
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	785b      	ldrb	r3, [r3, #1]
 80068aa:	4619      	mov	r1, r3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f001 ff2c 	bl	800870a <USBH_AllocPipe>
 80068b2:	4603      	mov	r3, r0
 80068b4:	461a      	mov	r2, r3
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	7819      	ldrb	r1, [r3, #0]
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	7858      	ldrb	r0, [r3, #1]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80068ce:	68ba      	ldr	r2, [r7, #8]
 80068d0:	8952      	ldrh	r2, [r2, #10]
 80068d2:	9202      	str	r2, [sp, #8]
 80068d4:	2203      	movs	r2, #3
 80068d6:	9201      	str	r2, [sp, #4]
 80068d8:	9300      	str	r3, [sp, #0]
 80068da:	4623      	mov	r3, r4
 80068dc:	4602      	mov	r2, r0
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f001 fee4 	bl	80086ac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	2200      	movs	r2, #0
 80068ea:	4619      	mov	r1, r3
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f002 f9f3 	bl	8008cd8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80068f2:	2300      	movs	r3, #0
 80068f4:	2200      	movs	r2, #0
 80068f6:	210a      	movs	r1, #10
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fbeb 	bl	80070d4 <USBH_FindInterface>
 80068fe:	4603      	mov	r3, r0
 8006900:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006902:	7bfb      	ldrb	r3, [r7, #15]
 8006904:	2bff      	cmp	r3, #255	; 0xff
 8006906:	d002      	beq.n	800690e <USBH_CDC_InterfaceInit+0x11a>
 8006908:	7bfb      	ldrb	r3, [r7, #15]
 800690a:	2b01      	cmp	r3, #1
 800690c:	d901      	bls.n	8006912 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800690e:	2302      	movs	r3, #2
 8006910:	e0c2      	b.n	8006a98 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006912:	7bfb      	ldrb	r3, [r7, #15]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	211a      	movs	r1, #26
 8006918:	fb01 f303 	mul.w	r3, r1, r3
 800691c:	4413      	add	r3, r2
 800691e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	b25b      	sxtb	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	da16      	bge.n	8006958 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800692a:	7bfb      	ldrb	r3, [r7, #15]
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	211a      	movs	r1, #26
 8006930:	fb01 f303 	mul.w	r3, r1, r3
 8006934:	4413      	add	r3, r2
 8006936:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800693a:	781a      	ldrb	r2, [r3, #0]
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006940:	7bfb      	ldrb	r3, [r7, #15]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	211a      	movs	r1, #26
 8006946:	fb01 f303 	mul.w	r3, r1, r3
 800694a:	4413      	add	r3, r2
 800694c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006950:	881a      	ldrh	r2, [r3, #0]
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	835a      	strh	r2, [r3, #26]
 8006956:	e015      	b.n	8006984 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006958:	7bfb      	ldrb	r3, [r7, #15]
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	211a      	movs	r1, #26
 800695e:	fb01 f303 	mul.w	r3, r1, r3
 8006962:	4413      	add	r3, r2
 8006964:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006968:	781a      	ldrb	r2, [r3, #0]
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800696e:	7bfb      	ldrb	r3, [r7, #15]
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	211a      	movs	r1, #26
 8006974:	fb01 f303 	mul.w	r3, r1, r3
 8006978:	4413      	add	r3, r2
 800697a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800697e:	881a      	ldrh	r2, [r3, #0]
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006984:	7bfb      	ldrb	r3, [r7, #15]
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	211a      	movs	r1, #26
 800698a:	fb01 f303 	mul.w	r3, r1, r3
 800698e:	4413      	add	r3, r2
 8006990:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	b25b      	sxtb	r3, r3
 8006998:	2b00      	cmp	r3, #0
 800699a:	da16      	bge.n	80069ca <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800699c:	7bfb      	ldrb	r3, [r7, #15]
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	211a      	movs	r1, #26
 80069a2:	fb01 f303 	mul.w	r3, r1, r3
 80069a6:	4413      	add	r3, r2
 80069a8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80069ac:	781a      	ldrb	r2, [r3, #0]
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	211a      	movs	r1, #26
 80069b8:	fb01 f303 	mul.w	r3, r1, r3
 80069bc:	4413      	add	r3, r2
 80069be:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80069c2:	881a      	ldrh	r2, [r3, #0]
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	835a      	strh	r2, [r3, #26]
 80069c8:	e015      	b.n	80069f6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80069ca:	7bfb      	ldrb	r3, [r7, #15]
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	211a      	movs	r1, #26
 80069d0:	fb01 f303 	mul.w	r3, r1, r3
 80069d4:	4413      	add	r3, r2
 80069d6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80069da:	781a      	ldrb	r2, [r3, #0]
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80069e0:	7bfb      	ldrb	r3, [r7, #15]
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	211a      	movs	r1, #26
 80069e6:	fb01 f303 	mul.w	r3, r1, r3
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80069f0:	881a      	ldrh	r2, [r3, #0]
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	7b9b      	ldrb	r3, [r3, #14]
 80069fa:	4619      	mov	r1, r3
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f001 fe84 	bl	800870a <USBH_AllocPipe>
 8006a02:	4603      	mov	r3, r0
 8006a04:	461a      	mov	r2, r3
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	7bdb      	ldrb	r3, [r3, #15]
 8006a0e:	4619      	mov	r1, r3
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f001 fe7a 	bl	800870a <USBH_AllocPipe>
 8006a16:	4603      	mov	r3, r0
 8006a18:	461a      	mov	r2, r3
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	7b59      	ldrb	r1, [r3, #13]
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	7b98      	ldrb	r0, [r3, #14]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	8b12      	ldrh	r2, [r2, #24]
 8006a36:	9202      	str	r2, [sp, #8]
 8006a38:	2202      	movs	r2, #2
 8006a3a:	9201      	str	r2, [sp, #4]
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	4623      	mov	r3, r4
 8006a40:	4602      	mov	r2, r0
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f001 fe32 	bl	80086ac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	7b19      	ldrb	r1, [r3, #12]
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	7bd8      	ldrb	r0, [r3, #15]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	8b52      	ldrh	r2, [r2, #26]
 8006a60:	9202      	str	r2, [sp, #8]
 8006a62:	2202      	movs	r2, #2
 8006a64:	9201      	str	r2, [sp, #4]
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	4623      	mov	r3, r4
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f001 fe1d 	bl	80086ac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	7b5b      	ldrb	r3, [r3, #13]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	4619      	mov	r1, r3
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f002 f928 	bl	8008cd8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	7b1b      	ldrb	r3, [r3, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	4619      	mov	r1, r3
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f002 f921 	bl	8008cd8 <USBH_LL_SetToggle>

  return USBH_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd90      	pop	{r4, r7, pc}

08006aa0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aae:	69db      	ldr	r3, [r3, #28]
 8006ab0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00e      	beq.n	8006ad8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	4619      	mov	r1, r3
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f001 fe12 	bl	80086ea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	4619      	mov	r1, r3
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f001 fe3d 	bl	800874c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	7b1b      	ldrb	r3, [r3, #12]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00e      	beq.n	8006afe <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	7b1b      	ldrb	r3, [r3, #12]
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f001 fdff 	bl	80086ea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	7b1b      	ldrb	r3, [r3, #12]
 8006af0:	4619      	mov	r1, r3
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f001 fe2a 	bl	800874c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	7b5b      	ldrb	r3, [r3, #13]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00e      	beq.n	8006b24 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	7b5b      	ldrb	r3, [r3, #13]
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f001 fdec 	bl	80086ea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	7b5b      	ldrb	r3, [r3, #13]
 8006b16:	4619      	mov	r1, r3
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f001 fe17 	bl	800874c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b2a:	69db      	ldr	r3, [r3, #28]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00b      	beq.n	8006b48 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b36:	69db      	ldr	r3, [r3, #28]
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f002 f983 	bl	8008e44 <free>
    phost->pActiveClass->pData = 0U;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b44:	2200      	movs	r2, #0
 8006b46:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b084      	sub	sp, #16
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b60:	69db      	ldr	r3, [r3, #28]
 8006b62:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	3340      	adds	r3, #64	; 0x40
 8006b68:	4619      	mov	r1, r3
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f8b1 	bl	8006cd2 <GetLineCoding>
 8006b70:	4603      	mov	r3, r0
 8006b72:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006b74:	7afb      	ldrb	r3, [r7, #11]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d105      	bne.n	8006b86 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b80:	2102      	movs	r1, #2
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006b86:	7afb      	ldrb	r3, [r7, #11]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ba6:	69db      	ldr	r3, [r3, #28]
 8006ba8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006bb0:	2b04      	cmp	r3, #4
 8006bb2:	d877      	bhi.n	8006ca4 <USBH_CDC_Process+0x114>
 8006bb4:	a201      	add	r2, pc, #4	; (adr r2, 8006bbc <USBH_CDC_Process+0x2c>)
 8006bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bba:	bf00      	nop
 8006bbc:	08006bd1 	.word	0x08006bd1
 8006bc0:	08006bd7 	.word	0x08006bd7
 8006bc4:	08006c07 	.word	0x08006c07
 8006bc8:	08006c7b 	.word	0x08006c7b
 8006bcc:	08006c89 	.word	0x08006c89
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8006bd4:	e06d      	b.n	8006cb2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bda:	4619      	mov	r1, r3
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f897 	bl	8006d10 <SetLineCoding>
 8006be2:	4603      	mov	r3, r0
 8006be4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006be6:	7bbb      	ldrb	r3, [r7, #14]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d104      	bne.n	8006bf6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	2202      	movs	r2, #2
 8006bf0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006bf4:	e058      	b.n	8006ca8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006bf6:	7bbb      	ldrb	r3, [r7, #14]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d055      	beq.n	8006ca8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2204      	movs	r2, #4
 8006c00:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006c04:	e050      	b.n	8006ca8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	3340      	adds	r3, #64	; 0x40
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 f860 	bl	8006cd2 <GetLineCoding>
 8006c12:	4603      	mov	r3, r0
 8006c14:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c16:	7bbb      	ldrb	r3, [r7, #14]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d126      	bne.n	8006c6a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c2e:	791b      	ldrb	r3, [r3, #4]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d13b      	bne.n	8006cac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c3e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d133      	bne.n	8006cac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c4e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d12b      	bne.n	8006cac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c5c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d124      	bne.n	8006cac <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f958 	bl	8006f18 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c68:	e020      	b.n	8006cac <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006c6a:	7bbb      	ldrb	r3, [r7, #14]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d01d      	beq.n	8006cac <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	2204      	movs	r2, #4
 8006c74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006c78:	e018      	b.n	8006cac <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f867 	bl	8006d4e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f8da 	bl	8006e3a <CDC_ProcessReception>
      break;
 8006c86:	e014      	b.n	8006cb2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006c88:	2100      	movs	r1, #0
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 ffef 	bl	8007c6e <USBH_ClrFeature>
 8006c90:	4603      	mov	r3, r0
 8006c92:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c94:	7bbb      	ldrb	r3, [r7, #14]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10a      	bne.n	8006cb0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006ca2:	e005      	b.n	8006cb0 <USBH_CDC_Process+0x120>

    default:
      break;
 8006ca4:	bf00      	nop
 8006ca6:	e004      	b.n	8006cb2 <USBH_CDC_Process+0x122>
      break;
 8006ca8:	bf00      	nop
 8006caa:	e002      	b.n	8006cb2 <USBH_CDC_Process+0x122>
      break;
 8006cac:	bf00      	nop
 8006cae:	e000      	b.n	8006cb2 <USBH_CDC_Process+0x122>
      break;
 8006cb0:	bf00      	nop

  }

  return status;
 8006cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3710      	adds	r7, #16
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b082      	sub	sp, #8
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
 8006cda:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	22a1      	movs	r2, #161	; 0xa1
 8006ce0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2221      	movs	r2, #33	; 0x21
 8006ce6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2207      	movs	r2, #7
 8006cf8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	2207      	movs	r2, #7
 8006cfe:	4619      	mov	r1, r3
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f001 fa81 	bl	8008208 <USBH_CtlReq>
 8006d06:	4603      	mov	r3, r0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3708      	adds	r7, #8
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2221      	movs	r2, #33	; 0x21
 8006d1e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2220      	movs	r2, #32
 8006d24:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2207      	movs	r2, #7
 8006d36:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	2207      	movs	r2, #7
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f001 fa62 	bl	8008208 <USBH_CtlReq>
 8006d44:	4603      	mov	r3, r0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3708      	adds	r7, #8
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b086      	sub	sp, #24
 8006d52:	af02      	add	r7, sp, #8
 8006d54:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d5c:	69db      	ldr	r3, [r3, #28]
 8006d5e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d60:	2300      	movs	r3, #0
 8006d62:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d002      	beq.n	8006d74 <CDC_ProcessTransmission+0x26>
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d023      	beq.n	8006dba <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006d72:	e05e      	b.n	8006e32 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	8b12      	ldrh	r2, [r2, #24]
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d90b      	bls.n	8006d98 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	69d9      	ldr	r1, [r3, #28]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	8b1a      	ldrh	r2, [r3, #24]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	7b5b      	ldrb	r3, [r3, #13]
 8006d8c:	2001      	movs	r0, #1
 8006d8e:	9000      	str	r0, [sp, #0]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f001 fc48 	bl	8008626 <USBH_BulkSendData>
 8006d96:	e00b      	b.n	8006db0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	7b5b      	ldrb	r3, [r3, #13]
 8006da6:	2001      	movs	r0, #1
 8006da8:	9000      	str	r0, [sp, #0]
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f001 fc3b 	bl	8008626 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2202      	movs	r2, #2
 8006db4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006db8:	e03b      	b.n	8006e32 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	7b5b      	ldrb	r3, [r3, #13]
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f001 ff5f 	bl	8008c84 <USBH_LL_GetURBState>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006dca:	7afb      	ldrb	r3, [r7, #11]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d128      	bne.n	8006e22 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	8b12      	ldrh	r2, [r2, #24]
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d90e      	bls.n	8006dfa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	8b12      	ldrh	r2, [r2, #24]
 8006de4:	1a9a      	subs	r2, r3, r2
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	8b12      	ldrh	r2, [r2, #24]
 8006df2:	441a      	add	r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	61da      	str	r2, [r3, #28]
 8006df8:	e002      	b.n	8006e00 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d004      	beq.n	8006e12 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e10:	e00e      	b.n	8006e30 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f868 	bl	8006ef0 <USBH_CDC_TransmitCallback>
      break;
 8006e20:	e006      	b.n	8006e30 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006e22:	7afb      	ldrb	r3, [r7, #11]
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d103      	bne.n	8006e30 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e30:	bf00      	nop
  }
}
 8006e32:	bf00      	nop
 8006e34:	3710      	adds	r7, #16
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b086      	sub	sp, #24
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006e56:	2b03      	cmp	r3, #3
 8006e58:	d002      	beq.n	8006e60 <CDC_ProcessReception+0x26>
 8006e5a:	2b04      	cmp	r3, #4
 8006e5c:	d00e      	beq.n	8006e7c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006e5e:	e043      	b.n	8006ee8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	6a19      	ldr	r1, [r3, #32]
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	8b5a      	ldrh	r2, [r3, #26]
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	7b1b      	ldrb	r3, [r3, #12]
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f001 fbff 	bl	8008670 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	2204      	movs	r2, #4
 8006e76:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006e7a:	e035      	b.n	8006ee8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	7b1b      	ldrb	r3, [r3, #12]
 8006e80:	4619      	mov	r1, r3
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f001 fefe 	bl	8008c84 <USBH_LL_GetURBState>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006e8c:	7cfb      	ldrb	r3, [r7, #19]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d129      	bne.n	8006ee6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	7b1b      	ldrb	r3, [r3, #12]
 8006e96:	4619      	mov	r1, r3
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f001 fe61 	bl	8008b60 <USBH_LL_GetLastXferSize>
 8006e9e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d016      	beq.n	8006ed8 <CDC_ProcessReception+0x9e>
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	8b5b      	ldrh	r3, [r3, #26]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d910      	bls.n	8006ed8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	1ad2      	subs	r2, r2, r3
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	6a1a      	ldr	r2, [r3, #32]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	441a      	add	r2, r3
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	2203      	movs	r2, #3
 8006ed2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006ed6:	e006      	b.n	8006ee6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 f80f 	bl	8006f04 <USBH_CDC_ReceiveCallback>
      break;
 8006ee6:	bf00      	nop
  }
}
 8006ee8:	bf00      	nop
 8006eea:	3718      	adds	r7, #24
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	4613      	mov	r3, r2
 8006f38:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d101      	bne.n	8006f44 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006f40:	2302      	movs	r3, #2
 8006f42:	e029      	b.n	8006f98 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	79fa      	ldrb	r2, [r7, #7]
 8006f48:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	f000 f81f 	bl	8006fa0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d003      	beq.n	8006f90 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	68ba      	ldr	r2, [r7, #8]
 8006f8c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f001 fd31 	bl	80089f8 <USBH_LL_Init>

  return USBH_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006fac:	2300      	movs	r3, #0
 8006fae:	60fb      	str	r3, [r7, #12]
 8006fb0:	e009      	b.n	8006fc6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	33e0      	adds	r3, #224	; 0xe0
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	4413      	add	r3, r2
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	60fb      	str	r3, [r7, #12]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2b0f      	cmp	r3, #15
 8006fca:	d9f2      	bls.n	8006fb2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006fcc:	2300      	movs	r3, #0
 8006fce:	60fb      	str	r3, [r7, #12]
 8006fd0:	e009      	b.n	8006fe6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006fdc:	2200      	movs	r2, #0
 8006fde:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	60fb      	str	r3, [r7, #12]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fec:	d3f1      	bcc.n	8006fd2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2240      	movs	r2, #64	; 0x40
 8007012:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3714      	adds	r7, #20
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007052:	2300      	movs	r3, #0
 8007054:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d016      	beq.n	800708a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007062:	2b00      	cmp	r3, #0
 8007064:	d10e      	bne.n	8007084 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800706c:	1c59      	adds	r1, r3, #1
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	33de      	adds	r3, #222	; 0xde
 8007078:	6839      	ldr	r1, [r7, #0]
 800707a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800707e:	2300      	movs	r3, #0
 8007080:	73fb      	strb	r3, [r7, #15]
 8007082:	e004      	b.n	800708e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007084:	2302      	movs	r3, #2
 8007086:	73fb      	strb	r3, [r7, #15]
 8007088:	e001      	b.n	800708e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800708a:	2302      	movs	r3, #2
 800708c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800708e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007090:	4618      	mov	r0, r3
 8007092:	3714      	adds	r7, #20
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	460b      	mov	r3, r1
 80070a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80070a8:	2300      	movs	r3, #0
 80070aa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80070b2:	78fa      	ldrb	r2, [r7, #3]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d204      	bcs.n	80070c2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	78fa      	ldrb	r2, [r7, #3]
 80070bc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80070c0:	e001      	b.n	80070c6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80070c2:	2302      	movs	r3, #2
 80070c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80070c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3714      	adds	r7, #20
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b087      	sub	sp, #28
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	4608      	mov	r0, r1
 80070de:	4611      	mov	r1, r2
 80070e0:	461a      	mov	r2, r3
 80070e2:	4603      	mov	r3, r0
 80070e4:	70fb      	strb	r3, [r7, #3]
 80070e6:	460b      	mov	r3, r1
 80070e8:	70bb      	strb	r3, [r7, #2]
 80070ea:	4613      	mov	r3, r2
 80070ec:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80070ee:	2300      	movs	r3, #0
 80070f0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80070f2:	2300      	movs	r3, #0
 80070f4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80070fc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80070fe:	e025      	b.n	800714c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007100:	7dfb      	ldrb	r3, [r7, #23]
 8007102:	221a      	movs	r2, #26
 8007104:	fb02 f303 	mul.w	r3, r2, r3
 8007108:	3308      	adds	r3, #8
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	4413      	add	r3, r2
 800710e:	3302      	adds	r3, #2
 8007110:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	795b      	ldrb	r3, [r3, #5]
 8007116:	78fa      	ldrb	r2, [r7, #3]
 8007118:	429a      	cmp	r2, r3
 800711a:	d002      	beq.n	8007122 <USBH_FindInterface+0x4e>
 800711c:	78fb      	ldrb	r3, [r7, #3]
 800711e:	2bff      	cmp	r3, #255	; 0xff
 8007120:	d111      	bne.n	8007146 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007126:	78ba      	ldrb	r2, [r7, #2]
 8007128:	429a      	cmp	r2, r3
 800712a:	d002      	beq.n	8007132 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800712c:	78bb      	ldrb	r3, [r7, #2]
 800712e:	2bff      	cmp	r3, #255	; 0xff
 8007130:	d109      	bne.n	8007146 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007136:	787a      	ldrb	r2, [r7, #1]
 8007138:	429a      	cmp	r2, r3
 800713a:	d002      	beq.n	8007142 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800713c:	787b      	ldrb	r3, [r7, #1]
 800713e:	2bff      	cmp	r3, #255	; 0xff
 8007140:	d101      	bne.n	8007146 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007142:	7dfb      	ldrb	r3, [r7, #23]
 8007144:	e006      	b.n	8007154 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007146:	7dfb      	ldrb	r3, [r7, #23]
 8007148:	3301      	adds	r3, #1
 800714a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800714c:	7dfb      	ldrb	r3, [r7, #23]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d9d6      	bls.n	8007100 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007152:	23ff      	movs	r3, #255	; 0xff
}
 8007154:	4618      	mov	r0, r3
 8007156:	371c      	adds	r7, #28
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f001 fc81 	bl	8008a70 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800716e:	2101      	movs	r1, #1
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f001 fd9a 	bl	8008caa <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b088      	sub	sp, #32
 8007184:	af04      	add	r7, sp, #16
 8007186:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007188:	2302      	movs	r3, #2
 800718a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800718c:	2300      	movs	r3, #0
 800718e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b01      	cmp	r3, #1
 800719a:	d102      	bne.n	80071a2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2203      	movs	r2, #3
 80071a0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	2b0b      	cmp	r3, #11
 80071aa:	f200 81be 	bhi.w	800752a <USBH_Process+0x3aa>
 80071ae:	a201      	add	r2, pc, #4	; (adr r2, 80071b4 <USBH_Process+0x34>)
 80071b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b4:	080071e5 	.word	0x080071e5
 80071b8:	08007217 	.word	0x08007217
 80071bc:	0800727f 	.word	0x0800727f
 80071c0:	080074c5 	.word	0x080074c5
 80071c4:	0800752b 	.word	0x0800752b
 80071c8:	08007323 	.word	0x08007323
 80071cc:	0800746b 	.word	0x0800746b
 80071d0:	08007359 	.word	0x08007359
 80071d4:	08007379 	.word	0x08007379
 80071d8:	08007399 	.word	0x08007399
 80071dc:	080073dd 	.word	0x080073dd
 80071e0:	080074ad 	.word	0x080074ad
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f000 819e 	beq.w	800752e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80071f8:	20c8      	movs	r0, #200	; 0xc8
 80071fa:	f001 fd9d 	bl	8008d38 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f001 fc93 	bl	8008b2a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007214:	e18b      	b.n	800752e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800721c:	2b01      	cmp	r3, #1
 800721e:	d107      	bne.n	8007230 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2202      	movs	r2, #2
 800722c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800722e:	e18d      	b.n	800754c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007236:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800723a:	d914      	bls.n	8007266 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007242:	3301      	adds	r3, #1
 8007244:	b2da      	uxtb	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007252:	2b03      	cmp	r3, #3
 8007254:	d903      	bls.n	800725e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	220d      	movs	r2, #13
 800725a:	701a      	strb	r2, [r3, #0]
      break;
 800725c:	e176      	b.n	800754c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	701a      	strb	r2, [r3, #0]
      break;
 8007264:	e172      	b.n	800754c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800726c:	f103 020a 	add.w	r2, r3, #10
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007276:	200a      	movs	r0, #10
 8007278:	f001 fd5e 	bl	8008d38 <USBH_Delay>
      break;
 800727c:	e166      	b.n	800754c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007284:	2b00      	cmp	r3, #0
 8007286:	d005      	beq.n	8007294 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800728e:	2104      	movs	r1, #4
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007294:	2064      	movs	r0, #100	; 0x64
 8007296:	f001 fd4f 	bl	8008d38 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f001 fc1e 	bl	8008adc <USBH_LL_GetSpeed>
 80072a0:	4603      	mov	r3, r0
 80072a2:	461a      	mov	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2205      	movs	r2, #5
 80072ae:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80072b0:	2100      	movs	r1, #0
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f001 fa29 	bl	800870a <USBH_AllocPipe>
 80072b8:	4603      	mov	r3, r0
 80072ba:	461a      	mov	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80072c0:	2180      	movs	r1, #128	; 0x80
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f001 fa21 	bl	800870a <USBH_AllocPipe>
 80072c8:	4603      	mov	r3, r0
 80072ca:	461a      	mov	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	7919      	ldrb	r1, [r3, #4]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80072e4:	b292      	uxth	r2, r2
 80072e6:	9202      	str	r2, [sp, #8]
 80072e8:	2200      	movs	r2, #0
 80072ea:	9201      	str	r2, [sp, #4]
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	4603      	mov	r3, r0
 80072f0:	2280      	movs	r2, #128	; 0x80
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f001 f9da 	bl	80086ac <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	7959      	ldrb	r1, [r3, #5]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800730c:	b292      	uxth	r2, r2
 800730e:	9202      	str	r2, [sp, #8]
 8007310:	2200      	movs	r2, #0
 8007312:	9201      	str	r2, [sp, #4]
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	4603      	mov	r3, r0
 8007318:	2200      	movs	r2, #0
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f001 f9c6 	bl	80086ac <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007320:	e114      	b.n	800754c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f918 	bl	8007558 <USBH_HandleEnum>
 8007328:	4603      	mov	r3, r0
 800732a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800732c:	7bbb      	ldrb	r3, [r7, #14]
 800732e:	b2db      	uxtb	r3, r3
 8007330:	2b00      	cmp	r3, #0
 8007332:	f040 80fe 	bne.w	8007532 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007344:	2b01      	cmp	r3, #1
 8007346:	d103      	bne.n	8007350 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2208      	movs	r2, #8
 800734c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800734e:	e0f0      	b.n	8007532 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2207      	movs	r2, #7
 8007354:	701a      	strb	r2, [r3, #0]
      break;
 8007356:	e0ec      	b.n	8007532 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800735e:	2b00      	cmp	r3, #0
 8007360:	f000 80e9 	beq.w	8007536 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800736a:	2101      	movs	r1, #1
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2208      	movs	r2, #8
 8007374:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007376:	e0de      	b.n	8007536 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800737e:	b29b      	uxth	r3, r3
 8007380:	4619      	mov	r1, r3
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fc2c 	bl	8007be0 <USBH_SetCfg>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	f040 80d5 	bne.w	800753a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2209      	movs	r2, #9
 8007394:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007396:	e0d0      	b.n	800753a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800739e:	f003 0320 	and.w	r3, r3, #32
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d016      	beq.n	80073d4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80073a6:	2101      	movs	r1, #1
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fc3c 	bl	8007c26 <USBH_SetFeature>
 80073ae:	4603      	mov	r3, r0
 80073b0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80073b2:	7bbb      	ldrb	r3, [r7, #14]
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d103      	bne.n	80073c2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	220a      	movs	r2, #10
 80073be:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073c0:	e0bd      	b.n	800753e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80073c2:	7bbb      	ldrb	r3, [r7, #14]
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b03      	cmp	r3, #3
 80073c8:	f040 80b9 	bne.w	800753e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	220a      	movs	r2, #10
 80073d0:	701a      	strb	r2, [r3, #0]
      break;
 80073d2:	e0b4      	b.n	800753e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	220a      	movs	r2, #10
 80073d8:	701a      	strb	r2, [r3, #0]
      break;
 80073da:	e0b0      	b.n	800753e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f000 80ad 	beq.w	8007542 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80073f0:	2300      	movs	r3, #0
 80073f2:	73fb      	strb	r3, [r7, #15]
 80073f4:	e016      	b.n	8007424 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80073f6:	7bfa      	ldrb	r2, [r7, #15]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	32de      	adds	r2, #222	; 0xde
 80073fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007400:	791a      	ldrb	r2, [r3, #4]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007408:	429a      	cmp	r2, r3
 800740a:	d108      	bne.n	800741e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800740c:	7bfa      	ldrb	r2, [r7, #15]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	32de      	adds	r2, #222	; 0xde
 8007412:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800741c:	e005      	b.n	800742a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800741e:	7bfb      	ldrb	r3, [r7, #15]
 8007420:	3301      	adds	r3, #1
 8007422:	73fb      	strb	r3, [r7, #15]
 8007424:	7bfb      	ldrb	r3, [r7, #15]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d0e5      	beq.n	80073f6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007430:	2b00      	cmp	r3, #0
 8007432:	d016      	beq.n	8007462 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	4798      	blx	r3
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d109      	bne.n	800745a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2206      	movs	r2, #6
 800744a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007452:	2103      	movs	r1, #3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007458:	e073      	b.n	8007542 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	220d      	movs	r2, #13
 800745e:	701a      	strb	r2, [r3, #0]
      break;
 8007460:	e06f      	b.n	8007542 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	220d      	movs	r2, #13
 8007466:	701a      	strb	r2, [r3, #0]
      break;
 8007468:	e06b      	b.n	8007542 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007470:	2b00      	cmp	r3, #0
 8007472:	d017      	beq.n	80074a4 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	4798      	blx	r3
 8007480:	4603      	mov	r3, r0
 8007482:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007484:	7bbb      	ldrb	r3, [r7, #14]
 8007486:	b2db      	uxtb	r3, r3
 8007488:	2b00      	cmp	r3, #0
 800748a:	d103      	bne.n	8007494 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	220b      	movs	r2, #11
 8007490:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007492:	e058      	b.n	8007546 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007494:	7bbb      	ldrb	r3, [r7, #14]
 8007496:	b2db      	uxtb	r3, r3
 8007498:	2b02      	cmp	r3, #2
 800749a:	d154      	bne.n	8007546 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	220d      	movs	r2, #13
 80074a0:	701a      	strb	r2, [r3, #0]
      break;
 80074a2:	e050      	b.n	8007546 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	220d      	movs	r2, #13
 80074a8:	701a      	strb	r2, [r3, #0]
      break;
 80074aa:	e04c      	b.n	8007546 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d049      	beq.n	800754a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	4798      	blx	r3
      }
      break;
 80074c2:	e042      	b.n	800754a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7ff fd67 	bl	8006fa0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d009      	beq.n	80074f0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d005      	beq.n	8007506 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007500:	2105      	movs	r1, #5
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800750c:	b2db      	uxtb	r3, r3
 800750e:	2b01      	cmp	r3, #1
 8007510:	d107      	bne.n	8007522 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f7ff fe20 	bl	8007160 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007520:	e014      	b.n	800754c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f001 faa4 	bl	8008a70 <USBH_LL_Start>
      break;
 8007528:	e010      	b.n	800754c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800752a:	bf00      	nop
 800752c:	e00e      	b.n	800754c <USBH_Process+0x3cc>
      break;
 800752e:	bf00      	nop
 8007530:	e00c      	b.n	800754c <USBH_Process+0x3cc>
      break;
 8007532:	bf00      	nop
 8007534:	e00a      	b.n	800754c <USBH_Process+0x3cc>
    break;
 8007536:	bf00      	nop
 8007538:	e008      	b.n	800754c <USBH_Process+0x3cc>
      break;
 800753a:	bf00      	nop
 800753c:	e006      	b.n	800754c <USBH_Process+0x3cc>
      break;
 800753e:	bf00      	nop
 8007540:	e004      	b.n	800754c <USBH_Process+0x3cc>
      break;
 8007542:	bf00      	nop
 8007544:	e002      	b.n	800754c <USBH_Process+0x3cc>
      break;
 8007546:	bf00      	nop
 8007548:	e000      	b.n	800754c <USBH_Process+0x3cc>
      break;
 800754a:	bf00      	nop
  }
  return USBH_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop

08007558 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b088      	sub	sp, #32
 800755c:	af04      	add	r7, sp, #16
 800755e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007560:	2301      	movs	r3, #1
 8007562:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007564:	2301      	movs	r3, #1
 8007566:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	785b      	ldrb	r3, [r3, #1]
 800756c:	2b07      	cmp	r3, #7
 800756e:	f200 81c1 	bhi.w	80078f4 <USBH_HandleEnum+0x39c>
 8007572:	a201      	add	r2, pc, #4	; (adr r2, 8007578 <USBH_HandleEnum+0x20>)
 8007574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007578:	08007599 	.word	0x08007599
 800757c:	08007657 	.word	0x08007657
 8007580:	080076c1 	.word	0x080076c1
 8007584:	0800774f 	.word	0x0800774f
 8007588:	080077b9 	.word	0x080077b9
 800758c:	08007829 	.word	0x08007829
 8007590:	0800786f 	.word	0x0800786f
 8007594:	080078b5 	.word	0x080078b5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007598:	2108      	movs	r1, #8
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 fa50 	bl	8007a40 <USBH_Get_DevDesc>
 80075a0:	4603      	mov	r3, r0
 80075a2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075a4:	7bbb      	ldrb	r3, [r7, #14]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d130      	bne.n	800760c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	7919      	ldrb	r1, [r3, #4]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80075ce:	b292      	uxth	r2, r2
 80075d0:	9202      	str	r2, [sp, #8]
 80075d2:	2200      	movs	r2, #0
 80075d4:	9201      	str	r2, [sp, #4]
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	4603      	mov	r3, r0
 80075da:	2280      	movs	r2, #128	; 0x80
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f001 f865 	bl	80086ac <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	7959      	ldrb	r1, [r3, #5]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80075f6:	b292      	uxth	r2, r2
 80075f8:	9202      	str	r2, [sp, #8]
 80075fa:	2200      	movs	r2, #0
 80075fc:	9201      	str	r2, [sp, #4]
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	4603      	mov	r3, r0
 8007602:	2200      	movs	r2, #0
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f001 f851 	bl	80086ac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800760a:	e175      	b.n	80078f8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800760c:	7bbb      	ldrb	r3, [r7, #14]
 800760e:	2b03      	cmp	r3, #3
 8007610:	f040 8172 	bne.w	80078f8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800761a:	3301      	adds	r3, #1
 800761c:	b2da      	uxtb	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800762a:	2b03      	cmp	r3, #3
 800762c:	d903      	bls.n	8007636 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	220d      	movs	r2, #13
 8007632:	701a      	strb	r2, [r3, #0]
      break;
 8007634:	e160      	b.n	80078f8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	795b      	ldrb	r3, [r3, #5]
 800763a:	4619      	mov	r1, r3
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f001 f885 	bl	800874c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	791b      	ldrb	r3, [r3, #4]
 8007646:	4619      	mov	r1, r3
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f001 f87f 	bl	800874c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	701a      	strb	r2, [r3, #0]
      break;
 8007654:	e150      	b.n	80078f8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007656:	2112      	movs	r1, #18
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 f9f1 	bl	8007a40 <USBH_Get_DevDesc>
 800765e:	4603      	mov	r3, r0
 8007660:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007662:	7bbb      	ldrb	r3, [r7, #14]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d103      	bne.n	8007670 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2202      	movs	r2, #2
 800766c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800766e:	e145      	b.n	80078fc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007670:	7bbb      	ldrb	r3, [r7, #14]
 8007672:	2b03      	cmp	r3, #3
 8007674:	f040 8142 	bne.w	80078fc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800767e:	3301      	adds	r3, #1
 8007680:	b2da      	uxtb	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800768e:	2b03      	cmp	r3, #3
 8007690:	d903      	bls.n	800769a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	220d      	movs	r2, #13
 8007696:	701a      	strb	r2, [r3, #0]
      break;
 8007698:	e130      	b.n	80078fc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	795b      	ldrb	r3, [r3, #5]
 800769e:	4619      	mov	r1, r3
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f001 f853 	bl	800874c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	791b      	ldrb	r3, [r3, #4]
 80076aa:	4619      	mov	r1, r3
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f001 f84d 	bl	800874c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	701a      	strb	r2, [r3, #0]
      break;
 80076be:	e11d      	b.n	80078fc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80076c0:	2101      	movs	r1, #1
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 fa68 	bl	8007b98 <USBH_SetAddress>
 80076c8:	4603      	mov	r3, r0
 80076ca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076cc:	7bbb      	ldrb	r3, [r7, #14]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d132      	bne.n	8007738 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80076d2:	2002      	movs	r0, #2
 80076d4:	f001 fb30 	bl	8008d38 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2203      	movs	r2, #3
 80076e4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	7919      	ldrb	r1, [r3, #4]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80076fa:	b292      	uxth	r2, r2
 80076fc:	9202      	str	r2, [sp, #8]
 80076fe:	2200      	movs	r2, #0
 8007700:	9201      	str	r2, [sp, #4]
 8007702:	9300      	str	r3, [sp, #0]
 8007704:	4603      	mov	r3, r0
 8007706:	2280      	movs	r2, #128	; 0x80
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 ffcf 	bl	80086ac <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	7959      	ldrb	r1, [r3, #5]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007722:	b292      	uxth	r2, r2
 8007724:	9202      	str	r2, [sp, #8]
 8007726:	2200      	movs	r2, #0
 8007728:	9201      	str	r2, [sp, #4]
 800772a:	9300      	str	r3, [sp, #0]
 800772c:	4603      	mov	r3, r0
 800772e:	2200      	movs	r2, #0
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 ffbb 	bl	80086ac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007736:	e0e3      	b.n	8007900 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007738:	7bbb      	ldrb	r3, [r7, #14]
 800773a:	2b03      	cmp	r3, #3
 800773c:	f040 80e0 	bne.w	8007900 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	220d      	movs	r2, #13
 8007744:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	705a      	strb	r2, [r3, #1]
      break;
 800774c:	e0d8      	b.n	8007900 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800774e:	2109      	movs	r1, #9
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 f99d 	bl	8007a90 <USBH_Get_CfgDesc>
 8007756:	4603      	mov	r3, r0
 8007758:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800775a:	7bbb      	ldrb	r3, [r7, #14]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d103      	bne.n	8007768 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2204      	movs	r2, #4
 8007764:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007766:	e0cd      	b.n	8007904 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007768:	7bbb      	ldrb	r3, [r7, #14]
 800776a:	2b03      	cmp	r3, #3
 800776c:	f040 80ca 	bne.w	8007904 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007776:	3301      	adds	r3, #1
 8007778:	b2da      	uxtb	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007786:	2b03      	cmp	r3, #3
 8007788:	d903      	bls.n	8007792 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	220d      	movs	r2, #13
 800778e:	701a      	strb	r2, [r3, #0]
      break;
 8007790:	e0b8      	b.n	8007904 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	795b      	ldrb	r3, [r3, #5]
 8007796:	4619      	mov	r1, r3
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 ffd7 	bl	800874c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	791b      	ldrb	r3, [r3, #4]
 80077a2:	4619      	mov	r1, r3
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 ffd1 	bl	800874c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	701a      	strb	r2, [r3, #0]
      break;
 80077b6:	e0a5      	b.n	8007904 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80077be:	4619      	mov	r1, r3
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 f965 	bl	8007a90 <USBH_Get_CfgDesc>
 80077c6:	4603      	mov	r3, r0
 80077c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077ca:	7bbb      	ldrb	r3, [r7, #14]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d103      	bne.n	80077d8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2205      	movs	r2, #5
 80077d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80077d6:	e097      	b.n	8007908 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077d8:	7bbb      	ldrb	r3, [r7, #14]
 80077da:	2b03      	cmp	r3, #3
 80077dc:	f040 8094 	bne.w	8007908 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077e6:	3301      	adds	r3, #1
 80077e8:	b2da      	uxtb	r2, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077f6:	2b03      	cmp	r3, #3
 80077f8:	d903      	bls.n	8007802 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	220d      	movs	r2, #13
 80077fe:	701a      	strb	r2, [r3, #0]
      break;
 8007800:	e082      	b.n	8007908 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	795b      	ldrb	r3, [r3, #5]
 8007806:	4619      	mov	r1, r3
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 ff9f 	bl	800874c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	791b      	ldrb	r3, [r3, #4]
 8007812:	4619      	mov	r1, r3
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 ff99 	bl	800874c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	701a      	strb	r2, [r3, #0]
      break;
 8007826:	e06f      	b.n	8007908 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800782e:	2b00      	cmp	r3, #0
 8007830:	d019      	beq.n	8007866 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800783e:	23ff      	movs	r3, #255	; 0xff
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f949 	bl	8007ad8 <USBH_Get_StringDesc>
 8007846:	4603      	mov	r3, r0
 8007848:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800784a:	7bbb      	ldrb	r3, [r7, #14]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d103      	bne.n	8007858 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2206      	movs	r2, #6
 8007854:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007856:	e059      	b.n	800790c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007858:	7bbb      	ldrb	r3, [r7, #14]
 800785a:	2b03      	cmp	r3, #3
 800785c:	d156      	bne.n	800790c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2206      	movs	r2, #6
 8007862:	705a      	strb	r2, [r3, #1]
      break;
 8007864:	e052      	b.n	800790c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2206      	movs	r2, #6
 800786a:	705a      	strb	r2, [r3, #1]
      break;
 800786c:	e04e      	b.n	800790c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007874:	2b00      	cmp	r3, #0
 8007876:	d019      	beq.n	80078ac <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007884:	23ff      	movs	r3, #255	; 0xff
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 f926 	bl	8007ad8 <USBH_Get_StringDesc>
 800788c:	4603      	mov	r3, r0
 800788e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007890:	7bbb      	ldrb	r3, [r7, #14]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d103      	bne.n	800789e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2207      	movs	r2, #7
 800789a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800789c:	e038      	b.n	8007910 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800789e:	7bbb      	ldrb	r3, [r7, #14]
 80078a0:	2b03      	cmp	r3, #3
 80078a2:	d135      	bne.n	8007910 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2207      	movs	r2, #7
 80078a8:	705a      	strb	r2, [r3, #1]
      break;
 80078aa:	e031      	b.n	8007910 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2207      	movs	r2, #7
 80078b0:	705a      	strb	r2, [r3, #1]
      break;
 80078b2:	e02d      	b.n	8007910 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d017      	beq.n	80078ee <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80078ca:	23ff      	movs	r3, #255	; 0xff
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f903 	bl	8007ad8 <USBH_Get_StringDesc>
 80078d2:	4603      	mov	r3, r0
 80078d4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078d6:	7bbb      	ldrb	r3, [r7, #14]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d102      	bne.n	80078e2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80078dc:	2300      	movs	r3, #0
 80078de:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80078e0:	e018      	b.n	8007914 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078e2:	7bbb      	ldrb	r3, [r7, #14]
 80078e4:	2b03      	cmp	r3, #3
 80078e6:	d115      	bne.n	8007914 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80078e8:	2300      	movs	r3, #0
 80078ea:	73fb      	strb	r3, [r7, #15]
      break;
 80078ec:	e012      	b.n	8007914 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80078ee:	2300      	movs	r3, #0
 80078f0:	73fb      	strb	r3, [r7, #15]
      break;
 80078f2:	e00f      	b.n	8007914 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80078f4:	bf00      	nop
 80078f6:	e00e      	b.n	8007916 <USBH_HandleEnum+0x3be>
      break;
 80078f8:	bf00      	nop
 80078fa:	e00c      	b.n	8007916 <USBH_HandleEnum+0x3be>
      break;
 80078fc:	bf00      	nop
 80078fe:	e00a      	b.n	8007916 <USBH_HandleEnum+0x3be>
      break;
 8007900:	bf00      	nop
 8007902:	e008      	b.n	8007916 <USBH_HandleEnum+0x3be>
      break;
 8007904:	bf00      	nop
 8007906:	e006      	b.n	8007916 <USBH_HandleEnum+0x3be>
      break;
 8007908:	bf00      	nop
 800790a:	e004      	b.n	8007916 <USBH_HandleEnum+0x3be>
      break;
 800790c:	bf00      	nop
 800790e:	e002      	b.n	8007916 <USBH_HandleEnum+0x3be>
      break;
 8007910:	bf00      	nop
 8007912:	e000      	b.n	8007916 <USBH_HandleEnum+0x3be>
      break;
 8007914:	bf00      	nop
  }
  return Status;
 8007916:	7bfb      	ldrb	r3, [r7, #15]
}
 8007918:	4618      	mov	r0, r3
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	683a      	ldr	r2, [r7, #0]
 800792e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007932:	bf00      	nop
 8007934:	370c      	adds	r7, #12
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b082      	sub	sp, #8
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800794c:	1c5a      	adds	r2, r3, #1
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 f804 	bl	8007962 <USBH_HandleSof>
}
 800795a:	bf00      	nop
 800795c:	3708      	adds	r7, #8
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}

08007962 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b082      	sub	sp, #8
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	b2db      	uxtb	r3, r3
 8007970:	2b0b      	cmp	r3, #11
 8007972:	d10a      	bne.n	800798a <USBH_HandleSof+0x28>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800797a:	2b00      	cmp	r3, #0
 800797c:	d005      	beq.n	800798a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007984:	699b      	ldr	r3, [r3, #24]
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	4798      	blx	r3
  }
}
 800798a:	bf00      	nop
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007992:	b480      	push	{r7}
 8007994:	b083      	sub	sp, #12
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2201      	movs	r2, #1
 800799e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80079a2:	bf00      	nop
}
 80079a4:	370c      	adds	r7, #12
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80079ae:	b480      	push	{r7}
 80079b0:	b083      	sub	sp, #12
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80079be:	bf00      	nop
}
 80079c0:	370c      	adds	r7, #12
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b083      	sub	sp, #12
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f001 f844 	bl	8008aa6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	791b      	ldrb	r3, [r3, #4]
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fe91 	bl	800874c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	795b      	ldrb	r3, [r3, #5]
 8007a2e:	4619      	mov	r1, r3
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fe8b 	bl	800874c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af02      	add	r7, sp, #8
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	460b      	mov	r3, r1
 8007a4a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007a52:	78fb      	ldrb	r3, [r7, #3]
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	4613      	mov	r3, r2
 8007a5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a5e:	2100      	movs	r1, #0
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 f864 	bl	8007b2e <USBH_GetDescriptor>
 8007a66:	4603      	mov	r3, r0
 8007a68:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007a6a:	7bfb      	ldrb	r3, [r7, #15]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d10a      	bne.n	8007a86 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007a7c:	78fa      	ldrb	r2, [r7, #3]
 8007a7e:	b292      	uxth	r2, r2
 8007a80:	4619      	mov	r1, r3
 8007a82:	f000 f918 	bl	8007cb6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3710      	adds	r7, #16
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af02      	add	r7, sp, #8
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	460b      	mov	r3, r1
 8007a9a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	331c      	adds	r3, #28
 8007aa0:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007aa2:	887b      	ldrh	r3, [r7, #2]
 8007aa4:	9300      	str	r3, [sp, #0]
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007aac:	2100      	movs	r1, #0
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 f83d 	bl	8007b2e <USBH_GetDescriptor>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007ab8:	7bfb      	ldrb	r3, [r7, #15]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d107      	bne.n	8007ace <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007abe:	887b      	ldrh	r3, [r7, #2]
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	68b9      	ldr	r1, [r7, #8]
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 f987 	bl	8007dd8 <USBH_ParseCfgDesc>
 8007aca:	4603      	mov	r3, r0
 8007acc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b088      	sub	sp, #32
 8007adc:	af02      	add	r7, sp, #8
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	607a      	str	r2, [r7, #4]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	72fb      	strb	r3, [r7, #11]
 8007ae8:	4613      	mov	r3, r2
 8007aea:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007aec:	7afb      	ldrb	r3, [r7, #11]
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007af4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007afc:	893b      	ldrh	r3, [r7, #8]
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	460b      	mov	r3, r1
 8007b02:	2100      	movs	r1, #0
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f000 f812 	bl	8007b2e <USBH_GetDescriptor>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007b0e:	7dfb      	ldrb	r3, [r7, #23]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d107      	bne.n	8007b24 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007b1a:	893a      	ldrh	r2, [r7, #8]
 8007b1c:	6879      	ldr	r1, [r7, #4]
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f000 fb24 	bl	800816c <USBH_ParseStringDesc>
  }

  return status;
 8007b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3718      	adds	r7, #24
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b084      	sub	sp, #16
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	60f8      	str	r0, [r7, #12]
 8007b36:	607b      	str	r3, [r7, #4]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	72fb      	strb	r3, [r7, #11]
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	789b      	ldrb	r3, [r3, #2]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d11c      	bne.n	8007b82 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007b48:	7afb      	ldrb	r3, [r7, #11]
 8007b4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b4e:	b2da      	uxtb	r2, r3
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2206      	movs	r2, #6
 8007b58:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	893a      	ldrh	r2, [r7, #8]
 8007b5e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007b60:	893b      	ldrh	r3, [r7, #8]
 8007b62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007b66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b6a:	d104      	bne.n	8007b76 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f240 4209 	movw	r2, #1033	; 0x409
 8007b72:	829a      	strh	r2, [r3, #20]
 8007b74:	e002      	b.n	8007b7c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	8b3a      	ldrh	r2, [r7, #24]
 8007b80:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007b82:	8b3b      	ldrh	r3, [r7, #24]
 8007b84:	461a      	mov	r2, r3
 8007b86:	6879      	ldr	r1, [r7, #4]
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f000 fb3d 	bl	8008208 <USBH_CtlReq>
 8007b8e:	4603      	mov	r3, r0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	789b      	ldrb	r3, [r3, #2]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d10f      	bne.n	8007bcc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2205      	movs	r2, #5
 8007bb6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007bb8:	78fb      	ldrb	r3, [r7, #3]
 8007bba:	b29a      	uxth	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007bcc:	2200      	movs	r2, #0
 8007bce:	2100      	movs	r1, #0
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 fb19 	bl	8008208 <USBH_CtlReq>
 8007bd6:	4603      	mov	r3, r0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3708      	adds	r7, #8
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	460b      	mov	r3, r1
 8007bea:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	789b      	ldrb	r3, [r3, #2]
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d10e      	bne.n	8007c12 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2209      	movs	r2, #9
 8007bfe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	887a      	ldrh	r2, [r7, #2]
 8007c04:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c12:	2200      	movs	r2, #0
 8007c14:	2100      	movs	r1, #0
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 faf6 	bl	8008208 <USBH_CtlReq>
 8007c1c:	4603      	mov	r3, r0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b082      	sub	sp, #8
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
 8007c2e:	460b      	mov	r3, r1
 8007c30:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	789b      	ldrb	r3, [r3, #2]
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d10f      	bne.n	8007c5a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2203      	movs	r2, #3
 8007c44:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007c46:	78fb      	ldrb	r3, [r7, #3]
 8007c48:	b29a      	uxth	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	2100      	movs	r1, #0
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 fad2 	bl	8008208 <USBH_CtlReq>
 8007c64:	4603      	mov	r3, r0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b082      	sub	sp, #8
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
 8007c76:	460b      	mov	r3, r1
 8007c78:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	789b      	ldrb	r3, [r3, #2]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d10f      	bne.n	8007ca2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2202      	movs	r2, #2
 8007c86:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007c94:	78fb      	ldrb	r3, [r7, #3]
 8007c96:	b29a      	uxth	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 faae 	bl	8008208 <USBH_CtlReq>
 8007cac:	4603      	mov	r3, r0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3708      	adds	r7, #8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b085      	sub	sp, #20
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	60f8      	str	r0, [r7, #12]
 8007cbe:	60b9      	str	r1, [r7, #8]
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	781a      	ldrb	r2, [r3, #0]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	785a      	ldrb	r2, [r3, #1]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	3302      	adds	r3, #2
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	3303      	adds	r3, #3
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	021b      	lsls	r3, r3, #8
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	791a      	ldrb	r2, [r3, #4]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	795a      	ldrb	r2, [r3, #5]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	799a      	ldrb	r2, [r3, #6]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	79da      	ldrb	r2, [r3, #7]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	79db      	ldrb	r3, [r3, #7]
 8007d14:	2b20      	cmp	r3, #32
 8007d16:	dc11      	bgt.n	8007d3c <USBH_ParseDevDesc+0x86>
 8007d18:	2b08      	cmp	r3, #8
 8007d1a:	db16      	blt.n	8007d4a <USBH_ParseDevDesc+0x94>
 8007d1c:	3b08      	subs	r3, #8
 8007d1e:	2201      	movs	r2, #1
 8007d20:	fa02 f303 	lsl.w	r3, r2, r3
 8007d24:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	bf14      	ite	ne
 8007d30:	2301      	movne	r3, #1
 8007d32:	2300      	moveq	r3, #0
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d102      	bne.n	8007d40 <USBH_ParseDevDesc+0x8a>
 8007d3a:	e006      	b.n	8007d4a <USBH_ParseDevDesc+0x94>
 8007d3c:	2b40      	cmp	r3, #64	; 0x40
 8007d3e:	d104      	bne.n	8007d4a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	79da      	ldrb	r2, [r3, #7]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	71da      	strb	r2, [r3, #7]
      break;
 8007d48:	e003      	b.n	8007d52 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2240      	movs	r2, #64	; 0x40
 8007d4e:	71da      	strb	r2, [r3, #7]
      break;
 8007d50:	bf00      	nop
  }

  if (length > 8U)
 8007d52:	88fb      	ldrh	r3, [r7, #6]
 8007d54:	2b08      	cmp	r3, #8
 8007d56:	d939      	bls.n	8007dcc <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	3308      	adds	r3, #8
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	3309      	adds	r3, #9
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	021b      	lsls	r3, r3, #8
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	330a      	adds	r3, #10
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	330b      	adds	r3, #11
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	021b      	lsls	r3, r3, #8
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	b29a      	uxth	r2, r3
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	330c      	adds	r3, #12
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	b29a      	uxth	r2, r3
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	330d      	adds	r3, #13
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	021b      	lsls	r3, r3, #8
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	4313      	orrs	r3, r2
 8007da6:	b29a      	uxth	r2, r3
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	7b9a      	ldrb	r2, [r3, #14]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	7bda      	ldrb	r2, [r3, #15]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	7c1a      	ldrb	r2, [r3, #16]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	7c5a      	ldrb	r2, [r3, #17]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	745a      	strb	r2, [r3, #17]
  }
}
 8007dcc:	bf00      	nop
 8007dce:	3714      	adds	r7, #20
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b08c      	sub	sp, #48	; 0x30
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	4613      	mov	r3, r2
 8007de4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007dec:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007dee:	2300      	movs	r3, #0
 8007df0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	781a      	ldrb	r2, [r3, #0]
 8007e0c:	6a3b      	ldr	r3, [r7, #32]
 8007e0e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	785a      	ldrb	r2, [r3, #1]
 8007e14:	6a3b      	ldr	r3, [r7, #32]
 8007e16:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	3302      	adds	r3, #2
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	3303      	adds	r3, #3
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	021b      	lsls	r3, r3, #8
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e34:	bf28      	it	cs
 8007e36:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007e3a:	b29a      	uxth	r2, r3
 8007e3c:	6a3b      	ldr	r3, [r7, #32]
 8007e3e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	791a      	ldrb	r2, [r3, #4]
 8007e44:	6a3b      	ldr	r3, [r7, #32]
 8007e46:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	795a      	ldrb	r2, [r3, #5]
 8007e4c:	6a3b      	ldr	r3, [r7, #32]
 8007e4e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	799a      	ldrb	r2, [r3, #6]
 8007e54:	6a3b      	ldr	r3, [r7, #32]
 8007e56:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	79da      	ldrb	r2, [r3, #7]
 8007e5c:	6a3b      	ldr	r3, [r7, #32]
 8007e5e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	7a1a      	ldrb	r2, [r3, #8]
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007e68:	6a3b      	ldr	r3, [r7, #32]
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	2b09      	cmp	r3, #9
 8007e6e:	d002      	beq.n	8007e76 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007e70:	6a3b      	ldr	r3, [r7, #32]
 8007e72:	2209      	movs	r2, #9
 8007e74:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007e76:	88fb      	ldrh	r3, [r7, #6]
 8007e78:	2b09      	cmp	r3, #9
 8007e7a:	f240 809d 	bls.w	8007fb8 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007e7e:	2309      	movs	r3, #9
 8007e80:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007e82:	2300      	movs	r3, #0
 8007e84:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007e86:	e081      	b.n	8007f8c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007e88:	f107 0316 	add.w	r3, r7, #22
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e90:	f000 f99f 	bl	80081d2 <USBH_GetNextDesc>
 8007e94:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e98:	785b      	ldrb	r3, [r3, #1]
 8007e9a:	2b04      	cmp	r3, #4
 8007e9c:	d176      	bne.n	8007f8c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	2b09      	cmp	r3, #9
 8007ea4:	d002      	beq.n	8007eac <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea8:	2209      	movs	r2, #9
 8007eaa:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007eb0:	221a      	movs	r2, #26
 8007eb2:	fb02 f303 	mul.w	r3, r2, r3
 8007eb6:	3308      	adds	r3, #8
 8007eb8:	6a3a      	ldr	r2, [r7, #32]
 8007eba:	4413      	add	r3, r2
 8007ebc:	3302      	adds	r3, #2
 8007ebe:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007ec0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ec2:	69f8      	ldr	r0, [r7, #28]
 8007ec4:	f000 f87e 	bl	8007fc4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007ed2:	e043      	b.n	8007f5c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007ed4:	f107 0316 	add.w	r3, r7, #22
 8007ed8:	4619      	mov	r1, r3
 8007eda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007edc:	f000 f979 	bl	80081d2 <USBH_GetNextDesc>
 8007ee0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee4:	785b      	ldrb	r3, [r3, #1]
 8007ee6:	2b05      	cmp	r3, #5
 8007ee8:	d138      	bne.n	8007f5c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	795b      	ldrb	r3, [r3, #5]
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d10f      	bne.n	8007f12 <USBH_ParseCfgDesc+0x13a>
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	799b      	ldrb	r3, [r3, #6]
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d10b      	bne.n	8007f12 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	79db      	ldrb	r3, [r3, #7]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d10f      	bne.n	8007f22 <USBH_ParseCfgDesc+0x14a>
 8007f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	2b09      	cmp	r3, #9
 8007f08:	d00b      	beq.n	8007f22 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0c:	2209      	movs	r2, #9
 8007f0e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007f10:	e007      	b.n	8007f22 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	2b07      	cmp	r3, #7
 8007f18:	d004      	beq.n	8007f24 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1c:	2207      	movs	r2, #7
 8007f1e:	701a      	strb	r2, [r3, #0]
 8007f20:	e000      	b.n	8007f24 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007f22:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007f24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f28:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007f2c:	3201      	adds	r2, #1
 8007f2e:	00d2      	lsls	r2, r2, #3
 8007f30:	211a      	movs	r1, #26
 8007f32:	fb01 f303 	mul.w	r3, r1, r3
 8007f36:	4413      	add	r3, r2
 8007f38:	3308      	adds	r3, #8
 8007f3a:	6a3a      	ldr	r2, [r7, #32]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	3304      	adds	r3, #4
 8007f40:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007f42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f44:	69b9      	ldr	r1, [r7, #24]
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f000 f86b 	bl	8008022 <USBH_ParseEPDesc>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007f52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007f56:	3301      	adds	r3, #1
 8007f58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	791b      	ldrb	r3, [r3, #4]
 8007f60:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d204      	bcs.n	8007f72 <USBH_ParseCfgDesc+0x19a>
 8007f68:	6a3b      	ldr	r3, [r7, #32]
 8007f6a:	885a      	ldrh	r2, [r3, #2]
 8007f6c:	8afb      	ldrh	r3, [r7, #22]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d8b0      	bhi.n	8007ed4 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	791b      	ldrb	r3, [r3, #4]
 8007f76:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d201      	bcs.n	8007f82 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	e01c      	b.n	8007fbc <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007f82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f86:	3301      	adds	r3, #1
 8007f88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007f8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d805      	bhi.n	8007fa0 <USBH_ParseCfgDesc+0x1c8>
 8007f94:	6a3b      	ldr	r3, [r7, #32]
 8007f96:	885a      	ldrh	r2, [r3, #2]
 8007f98:	8afb      	ldrh	r3, [r7, #22]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	f63f af74 	bhi.w	8007e88 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007fa0:	6a3b      	ldr	r3, [r7, #32]
 8007fa2:	791b      	ldrb	r3, [r3, #4]
 8007fa4:	2b02      	cmp	r3, #2
 8007fa6:	bf28      	it	cs
 8007fa8:	2302      	movcs	r3, #2
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d201      	bcs.n	8007fb8 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007fb4:	2303      	movs	r3, #3
 8007fb6:	e001      	b.n	8007fbc <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007fb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3730      	adds	r7, #48	; 0x30
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	781a      	ldrb	r2, [r3, #0]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	785a      	ldrb	r2, [r3, #1]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	789a      	ldrb	r2, [r3, #2]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	78da      	ldrb	r2, [r3, #3]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	791a      	ldrb	r2, [r3, #4]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	795a      	ldrb	r2, [r3, #5]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	799a      	ldrb	r2, [r3, #6]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	79da      	ldrb	r2, [r3, #7]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	7a1a      	ldrb	r2, [r3, #8]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	721a      	strb	r2, [r3, #8]
}
 8008016:	bf00      	nop
 8008018:	370c      	adds	r7, #12
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr

08008022 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008022:	b480      	push	{r7}
 8008024:	b087      	sub	sp, #28
 8008026:	af00      	add	r7, sp, #0
 8008028:	60f8      	str	r0, [r7, #12]
 800802a:	60b9      	str	r1, [r7, #8]
 800802c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800802e:	2300      	movs	r3, #0
 8008030:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	781a      	ldrb	r2, [r3, #0]
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	785a      	ldrb	r2, [r3, #1]
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	789a      	ldrb	r2, [r3, #2]
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	78da      	ldrb	r2, [r3, #3]
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	3304      	adds	r3, #4
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	b29a      	uxth	r2, r3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	3305      	adds	r3, #5
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	b29b      	uxth	r3, r3
 8008062:	021b      	lsls	r3, r3, #8
 8008064:	b29b      	uxth	r3, r3
 8008066:	4313      	orrs	r3, r2
 8008068:	b29a      	uxth	r2, r3
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	799a      	ldrb	r2, [r3, #6]
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	889b      	ldrh	r3, [r3, #4]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d102      	bne.n	8008084 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800807e:	2303      	movs	r3, #3
 8008080:	75fb      	strb	r3, [r7, #23]
 8008082:	e033      	b.n	80080ec <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	889b      	ldrh	r3, [r3, #4]
 8008088:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800808c:	f023 0307 	bic.w	r3, r3, #7
 8008090:	b29a      	uxth	r2, r3
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	889b      	ldrh	r3, [r3, #4]
 800809a:	b21a      	sxth	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	3304      	adds	r3, #4
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	b299      	uxth	r1, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	3305      	adds	r3, #5
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	021b      	lsls	r3, r3, #8
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	430b      	orrs	r3, r1
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d110      	bne.n	80080de <USBH_ParseEPDesc+0xbc>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	3304      	adds	r3, #4
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	b299      	uxth	r1, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	3305      	adds	r3, #5
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	021b      	lsls	r3, r3, #8
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	430b      	orrs	r3, r1
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	b21b      	sxth	r3, r3
 80080d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080da:	b21b      	sxth	r3, r3
 80080dc:	e001      	b.n	80080e2 <USBH_ParseEPDesc+0xc0>
 80080de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080e2:	4313      	orrs	r3, r2
 80080e4:	b21b      	sxth	r3, r3
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d116      	bne.n	8008124 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	78db      	ldrb	r3, [r3, #3]
 80080fa:	f003 0303 	and.w	r3, r3, #3
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d005      	beq.n	800810e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	78db      	ldrb	r3, [r3, #3]
 8008106:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800810a:	2b03      	cmp	r3, #3
 800810c:	d127      	bne.n	800815e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	799b      	ldrb	r3, [r3, #6]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d003      	beq.n	800811e <USBH_ParseEPDesc+0xfc>
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	799b      	ldrb	r3, [r3, #6]
 800811a:	2b10      	cmp	r3, #16
 800811c:	d91f      	bls.n	800815e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800811e:	2303      	movs	r3, #3
 8008120:	75fb      	strb	r3, [r7, #23]
 8008122:	e01c      	b.n	800815e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	78db      	ldrb	r3, [r3, #3]
 8008128:	f003 0303 	and.w	r3, r3, #3
 800812c:	2b01      	cmp	r3, #1
 800812e:	d10a      	bne.n	8008146 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	799b      	ldrb	r3, [r3, #6]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d003      	beq.n	8008140 <USBH_ParseEPDesc+0x11e>
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	799b      	ldrb	r3, [r3, #6]
 800813c:	2b10      	cmp	r3, #16
 800813e:	d90e      	bls.n	800815e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008140:	2303      	movs	r3, #3
 8008142:	75fb      	strb	r3, [r7, #23]
 8008144:	e00b      	b.n	800815e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	78db      	ldrb	r3, [r3, #3]
 800814a:	f003 0303 	and.w	r3, r3, #3
 800814e:	2b03      	cmp	r3, #3
 8008150:	d105      	bne.n	800815e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	799b      	ldrb	r3, [r3, #6]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d101      	bne.n	800815e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800815a:	2303      	movs	r3, #3
 800815c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800815e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008160:	4618      	mov	r0, r3
 8008162:	371c      	adds	r7, #28
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800816c:	b480      	push	{r7}
 800816e:	b087      	sub	sp, #28
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	4613      	mov	r3, r2
 8008178:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	3301      	adds	r3, #1
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	2b03      	cmp	r3, #3
 8008182:	d120      	bne.n	80081c6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	1e9a      	subs	r2, r3, #2
 800818a:	88fb      	ldrh	r3, [r7, #6]
 800818c:	4293      	cmp	r3, r2
 800818e:	bf28      	it	cs
 8008190:	4613      	movcs	r3, r2
 8008192:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	3302      	adds	r3, #2
 8008198:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800819a:	2300      	movs	r3, #0
 800819c:	82fb      	strh	r3, [r7, #22]
 800819e:	e00b      	b.n	80081b8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80081a0:	8afb      	ldrh	r3, [r7, #22]
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	4413      	add	r3, r2
 80081a6:	781a      	ldrb	r2, [r3, #0]
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	701a      	strb	r2, [r3, #0]
      pdest++;
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	3301      	adds	r3, #1
 80081b0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80081b2:	8afb      	ldrh	r3, [r7, #22]
 80081b4:	3302      	adds	r3, #2
 80081b6:	82fb      	strh	r3, [r7, #22]
 80081b8:	8afa      	ldrh	r2, [r7, #22]
 80081ba:	8abb      	ldrh	r3, [r7, #20]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d3ef      	bcc.n	80081a0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	2200      	movs	r2, #0
 80081c4:	701a      	strb	r2, [r3, #0]
  }
}
 80081c6:	bf00      	nop
 80081c8:	371c      	adds	r7, #28
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr

080081d2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80081d2:	b480      	push	{r7}
 80081d4:	b085      	sub	sp, #20
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
 80081da:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	881a      	ldrh	r2, [r3, #0]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	4413      	add	r3, r2
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4413      	add	r3, r2
 80081f8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80081fa:	68fb      	ldr	r3, [r7, #12]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3714      	adds	r7, #20
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b086      	sub	sp, #24
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	4613      	mov	r3, r2
 8008214:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008216:	2301      	movs	r3, #1
 8008218:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	789b      	ldrb	r3, [r3, #2]
 800821e:	2b01      	cmp	r3, #1
 8008220:	d002      	beq.n	8008228 <USBH_CtlReq+0x20>
 8008222:	2b02      	cmp	r3, #2
 8008224:	d00f      	beq.n	8008246 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008226:	e027      	b.n	8008278 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	68ba      	ldr	r2, [r7, #8]
 800822c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	88fa      	ldrh	r2, [r7, #6]
 8008232:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2201      	movs	r2, #1
 8008238:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2202      	movs	r2, #2
 800823e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008240:	2301      	movs	r3, #1
 8008242:	75fb      	strb	r3, [r7, #23]
      break;
 8008244:	e018      	b.n	8008278 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	f000 f81c 	bl	8008284 <USBH_HandleControl>
 800824c:	4603      	mov	r3, r0
 800824e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008250:	7dfb      	ldrb	r3, [r7, #23]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d002      	beq.n	800825c <USBH_CtlReq+0x54>
 8008256:	7dfb      	ldrb	r3, [r7, #23]
 8008258:	2b03      	cmp	r3, #3
 800825a:	d106      	bne.n	800826a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2201      	movs	r2, #1
 8008260:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	761a      	strb	r2, [r3, #24]
      break;
 8008268:	e005      	b.n	8008276 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800826a:	7dfb      	ldrb	r3, [r7, #23]
 800826c:	2b02      	cmp	r3, #2
 800826e:	d102      	bne.n	8008276 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2201      	movs	r2, #1
 8008274:	709a      	strb	r2, [r3, #2]
      break;
 8008276:	bf00      	nop
  }
  return status;
 8008278:	7dfb      	ldrb	r3, [r7, #23]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3718      	adds	r7, #24
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
	...

08008284 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b086      	sub	sp, #24
 8008288:	af02      	add	r7, sp, #8
 800828a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800828c:	2301      	movs	r3, #1
 800828e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008290:	2300      	movs	r3, #0
 8008292:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	7e1b      	ldrb	r3, [r3, #24]
 8008298:	3b01      	subs	r3, #1
 800829a:	2b0a      	cmp	r3, #10
 800829c:	f200 8156 	bhi.w	800854c <USBH_HandleControl+0x2c8>
 80082a0:	a201      	add	r2, pc, #4	; (adr r2, 80082a8 <USBH_HandleControl+0x24>)
 80082a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a6:	bf00      	nop
 80082a8:	080082d5 	.word	0x080082d5
 80082ac:	080082ef 	.word	0x080082ef
 80082b0:	08008359 	.word	0x08008359
 80082b4:	0800837f 	.word	0x0800837f
 80082b8:	080083b7 	.word	0x080083b7
 80082bc:	080083e1 	.word	0x080083e1
 80082c0:	08008433 	.word	0x08008433
 80082c4:	08008455 	.word	0x08008455
 80082c8:	08008491 	.word	0x08008491
 80082cc:	080084b7 	.word	0x080084b7
 80082d0:	080084f5 	.word	0x080084f5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f103 0110 	add.w	r1, r3, #16
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	795b      	ldrb	r3, [r3, #5]
 80082de:	461a      	mov	r2, r3
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 f943 	bl	800856c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2202      	movs	r2, #2
 80082ea:	761a      	strb	r2, [r3, #24]
      break;
 80082ec:	e139      	b.n	8008562 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	795b      	ldrb	r3, [r3, #5]
 80082f2:	4619      	mov	r1, r3
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 fcc5 	bl	8008c84 <USBH_LL_GetURBState>
 80082fa:	4603      	mov	r3, r0
 80082fc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80082fe:	7bbb      	ldrb	r3, [r7, #14]
 8008300:	2b01      	cmp	r3, #1
 8008302:	d11e      	bne.n	8008342 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	7c1b      	ldrb	r3, [r3, #16]
 8008308:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800830c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	8adb      	ldrh	r3, [r3, #22]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00a      	beq.n	800832c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008316:	7b7b      	ldrb	r3, [r7, #13]
 8008318:	2b80      	cmp	r3, #128	; 0x80
 800831a:	d103      	bne.n	8008324 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2203      	movs	r2, #3
 8008320:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008322:	e115      	b.n	8008550 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2205      	movs	r2, #5
 8008328:	761a      	strb	r2, [r3, #24]
      break;
 800832a:	e111      	b.n	8008550 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800832c:	7b7b      	ldrb	r3, [r7, #13]
 800832e:	2b80      	cmp	r3, #128	; 0x80
 8008330:	d103      	bne.n	800833a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2209      	movs	r2, #9
 8008336:	761a      	strb	r2, [r3, #24]
      break;
 8008338:	e10a      	b.n	8008550 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2207      	movs	r2, #7
 800833e:	761a      	strb	r2, [r3, #24]
      break;
 8008340:	e106      	b.n	8008550 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008342:	7bbb      	ldrb	r3, [r7, #14]
 8008344:	2b04      	cmp	r3, #4
 8008346:	d003      	beq.n	8008350 <USBH_HandleControl+0xcc>
 8008348:	7bbb      	ldrb	r3, [r7, #14]
 800834a:	2b02      	cmp	r3, #2
 800834c:	f040 8100 	bne.w	8008550 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	220b      	movs	r2, #11
 8008354:	761a      	strb	r2, [r3, #24]
      break;
 8008356:	e0fb      	b.n	8008550 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800835e:	b29a      	uxth	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6899      	ldr	r1, [r3, #8]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	899a      	ldrh	r2, [r3, #12]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	791b      	ldrb	r3, [r3, #4]
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 f93a 	bl	80085ea <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2204      	movs	r2, #4
 800837a:	761a      	strb	r2, [r3, #24]
      break;
 800837c:	e0f1      	b.n	8008562 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	791b      	ldrb	r3, [r3, #4]
 8008382:	4619      	mov	r1, r3
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fc7d 	bl	8008c84 <USBH_LL_GetURBState>
 800838a:	4603      	mov	r3, r0
 800838c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800838e:	7bbb      	ldrb	r3, [r7, #14]
 8008390:	2b01      	cmp	r3, #1
 8008392:	d102      	bne.n	800839a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2209      	movs	r2, #9
 8008398:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800839a:	7bbb      	ldrb	r3, [r7, #14]
 800839c:	2b05      	cmp	r3, #5
 800839e:	d102      	bne.n	80083a6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80083a0:	2303      	movs	r3, #3
 80083a2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80083a4:	e0d6      	b.n	8008554 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80083a6:	7bbb      	ldrb	r3, [r7, #14]
 80083a8:	2b04      	cmp	r3, #4
 80083aa:	f040 80d3 	bne.w	8008554 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	220b      	movs	r2, #11
 80083b2:	761a      	strb	r2, [r3, #24]
      break;
 80083b4:	e0ce      	b.n	8008554 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6899      	ldr	r1, [r3, #8]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	899a      	ldrh	r2, [r3, #12]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	795b      	ldrb	r3, [r3, #5]
 80083c2:	2001      	movs	r0, #1
 80083c4:	9000      	str	r0, [sp, #0]
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f8ea 	bl	80085a0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2206      	movs	r2, #6
 80083dc:	761a      	strb	r2, [r3, #24]
      break;
 80083de:	e0c0      	b.n	8008562 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	795b      	ldrb	r3, [r3, #5]
 80083e4:	4619      	mov	r1, r3
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 fc4c 	bl	8008c84 <USBH_LL_GetURBState>
 80083ec:	4603      	mov	r3, r0
 80083ee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80083f0:	7bbb      	ldrb	r3, [r7, #14]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d103      	bne.n	80083fe <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2207      	movs	r2, #7
 80083fa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80083fc:	e0ac      	b.n	8008558 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80083fe:	7bbb      	ldrb	r3, [r7, #14]
 8008400:	2b05      	cmp	r3, #5
 8008402:	d105      	bne.n	8008410 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	220c      	movs	r2, #12
 8008408:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800840a:	2303      	movs	r3, #3
 800840c:	73fb      	strb	r3, [r7, #15]
      break;
 800840e:	e0a3      	b.n	8008558 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008410:	7bbb      	ldrb	r3, [r7, #14]
 8008412:	2b02      	cmp	r3, #2
 8008414:	d103      	bne.n	800841e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2205      	movs	r2, #5
 800841a:	761a      	strb	r2, [r3, #24]
      break;
 800841c:	e09c      	b.n	8008558 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800841e:	7bbb      	ldrb	r3, [r7, #14]
 8008420:	2b04      	cmp	r3, #4
 8008422:	f040 8099 	bne.w	8008558 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	220b      	movs	r2, #11
 800842a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800842c:	2302      	movs	r3, #2
 800842e:	73fb      	strb	r3, [r7, #15]
      break;
 8008430:	e092      	b.n	8008558 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	791b      	ldrb	r3, [r3, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	2100      	movs	r1, #0
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 f8d5 	bl	80085ea <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008446:	b29a      	uxth	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2208      	movs	r2, #8
 8008450:	761a      	strb	r2, [r3, #24]

      break;
 8008452:	e086      	b.n	8008562 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	791b      	ldrb	r3, [r3, #4]
 8008458:	4619      	mov	r1, r3
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fc12 	bl	8008c84 <USBH_LL_GetURBState>
 8008460:	4603      	mov	r3, r0
 8008462:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008464:	7bbb      	ldrb	r3, [r7, #14]
 8008466:	2b01      	cmp	r3, #1
 8008468:	d105      	bne.n	8008476 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	220d      	movs	r2, #13
 800846e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008470:	2300      	movs	r3, #0
 8008472:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008474:	e072      	b.n	800855c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008476:	7bbb      	ldrb	r3, [r7, #14]
 8008478:	2b04      	cmp	r3, #4
 800847a:	d103      	bne.n	8008484 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	220b      	movs	r2, #11
 8008480:	761a      	strb	r2, [r3, #24]
      break;
 8008482:	e06b      	b.n	800855c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008484:	7bbb      	ldrb	r3, [r7, #14]
 8008486:	2b05      	cmp	r3, #5
 8008488:	d168      	bne.n	800855c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800848a:	2303      	movs	r3, #3
 800848c:	73fb      	strb	r3, [r7, #15]
      break;
 800848e:	e065      	b.n	800855c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	795b      	ldrb	r3, [r3, #5]
 8008494:	2201      	movs	r2, #1
 8008496:	9200      	str	r2, [sp, #0]
 8008498:	2200      	movs	r2, #0
 800849a:	2100      	movs	r1, #0
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 f87f 	bl	80085a0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084a8:	b29a      	uxth	r2, r3
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	220a      	movs	r2, #10
 80084b2:	761a      	strb	r2, [r3, #24]
      break;
 80084b4:	e055      	b.n	8008562 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	795b      	ldrb	r3, [r3, #5]
 80084ba:	4619      	mov	r1, r3
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fbe1 	bl	8008c84 <USBH_LL_GetURBState>
 80084c2:	4603      	mov	r3, r0
 80084c4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80084c6:	7bbb      	ldrb	r3, [r7, #14]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d105      	bne.n	80084d8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80084cc:	2300      	movs	r3, #0
 80084ce:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	220d      	movs	r2, #13
 80084d4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80084d6:	e043      	b.n	8008560 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80084d8:	7bbb      	ldrb	r3, [r7, #14]
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d103      	bne.n	80084e6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2209      	movs	r2, #9
 80084e2:	761a      	strb	r2, [r3, #24]
      break;
 80084e4:	e03c      	b.n	8008560 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80084e6:	7bbb      	ldrb	r3, [r7, #14]
 80084e8:	2b04      	cmp	r3, #4
 80084ea:	d139      	bne.n	8008560 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	220b      	movs	r2, #11
 80084f0:	761a      	strb	r2, [r3, #24]
      break;
 80084f2:	e035      	b.n	8008560 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	7e5b      	ldrb	r3, [r3, #25]
 80084f8:	3301      	adds	r3, #1
 80084fa:	b2da      	uxtb	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	765a      	strb	r2, [r3, #25]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	7e5b      	ldrb	r3, [r3, #25]
 8008504:	2b02      	cmp	r3, #2
 8008506:	d806      	bhi.n	8008516 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2201      	movs	r2, #1
 800850c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2201      	movs	r2, #1
 8008512:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008514:	e025      	b.n	8008562 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800851c:	2106      	movs	r1, #6
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	795b      	ldrb	r3, [r3, #5]
 800852c:	4619      	mov	r1, r3
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 f90c 	bl	800874c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	791b      	ldrb	r3, [r3, #4]
 8008538:	4619      	mov	r1, r3
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f906 	bl	800874c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008546:	2302      	movs	r3, #2
 8008548:	73fb      	strb	r3, [r7, #15]
      break;
 800854a:	e00a      	b.n	8008562 <USBH_HandleControl+0x2de>

    default:
      break;
 800854c:	bf00      	nop
 800854e:	e008      	b.n	8008562 <USBH_HandleControl+0x2de>
      break;
 8008550:	bf00      	nop
 8008552:	e006      	b.n	8008562 <USBH_HandleControl+0x2de>
      break;
 8008554:	bf00      	nop
 8008556:	e004      	b.n	8008562 <USBH_HandleControl+0x2de>
      break;
 8008558:	bf00      	nop
 800855a:	e002      	b.n	8008562 <USBH_HandleControl+0x2de>
      break;
 800855c:	bf00      	nop
 800855e:	e000      	b.n	8008562 <USBH_HandleControl+0x2de>
      break;
 8008560:	bf00      	nop
  }

  return status;
 8008562:	7bfb      	ldrb	r3, [r7, #15]
}
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b088      	sub	sp, #32
 8008570:	af04      	add	r7, sp, #16
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	4613      	mov	r3, r2
 8008578:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800857a:	79f9      	ldrb	r1, [r7, #7]
 800857c:	2300      	movs	r3, #0
 800857e:	9303      	str	r3, [sp, #12]
 8008580:	2308      	movs	r3, #8
 8008582:	9302      	str	r3, [sp, #8]
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	9301      	str	r3, [sp, #4]
 8008588:	2300      	movs	r3, #0
 800858a:	9300      	str	r3, [sp, #0]
 800858c:	2300      	movs	r3, #0
 800858e:	2200      	movs	r2, #0
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f000 fb46 	bl	8008c22 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008596:	2300      	movs	r3, #0
}
 8008598:	4618      	mov	r0, r3
 800859a:	3710      	adds	r7, #16
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b088      	sub	sp, #32
 80085a4:	af04      	add	r7, sp, #16
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	4611      	mov	r1, r2
 80085ac:	461a      	mov	r2, r3
 80085ae:	460b      	mov	r3, r1
 80085b0:	80fb      	strh	r3, [r7, #6]
 80085b2:	4613      	mov	r3, r2
 80085b4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d001      	beq.n	80085c4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80085c0:	2300      	movs	r3, #0
 80085c2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80085c4:	7979      	ldrb	r1, [r7, #5]
 80085c6:	7e3b      	ldrb	r3, [r7, #24]
 80085c8:	9303      	str	r3, [sp, #12]
 80085ca:	88fb      	ldrh	r3, [r7, #6]
 80085cc:	9302      	str	r3, [sp, #8]
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	9301      	str	r3, [sp, #4]
 80085d2:	2301      	movs	r3, #1
 80085d4:	9300      	str	r3, [sp, #0]
 80085d6:	2300      	movs	r3, #0
 80085d8:	2200      	movs	r2, #0
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	f000 fb21 	bl	8008c22 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b088      	sub	sp, #32
 80085ee:	af04      	add	r7, sp, #16
 80085f0:	60f8      	str	r0, [r7, #12]
 80085f2:	60b9      	str	r1, [r7, #8]
 80085f4:	4611      	mov	r1, r2
 80085f6:	461a      	mov	r2, r3
 80085f8:	460b      	mov	r3, r1
 80085fa:	80fb      	strh	r3, [r7, #6]
 80085fc:	4613      	mov	r3, r2
 80085fe:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008600:	7979      	ldrb	r1, [r7, #5]
 8008602:	2300      	movs	r3, #0
 8008604:	9303      	str	r3, [sp, #12]
 8008606:	88fb      	ldrh	r3, [r7, #6]
 8008608:	9302      	str	r3, [sp, #8]
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	9301      	str	r3, [sp, #4]
 800860e:	2301      	movs	r3, #1
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	2300      	movs	r3, #0
 8008614:	2201      	movs	r2, #1
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	f000 fb03 	bl	8008c22 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800861c:	2300      	movs	r3, #0

}
 800861e:	4618      	mov	r0, r3
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b088      	sub	sp, #32
 800862a:	af04      	add	r7, sp, #16
 800862c:	60f8      	str	r0, [r7, #12]
 800862e:	60b9      	str	r1, [r7, #8]
 8008630:	4611      	mov	r1, r2
 8008632:	461a      	mov	r2, r3
 8008634:	460b      	mov	r3, r1
 8008636:	80fb      	strh	r3, [r7, #6]
 8008638:	4613      	mov	r3, r2
 800863a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008642:	2b00      	cmp	r3, #0
 8008644:	d001      	beq.n	800864a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008646:	2300      	movs	r3, #0
 8008648:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800864a:	7979      	ldrb	r1, [r7, #5]
 800864c:	7e3b      	ldrb	r3, [r7, #24]
 800864e:	9303      	str	r3, [sp, #12]
 8008650:	88fb      	ldrh	r3, [r7, #6]
 8008652:	9302      	str	r3, [sp, #8]
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	9301      	str	r3, [sp, #4]
 8008658:	2301      	movs	r3, #1
 800865a:	9300      	str	r3, [sp, #0]
 800865c:	2302      	movs	r3, #2
 800865e:	2200      	movs	r2, #0
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f000 fade 	bl	8008c22 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3710      	adds	r7, #16
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b088      	sub	sp, #32
 8008674:	af04      	add	r7, sp, #16
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	4611      	mov	r1, r2
 800867c:	461a      	mov	r2, r3
 800867e:	460b      	mov	r3, r1
 8008680:	80fb      	strh	r3, [r7, #6]
 8008682:	4613      	mov	r3, r2
 8008684:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008686:	7979      	ldrb	r1, [r7, #5]
 8008688:	2300      	movs	r3, #0
 800868a:	9303      	str	r3, [sp, #12]
 800868c:	88fb      	ldrh	r3, [r7, #6]
 800868e:	9302      	str	r3, [sp, #8]
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	9301      	str	r3, [sp, #4]
 8008694:	2301      	movs	r3, #1
 8008696:	9300      	str	r3, [sp, #0]
 8008698:	2302      	movs	r3, #2
 800869a:	2201      	movs	r2, #1
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f000 fac0 	bl	8008c22 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b086      	sub	sp, #24
 80086b0:	af04      	add	r7, sp, #16
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	4608      	mov	r0, r1
 80086b6:	4611      	mov	r1, r2
 80086b8:	461a      	mov	r2, r3
 80086ba:	4603      	mov	r3, r0
 80086bc:	70fb      	strb	r3, [r7, #3]
 80086be:	460b      	mov	r3, r1
 80086c0:	70bb      	strb	r3, [r7, #2]
 80086c2:	4613      	mov	r3, r2
 80086c4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80086c6:	7878      	ldrb	r0, [r7, #1]
 80086c8:	78ba      	ldrb	r2, [r7, #2]
 80086ca:	78f9      	ldrb	r1, [r7, #3]
 80086cc:	8b3b      	ldrh	r3, [r7, #24]
 80086ce:	9302      	str	r3, [sp, #8]
 80086d0:	7d3b      	ldrb	r3, [r7, #20]
 80086d2:	9301      	str	r3, [sp, #4]
 80086d4:	7c3b      	ldrb	r3, [r7, #16]
 80086d6:	9300      	str	r3, [sp, #0]
 80086d8:	4603      	mov	r3, r0
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 fa53 	bl	8008b86 <USBH_LL_OpenPipe>

  return USBH_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3708      	adds	r7, #8
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b082      	sub	sp, #8
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	460b      	mov	r3, r1
 80086f4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80086f6:	78fb      	ldrb	r3, [r7, #3]
 80086f8:	4619      	mov	r1, r3
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fa72 	bl	8008be4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3708      	adds	r7, #8
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b084      	sub	sp, #16
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
 8008712:	460b      	mov	r3, r1
 8008714:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 f836 	bl	8008788 <USBH_GetFreePipe>
 800871c:	4603      	mov	r3, r0
 800871e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008720:	89fb      	ldrh	r3, [r7, #14]
 8008722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008726:	4293      	cmp	r3, r2
 8008728:	d00a      	beq.n	8008740 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800872a:	78fa      	ldrb	r2, [r7, #3]
 800872c:	89fb      	ldrh	r3, [r7, #14]
 800872e:	f003 030f 	and.w	r3, r3, #15
 8008732:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008736:	6879      	ldr	r1, [r7, #4]
 8008738:	33e0      	adds	r3, #224	; 0xe0
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	440b      	add	r3, r1
 800873e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008740:	89fb      	ldrh	r3, [r7, #14]
 8008742:	b2db      	uxtb	r3, r3
}
 8008744:	4618      	mov	r0, r3
 8008746:	3710      	adds	r7, #16
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	460b      	mov	r3, r1
 8008756:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008758:	78fb      	ldrb	r3, [r7, #3]
 800875a:	2b0f      	cmp	r3, #15
 800875c:	d80d      	bhi.n	800877a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800875e:	78fb      	ldrb	r3, [r7, #3]
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	33e0      	adds	r3, #224	; 0xe0
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	4413      	add	r3, r2
 8008768:	685a      	ldr	r2, [r3, #4]
 800876a:	78fb      	ldrb	r3, [r7, #3]
 800876c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008770:	6879      	ldr	r1, [r7, #4]
 8008772:	33e0      	adds	r3, #224	; 0xe0
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	440b      	add	r3, r1
 8008778:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008790:	2300      	movs	r3, #0
 8008792:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008794:	2300      	movs	r3, #0
 8008796:	73fb      	strb	r3, [r7, #15]
 8008798:	e00f      	b.n	80087ba <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800879a:	7bfb      	ldrb	r3, [r7, #15]
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	33e0      	adds	r3, #224	; 0xe0
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4413      	add	r3, r2
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d102      	bne.n	80087b4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80087ae:	7bfb      	ldrb	r3, [r7, #15]
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	e007      	b.n	80087c4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80087b4:	7bfb      	ldrb	r3, [r7, #15]
 80087b6:	3301      	adds	r3, #1
 80087b8:	73fb      	strb	r3, [r7, #15]
 80087ba:	7bfb      	ldrb	r3, [r7, #15]
 80087bc:	2b0f      	cmp	r3, #15
 80087be:	d9ec      	bls.n	800879a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80087c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3714      	adds	r7, #20
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80087d4:	2201      	movs	r2, #1
 80087d6:	490e      	ldr	r1, [pc, #56]	; (8008810 <MX_USB_HOST_Init+0x40>)
 80087d8:	480e      	ldr	r0, [pc, #56]	; (8008814 <MX_USB_HOST_Init+0x44>)
 80087da:	f7fe fba7 	bl	8006f2c <USBH_Init>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d001      	beq.n	80087e8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80087e4:	f7f9 fbb6 	bl	8001f54 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80087e8:	490b      	ldr	r1, [pc, #44]	; (8008818 <MX_USB_HOST_Init+0x48>)
 80087ea:	480a      	ldr	r0, [pc, #40]	; (8008814 <MX_USB_HOST_Init+0x44>)
 80087ec:	f7fe fc2c 	bl	8007048 <USBH_RegisterClass>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d001      	beq.n	80087fa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80087f6:	f7f9 fbad 	bl	8001f54 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80087fa:	4806      	ldr	r0, [pc, #24]	; (8008814 <MX_USB_HOST_Init+0x44>)
 80087fc:	f7fe fcb0 	bl	8007160 <USBH_Start>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d001      	beq.n	800880a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008806:	f7f9 fba5 	bl	8001f54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800880a:	bf00      	nop
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	08008831 	.word	0x08008831
 8008814:	20000220 	.word	0x20000220
 8008818:	20000010 	.word	0x20000010

0800881c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008820:	4802      	ldr	r0, [pc, #8]	; (800882c <MX_USB_HOST_Process+0x10>)
 8008822:	f7fe fcad 	bl	8007180 <USBH_Process>
}
 8008826:	bf00      	nop
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	20000220 	.word	0x20000220

08008830 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	460b      	mov	r3, r1
 800883a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800883c:	78fb      	ldrb	r3, [r7, #3]
 800883e:	3b01      	subs	r3, #1
 8008840:	2b04      	cmp	r3, #4
 8008842:	d819      	bhi.n	8008878 <USBH_UserProcess+0x48>
 8008844:	a201      	add	r2, pc, #4	; (adr r2, 800884c <USBH_UserProcess+0x1c>)
 8008846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800884a:	bf00      	nop
 800884c:	08008879 	.word	0x08008879
 8008850:	08008869 	.word	0x08008869
 8008854:	08008879 	.word	0x08008879
 8008858:	08008871 	.word	0x08008871
 800885c:	08008861 	.word	0x08008861
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008860:	4b09      	ldr	r3, [pc, #36]	; (8008888 <USBH_UserProcess+0x58>)
 8008862:	2203      	movs	r2, #3
 8008864:	701a      	strb	r2, [r3, #0]
  break;
 8008866:	e008      	b.n	800887a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008868:	4b07      	ldr	r3, [pc, #28]	; (8008888 <USBH_UserProcess+0x58>)
 800886a:	2202      	movs	r2, #2
 800886c:	701a      	strb	r2, [r3, #0]
  break;
 800886e:	e004      	b.n	800887a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008870:	4b05      	ldr	r3, [pc, #20]	; (8008888 <USBH_UserProcess+0x58>)
 8008872:	2201      	movs	r2, #1
 8008874:	701a      	strb	r2, [r3, #0]
  break;
 8008876:	e000      	b.n	800887a <USBH_UserProcess+0x4a>

  default:
  break;
 8008878:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800887a:	bf00      	nop
 800887c:	370c      	adds	r7, #12
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	200005f8 	.word	0x200005f8

0800888c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b08a      	sub	sp, #40	; 0x28
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008894:	f107 0314 	add.w	r3, r7, #20
 8008898:	2200      	movs	r2, #0
 800889a:	601a      	str	r2, [r3, #0]
 800889c:	605a      	str	r2, [r3, #4]
 800889e:	609a      	str	r2, [r3, #8]
 80088a0:	60da      	str	r2, [r3, #12]
 80088a2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088ac:	d147      	bne.n	800893e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088ae:	2300      	movs	r3, #0
 80088b0:	613b      	str	r3, [r7, #16]
 80088b2:	4b25      	ldr	r3, [pc, #148]	; (8008948 <HAL_HCD_MspInit+0xbc>)
 80088b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b6:	4a24      	ldr	r2, [pc, #144]	; (8008948 <HAL_HCD_MspInit+0xbc>)
 80088b8:	f043 0301 	orr.w	r3, r3, #1
 80088bc:	6313      	str	r3, [r2, #48]	; 0x30
 80088be:	4b22      	ldr	r3, [pc, #136]	; (8008948 <HAL_HCD_MspInit+0xbc>)
 80088c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c2:	f003 0301 	and.w	r3, r3, #1
 80088c6:	613b      	str	r3, [r7, #16]
 80088c8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80088ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80088d0:	2300      	movs	r3, #0
 80088d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088d4:	2300      	movs	r3, #0
 80088d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80088d8:	f107 0314 	add.w	r3, r7, #20
 80088dc:	4619      	mov	r1, r3
 80088de:	481b      	ldr	r0, [pc, #108]	; (800894c <HAL_HCD_MspInit+0xc0>)
 80088e0:	f7f9 feee 	bl	80026c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80088e4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80088e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088ea:	2302      	movs	r3, #2
 80088ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088ee:	2300      	movs	r3, #0
 80088f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088f2:	2303      	movs	r3, #3
 80088f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80088f6:	230a      	movs	r3, #10
 80088f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088fa:	f107 0314 	add.w	r3, r7, #20
 80088fe:	4619      	mov	r1, r3
 8008900:	4812      	ldr	r0, [pc, #72]	; (800894c <HAL_HCD_MspInit+0xc0>)
 8008902:	f7f9 fedd 	bl	80026c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008906:	4b10      	ldr	r3, [pc, #64]	; (8008948 <HAL_HCD_MspInit+0xbc>)
 8008908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800890a:	4a0f      	ldr	r2, [pc, #60]	; (8008948 <HAL_HCD_MspInit+0xbc>)
 800890c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008910:	6353      	str	r3, [r2, #52]	; 0x34
 8008912:	2300      	movs	r3, #0
 8008914:	60fb      	str	r3, [r7, #12]
 8008916:	4b0c      	ldr	r3, [pc, #48]	; (8008948 <HAL_HCD_MspInit+0xbc>)
 8008918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800891a:	4a0b      	ldr	r2, [pc, #44]	; (8008948 <HAL_HCD_MspInit+0xbc>)
 800891c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008920:	6453      	str	r3, [r2, #68]	; 0x44
 8008922:	4b09      	ldr	r3, [pc, #36]	; (8008948 <HAL_HCD_MspInit+0xbc>)
 8008924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800892a:	60fb      	str	r3, [r7, #12]
 800892c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800892e:	2200      	movs	r2, #0
 8008930:	2100      	movs	r1, #0
 8008932:	2043      	movs	r0, #67	; 0x43
 8008934:	f7f9 fe7f 	bl	8002636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008938:	2043      	movs	r0, #67	; 0x43
 800893a:	f7f9 fe98 	bl	800266e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800893e:	bf00      	nop
 8008940:	3728      	adds	r7, #40	; 0x28
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	40023800 	.word	0x40023800
 800894c:	40020000 	.word	0x40020000

08008950 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800895e:	4618      	mov	r0, r3
 8008960:	f7fe ffed 	bl	800793e <USBH_LL_IncTimer>
}
 8008964:	bf00      	nop
 8008966:	3708      	adds	r7, #8
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800897a:	4618      	mov	r0, r3
 800897c:	f7ff f825 	bl	80079ca <USBH_LL_Connect>
}
 8008980:	bf00      	nop
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008996:	4618      	mov	r0, r3
 8008998:	f7ff f82e 	bl	80079f8 <USBH_LL_Disconnect>
}
 800899c:	bf00      	nop
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	460b      	mov	r3, r1
 80089ae:	70fb      	strb	r3, [r7, #3]
 80089b0:	4613      	mov	r3, r2
 80089b2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80089b4:	bf00      	nop
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7fe ffdf 	bl	8007992 <USBH_LL_PortEnabled>
}
 80089d4:	bf00      	nop
 80089d6:	3708      	adds	r7, #8
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7fe ffdf 	bl	80079ae <USBH_LL_PortDisabled>
}
 80089f0:	bf00      	nop
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d12a      	bne.n	8008a60 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008a0a:	4a18      	ldr	r2, [pc, #96]	; (8008a6c <USBH_LL_Init+0x74>)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a15      	ldr	r2, [pc, #84]	; (8008a6c <USBH_LL_Init+0x74>)
 8008a16:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a1a:	4b14      	ldr	r3, [pc, #80]	; (8008a6c <USBH_LL_Init+0x74>)
 8008a1c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008a20:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008a22:	4b12      	ldr	r3, [pc, #72]	; (8008a6c <USBH_LL_Init+0x74>)
 8008a24:	2208      	movs	r2, #8
 8008a26:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008a28:	4b10      	ldr	r3, [pc, #64]	; (8008a6c <USBH_LL_Init+0x74>)
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008a2e:	4b0f      	ldr	r3, [pc, #60]	; (8008a6c <USBH_LL_Init+0x74>)
 8008a30:	2200      	movs	r2, #0
 8008a32:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008a34:	4b0d      	ldr	r3, [pc, #52]	; (8008a6c <USBH_LL_Init+0x74>)
 8008a36:	2202      	movs	r2, #2
 8008a38:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008a3a:	4b0c      	ldr	r3, [pc, #48]	; (8008a6c <USBH_LL_Init+0x74>)
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008a40:	480a      	ldr	r0, [pc, #40]	; (8008a6c <USBH_LL_Init+0x74>)
 8008a42:	f7f9 fff3 	bl	8002a2c <HAL_HCD_Init>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d001      	beq.n	8008a50 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008a4c:	f7f9 fa82 	bl	8001f54 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008a50:	4806      	ldr	r0, [pc, #24]	; (8008a6c <USBH_LL_Init+0x74>)
 8008a52:	f7fa fbd6 	bl	8003202 <HAL_HCD_GetCurrentFrame>
 8008a56:	4603      	mov	r3, r0
 8008a58:	4619      	mov	r1, r3
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f7fe ff60 	bl	8007920 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008a60:	2300      	movs	r3, #0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3708      	adds	r7, #8
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	200005fc 	.word	0x200005fc

08008a70 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7fa fb45 	bl	8003116 <HAL_HCD_Start>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a90:	7bfb      	ldrb	r3, [r7, #15]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f000 f95c 	bl	8008d50 <USBH_Get_USB_Status>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b084      	sub	sp, #16
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7fa fb4d 	bl	800315c <HAL_HCD_Stop>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ac6:	7bfb      	ldrb	r3, [r7, #15]
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 f941 	bl	8008d50 <USBH_Get_USB_Status>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ad2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7fa fb95 	bl	800321e <HAL_HCD_GetCurrentSpeed>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d00c      	beq.n	8008b14 <USBH_LL_GetSpeed+0x38>
 8008afa:	2b02      	cmp	r3, #2
 8008afc:	d80d      	bhi.n	8008b1a <USBH_LL_GetSpeed+0x3e>
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d002      	beq.n	8008b08 <USBH_LL_GetSpeed+0x2c>
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d003      	beq.n	8008b0e <USBH_LL_GetSpeed+0x32>
 8008b06:	e008      	b.n	8008b1a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b0c:	e008      	b.n	8008b20 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	73fb      	strb	r3, [r7, #15]
    break;
 8008b12:	e005      	b.n	8008b20 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008b14:	2302      	movs	r3, #2
 8008b16:	73fb      	strb	r3, [r7, #15]
    break;
 8008b18:	e002      	b.n	8008b20 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b1e:	bf00      	nop
  }
  return  speed;
 8008b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b084      	sub	sp, #16
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b32:	2300      	movs	r3, #0
 8008b34:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7fa fb28 	bl	8003196 <HAL_HCD_ResetPort>
 8008b46:	4603      	mov	r3, r0
 8008b48:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b4a:	7bfb      	ldrb	r3, [r7, #15]
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f000 f8ff 	bl	8008d50 <USBH_Get_USB_Status>
 8008b52:	4603      	mov	r3, r0
 8008b54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b56:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3710      	adds	r7, #16
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	460b      	mov	r3, r1
 8008b6a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b72:	78fa      	ldrb	r2, [r7, #3]
 8008b74:	4611      	mov	r1, r2
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7fa fb2f 	bl	80031da <HAL_HCD_HC_GetXferCount>
 8008b7c:	4603      	mov	r3, r0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3708      	adds	r7, #8
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008b86:	b590      	push	{r4, r7, lr}
 8008b88:	b089      	sub	sp, #36	; 0x24
 8008b8a:	af04      	add	r7, sp, #16
 8008b8c:	6078      	str	r0, [r7, #4]
 8008b8e:	4608      	mov	r0, r1
 8008b90:	4611      	mov	r1, r2
 8008b92:	461a      	mov	r2, r3
 8008b94:	4603      	mov	r3, r0
 8008b96:	70fb      	strb	r3, [r7, #3]
 8008b98:	460b      	mov	r3, r1
 8008b9a:	70bb      	strb	r3, [r7, #2]
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008bae:	787c      	ldrb	r4, [r7, #1]
 8008bb0:	78ba      	ldrb	r2, [r7, #2]
 8008bb2:	78f9      	ldrb	r1, [r7, #3]
 8008bb4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008bb6:	9302      	str	r3, [sp, #8]
 8008bb8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008bbc:	9301      	str	r3, [sp, #4]
 8008bbe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008bc2:	9300      	str	r3, [sp, #0]
 8008bc4:	4623      	mov	r3, r4
 8008bc6:	f7f9 ff93 	bl	8002af0 <HAL_HCD_HC_Init>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008bce:	7bfb      	ldrb	r3, [r7, #15]
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f000 f8bd 	bl	8008d50 <USBH_Get_USB_Status>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bda:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3714      	adds	r7, #20
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd90      	pop	{r4, r7, pc}

08008be4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	460b      	mov	r3, r1
 8008bee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bfe:	78fa      	ldrb	r2, [r7, #3]
 8008c00:	4611      	mov	r1, r2
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7fa f803 	bl	8002c0e <HAL_HCD_HC_Halt>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c0c:	7bfb      	ldrb	r3, [r7, #15]
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f000 f89e 	bl	8008d50 <USBH_Get_USB_Status>
 8008c14:	4603      	mov	r3, r0
 8008c16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c18:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3710      	adds	r7, #16
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008c22:	b590      	push	{r4, r7, lr}
 8008c24:	b089      	sub	sp, #36	; 0x24
 8008c26:	af04      	add	r7, sp, #16
 8008c28:	6078      	str	r0, [r7, #4]
 8008c2a:	4608      	mov	r0, r1
 8008c2c:	4611      	mov	r1, r2
 8008c2e:	461a      	mov	r2, r3
 8008c30:	4603      	mov	r3, r0
 8008c32:	70fb      	strb	r3, [r7, #3]
 8008c34:	460b      	mov	r3, r1
 8008c36:	70bb      	strb	r3, [r7, #2]
 8008c38:	4613      	mov	r3, r2
 8008c3a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c40:	2300      	movs	r3, #0
 8008c42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008c4a:	787c      	ldrb	r4, [r7, #1]
 8008c4c:	78ba      	ldrb	r2, [r7, #2]
 8008c4e:	78f9      	ldrb	r1, [r7, #3]
 8008c50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008c54:	9303      	str	r3, [sp, #12]
 8008c56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008c58:	9302      	str	r3, [sp, #8]
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5c:	9301      	str	r3, [sp, #4]
 8008c5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008c62:	9300      	str	r3, [sp, #0]
 8008c64:	4623      	mov	r3, r4
 8008c66:	f7f9 fff5 	bl	8002c54 <HAL_HCD_HC_SubmitRequest>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008c6e:	7bfb      	ldrb	r3, [r7, #15]
 8008c70:	4618      	mov	r0, r3
 8008c72:	f000 f86d 	bl	8008d50 <USBH_Get_USB_Status>
 8008c76:	4603      	mov	r3, r0
 8008c78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3714      	adds	r7, #20
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd90      	pop	{r4, r7, pc}

08008c84 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c96:	78fa      	ldrb	r2, [r7, #3]
 8008c98:	4611      	mov	r1, r2
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7fa fa89 	bl	80031b2 <HAL_HCD_HC_GetURBState>
 8008ca0:	4603      	mov	r3, r0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3708      	adds	r7, #8
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b082      	sub	sp, #8
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d103      	bne.n	8008cc8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008cc0:	78fb      	ldrb	r3, [r7, #3]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f000 f870 	bl	8008da8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008cc8:	20c8      	movs	r0, #200	; 0xc8
 8008cca:	f7f9 fb91 	bl	80023f0 <HAL_Delay>
  return USBH_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b085      	sub	sp, #20
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	70fb      	strb	r3, [r7, #3]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008cee:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008cf0:	78fb      	ldrb	r3, [r7, #3]
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	212c      	movs	r1, #44	; 0x2c
 8008cf6:	fb01 f303 	mul.w	r3, r1, r3
 8008cfa:	4413      	add	r3, r2
 8008cfc:	333b      	adds	r3, #59	; 0x3b
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d009      	beq.n	8008d18 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008d04:	78fb      	ldrb	r3, [r7, #3]
 8008d06:	68fa      	ldr	r2, [r7, #12]
 8008d08:	212c      	movs	r1, #44	; 0x2c
 8008d0a:	fb01 f303 	mul.w	r3, r1, r3
 8008d0e:	4413      	add	r3, r2
 8008d10:	3354      	adds	r3, #84	; 0x54
 8008d12:	78ba      	ldrb	r2, [r7, #2]
 8008d14:	701a      	strb	r2, [r3, #0]
 8008d16:	e008      	b.n	8008d2a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008d18:	78fb      	ldrb	r3, [r7, #3]
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	212c      	movs	r1, #44	; 0x2c
 8008d1e:	fb01 f303 	mul.w	r3, r1, r3
 8008d22:	4413      	add	r3, r2
 8008d24:	3355      	adds	r3, #85	; 0x55
 8008d26:	78ba      	ldrb	r2, [r7, #2]
 8008d28:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3714      	adds	r7, #20
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f7f9 fb55 	bl	80023f0 <HAL_Delay>
}
 8008d46:	bf00      	nop
 8008d48:	3708      	adds	r7, #8
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
	...

08008d50 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b085      	sub	sp, #20
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	4603      	mov	r3, r0
 8008d58:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d5e:	79fb      	ldrb	r3, [r7, #7]
 8008d60:	2b03      	cmp	r3, #3
 8008d62:	d817      	bhi.n	8008d94 <USBH_Get_USB_Status+0x44>
 8008d64:	a201      	add	r2, pc, #4	; (adr r2, 8008d6c <USBH_Get_USB_Status+0x1c>)
 8008d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d6a:	bf00      	nop
 8008d6c:	08008d7d 	.word	0x08008d7d
 8008d70:	08008d83 	.word	0x08008d83
 8008d74:	08008d89 	.word	0x08008d89
 8008d78:	08008d8f 	.word	0x08008d8f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d80:	e00b      	b.n	8008d9a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008d82:	2302      	movs	r3, #2
 8008d84:	73fb      	strb	r3, [r7, #15]
    break;
 8008d86:	e008      	b.n	8008d9a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d8c:	e005      	b.n	8008d9a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008d8e:	2302      	movs	r3, #2
 8008d90:	73fb      	strb	r3, [r7, #15]
    break;
 8008d92:	e002      	b.n	8008d9a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008d94:	2302      	movs	r3, #2
 8008d96:	73fb      	strb	r3, [r7, #15]
    break;
 8008d98:	bf00      	nop
  }
  return usb_status;
 8008d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3714      	adds	r7, #20
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	4603      	mov	r3, r0
 8008db0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008db2:	79fb      	ldrb	r3, [r7, #7]
 8008db4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008db6:	79fb      	ldrb	r3, [r7, #7]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d102      	bne.n	8008dc2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	73fb      	strb	r3, [r7, #15]
 8008dc0:	e001      	b.n	8008dc6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008dc6:	7bfb      	ldrb	r3, [r7, #15]
 8008dc8:	461a      	mov	r2, r3
 8008dca:	2101      	movs	r1, #1
 8008dcc:	4803      	ldr	r0, [pc, #12]	; (8008ddc <MX_DriverVbusFS+0x34>)
 8008dce:	f7f9 fdfb 	bl	80029c8 <HAL_GPIO_WritePin>
}
 8008dd2:	bf00      	nop
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	40020800 	.word	0x40020800

08008de0 <__errno>:
 8008de0:	4b01      	ldr	r3, [pc, #4]	; (8008de8 <__errno+0x8>)
 8008de2:	6818      	ldr	r0, [r3, #0]
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop
 8008de8:	20000030 	.word	0x20000030

08008dec <__libc_init_array>:
 8008dec:	b570      	push	{r4, r5, r6, lr}
 8008dee:	4d0d      	ldr	r5, [pc, #52]	; (8008e24 <__libc_init_array+0x38>)
 8008df0:	4c0d      	ldr	r4, [pc, #52]	; (8008e28 <__libc_init_array+0x3c>)
 8008df2:	1b64      	subs	r4, r4, r5
 8008df4:	10a4      	asrs	r4, r4, #2
 8008df6:	2600      	movs	r6, #0
 8008df8:	42a6      	cmp	r6, r4
 8008dfa:	d109      	bne.n	8008e10 <__libc_init_array+0x24>
 8008dfc:	4d0b      	ldr	r5, [pc, #44]	; (8008e2c <__libc_init_array+0x40>)
 8008dfe:	4c0c      	ldr	r4, [pc, #48]	; (8008e30 <__libc_init_array+0x44>)
 8008e00:	f000 fcb8 	bl	8009774 <_init>
 8008e04:	1b64      	subs	r4, r4, r5
 8008e06:	10a4      	asrs	r4, r4, #2
 8008e08:	2600      	movs	r6, #0
 8008e0a:	42a6      	cmp	r6, r4
 8008e0c:	d105      	bne.n	8008e1a <__libc_init_array+0x2e>
 8008e0e:	bd70      	pop	{r4, r5, r6, pc}
 8008e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e14:	4798      	blx	r3
 8008e16:	3601      	adds	r6, #1
 8008e18:	e7ee      	b.n	8008df8 <__libc_init_array+0xc>
 8008e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e1e:	4798      	blx	r3
 8008e20:	3601      	adds	r6, #1
 8008e22:	e7f2      	b.n	8008e0a <__libc_init_array+0x1e>
 8008e24:	08009fb4 	.word	0x08009fb4
 8008e28:	08009fb4 	.word	0x08009fb4
 8008e2c:	08009fb4 	.word	0x08009fb4
 8008e30:	08009fb8 	.word	0x08009fb8

08008e34 <malloc>:
 8008e34:	4b02      	ldr	r3, [pc, #8]	; (8008e40 <malloc+0xc>)
 8008e36:	4601      	mov	r1, r0
 8008e38:	6818      	ldr	r0, [r3, #0]
 8008e3a:	f000 b87f 	b.w	8008f3c <_malloc_r>
 8008e3e:	bf00      	nop
 8008e40:	20000030 	.word	0x20000030

08008e44 <free>:
 8008e44:	4b02      	ldr	r3, [pc, #8]	; (8008e50 <free+0xc>)
 8008e46:	4601      	mov	r1, r0
 8008e48:	6818      	ldr	r0, [r3, #0]
 8008e4a:	f000 b80b 	b.w	8008e64 <_free_r>
 8008e4e:	bf00      	nop
 8008e50:	20000030 	.word	0x20000030

08008e54 <memset>:
 8008e54:	4402      	add	r2, r0
 8008e56:	4603      	mov	r3, r0
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d100      	bne.n	8008e5e <memset+0xa>
 8008e5c:	4770      	bx	lr
 8008e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8008e62:	e7f9      	b.n	8008e58 <memset+0x4>

08008e64 <_free_r>:
 8008e64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e66:	2900      	cmp	r1, #0
 8008e68:	d044      	beq.n	8008ef4 <_free_r+0x90>
 8008e6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e6e:	9001      	str	r0, [sp, #4]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	f1a1 0404 	sub.w	r4, r1, #4
 8008e76:	bfb8      	it	lt
 8008e78:	18e4      	addlt	r4, r4, r3
 8008e7a:	f000 f91d 	bl	80090b8 <__malloc_lock>
 8008e7e:	4a1e      	ldr	r2, [pc, #120]	; (8008ef8 <_free_r+0x94>)
 8008e80:	9801      	ldr	r0, [sp, #4]
 8008e82:	6813      	ldr	r3, [r2, #0]
 8008e84:	b933      	cbnz	r3, 8008e94 <_free_r+0x30>
 8008e86:	6063      	str	r3, [r4, #4]
 8008e88:	6014      	str	r4, [r2, #0]
 8008e8a:	b003      	add	sp, #12
 8008e8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e90:	f000 b918 	b.w	80090c4 <__malloc_unlock>
 8008e94:	42a3      	cmp	r3, r4
 8008e96:	d908      	bls.n	8008eaa <_free_r+0x46>
 8008e98:	6825      	ldr	r5, [r4, #0]
 8008e9a:	1961      	adds	r1, r4, r5
 8008e9c:	428b      	cmp	r3, r1
 8008e9e:	bf01      	itttt	eq
 8008ea0:	6819      	ldreq	r1, [r3, #0]
 8008ea2:	685b      	ldreq	r3, [r3, #4]
 8008ea4:	1949      	addeq	r1, r1, r5
 8008ea6:	6021      	streq	r1, [r4, #0]
 8008ea8:	e7ed      	b.n	8008e86 <_free_r+0x22>
 8008eaa:	461a      	mov	r2, r3
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	b10b      	cbz	r3, 8008eb4 <_free_r+0x50>
 8008eb0:	42a3      	cmp	r3, r4
 8008eb2:	d9fa      	bls.n	8008eaa <_free_r+0x46>
 8008eb4:	6811      	ldr	r1, [r2, #0]
 8008eb6:	1855      	adds	r5, r2, r1
 8008eb8:	42a5      	cmp	r5, r4
 8008eba:	d10b      	bne.n	8008ed4 <_free_r+0x70>
 8008ebc:	6824      	ldr	r4, [r4, #0]
 8008ebe:	4421      	add	r1, r4
 8008ec0:	1854      	adds	r4, r2, r1
 8008ec2:	42a3      	cmp	r3, r4
 8008ec4:	6011      	str	r1, [r2, #0]
 8008ec6:	d1e0      	bne.n	8008e8a <_free_r+0x26>
 8008ec8:	681c      	ldr	r4, [r3, #0]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	6053      	str	r3, [r2, #4]
 8008ece:	4421      	add	r1, r4
 8008ed0:	6011      	str	r1, [r2, #0]
 8008ed2:	e7da      	b.n	8008e8a <_free_r+0x26>
 8008ed4:	d902      	bls.n	8008edc <_free_r+0x78>
 8008ed6:	230c      	movs	r3, #12
 8008ed8:	6003      	str	r3, [r0, #0]
 8008eda:	e7d6      	b.n	8008e8a <_free_r+0x26>
 8008edc:	6825      	ldr	r5, [r4, #0]
 8008ede:	1961      	adds	r1, r4, r5
 8008ee0:	428b      	cmp	r3, r1
 8008ee2:	bf04      	itt	eq
 8008ee4:	6819      	ldreq	r1, [r3, #0]
 8008ee6:	685b      	ldreq	r3, [r3, #4]
 8008ee8:	6063      	str	r3, [r4, #4]
 8008eea:	bf04      	itt	eq
 8008eec:	1949      	addeq	r1, r1, r5
 8008eee:	6021      	streq	r1, [r4, #0]
 8008ef0:	6054      	str	r4, [r2, #4]
 8008ef2:	e7ca      	b.n	8008e8a <_free_r+0x26>
 8008ef4:	b003      	add	sp, #12
 8008ef6:	bd30      	pop	{r4, r5, pc}
 8008ef8:	20000900 	.word	0x20000900

08008efc <sbrk_aligned>:
 8008efc:	b570      	push	{r4, r5, r6, lr}
 8008efe:	4e0e      	ldr	r6, [pc, #56]	; (8008f38 <sbrk_aligned+0x3c>)
 8008f00:	460c      	mov	r4, r1
 8008f02:	6831      	ldr	r1, [r6, #0]
 8008f04:	4605      	mov	r5, r0
 8008f06:	b911      	cbnz	r1, 8008f0e <sbrk_aligned+0x12>
 8008f08:	f000 f88c 	bl	8009024 <_sbrk_r>
 8008f0c:	6030      	str	r0, [r6, #0]
 8008f0e:	4621      	mov	r1, r4
 8008f10:	4628      	mov	r0, r5
 8008f12:	f000 f887 	bl	8009024 <_sbrk_r>
 8008f16:	1c43      	adds	r3, r0, #1
 8008f18:	d00a      	beq.n	8008f30 <sbrk_aligned+0x34>
 8008f1a:	1cc4      	adds	r4, r0, #3
 8008f1c:	f024 0403 	bic.w	r4, r4, #3
 8008f20:	42a0      	cmp	r0, r4
 8008f22:	d007      	beq.n	8008f34 <sbrk_aligned+0x38>
 8008f24:	1a21      	subs	r1, r4, r0
 8008f26:	4628      	mov	r0, r5
 8008f28:	f000 f87c 	bl	8009024 <_sbrk_r>
 8008f2c:	3001      	adds	r0, #1
 8008f2e:	d101      	bne.n	8008f34 <sbrk_aligned+0x38>
 8008f30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008f34:	4620      	mov	r0, r4
 8008f36:	bd70      	pop	{r4, r5, r6, pc}
 8008f38:	20000904 	.word	0x20000904

08008f3c <_malloc_r>:
 8008f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f40:	1ccd      	adds	r5, r1, #3
 8008f42:	f025 0503 	bic.w	r5, r5, #3
 8008f46:	3508      	adds	r5, #8
 8008f48:	2d0c      	cmp	r5, #12
 8008f4a:	bf38      	it	cc
 8008f4c:	250c      	movcc	r5, #12
 8008f4e:	2d00      	cmp	r5, #0
 8008f50:	4607      	mov	r7, r0
 8008f52:	db01      	blt.n	8008f58 <_malloc_r+0x1c>
 8008f54:	42a9      	cmp	r1, r5
 8008f56:	d905      	bls.n	8008f64 <_malloc_r+0x28>
 8008f58:	230c      	movs	r3, #12
 8008f5a:	603b      	str	r3, [r7, #0]
 8008f5c:	2600      	movs	r6, #0
 8008f5e:	4630      	mov	r0, r6
 8008f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f64:	4e2e      	ldr	r6, [pc, #184]	; (8009020 <_malloc_r+0xe4>)
 8008f66:	f000 f8a7 	bl	80090b8 <__malloc_lock>
 8008f6a:	6833      	ldr	r3, [r6, #0]
 8008f6c:	461c      	mov	r4, r3
 8008f6e:	bb34      	cbnz	r4, 8008fbe <_malloc_r+0x82>
 8008f70:	4629      	mov	r1, r5
 8008f72:	4638      	mov	r0, r7
 8008f74:	f7ff ffc2 	bl	8008efc <sbrk_aligned>
 8008f78:	1c43      	adds	r3, r0, #1
 8008f7a:	4604      	mov	r4, r0
 8008f7c:	d14d      	bne.n	800901a <_malloc_r+0xde>
 8008f7e:	6834      	ldr	r4, [r6, #0]
 8008f80:	4626      	mov	r6, r4
 8008f82:	2e00      	cmp	r6, #0
 8008f84:	d140      	bne.n	8009008 <_malloc_r+0xcc>
 8008f86:	6823      	ldr	r3, [r4, #0]
 8008f88:	4631      	mov	r1, r6
 8008f8a:	4638      	mov	r0, r7
 8008f8c:	eb04 0803 	add.w	r8, r4, r3
 8008f90:	f000 f848 	bl	8009024 <_sbrk_r>
 8008f94:	4580      	cmp	r8, r0
 8008f96:	d13a      	bne.n	800900e <_malloc_r+0xd2>
 8008f98:	6821      	ldr	r1, [r4, #0]
 8008f9a:	3503      	adds	r5, #3
 8008f9c:	1a6d      	subs	r5, r5, r1
 8008f9e:	f025 0503 	bic.w	r5, r5, #3
 8008fa2:	3508      	adds	r5, #8
 8008fa4:	2d0c      	cmp	r5, #12
 8008fa6:	bf38      	it	cc
 8008fa8:	250c      	movcc	r5, #12
 8008faa:	4629      	mov	r1, r5
 8008fac:	4638      	mov	r0, r7
 8008fae:	f7ff ffa5 	bl	8008efc <sbrk_aligned>
 8008fb2:	3001      	adds	r0, #1
 8008fb4:	d02b      	beq.n	800900e <_malloc_r+0xd2>
 8008fb6:	6823      	ldr	r3, [r4, #0]
 8008fb8:	442b      	add	r3, r5
 8008fba:	6023      	str	r3, [r4, #0]
 8008fbc:	e00e      	b.n	8008fdc <_malloc_r+0xa0>
 8008fbe:	6822      	ldr	r2, [r4, #0]
 8008fc0:	1b52      	subs	r2, r2, r5
 8008fc2:	d41e      	bmi.n	8009002 <_malloc_r+0xc6>
 8008fc4:	2a0b      	cmp	r2, #11
 8008fc6:	d916      	bls.n	8008ff6 <_malloc_r+0xba>
 8008fc8:	1961      	adds	r1, r4, r5
 8008fca:	42a3      	cmp	r3, r4
 8008fcc:	6025      	str	r5, [r4, #0]
 8008fce:	bf18      	it	ne
 8008fd0:	6059      	strne	r1, [r3, #4]
 8008fd2:	6863      	ldr	r3, [r4, #4]
 8008fd4:	bf08      	it	eq
 8008fd6:	6031      	streq	r1, [r6, #0]
 8008fd8:	5162      	str	r2, [r4, r5]
 8008fda:	604b      	str	r3, [r1, #4]
 8008fdc:	4638      	mov	r0, r7
 8008fde:	f104 060b 	add.w	r6, r4, #11
 8008fe2:	f000 f86f 	bl	80090c4 <__malloc_unlock>
 8008fe6:	f026 0607 	bic.w	r6, r6, #7
 8008fea:	1d23      	adds	r3, r4, #4
 8008fec:	1af2      	subs	r2, r6, r3
 8008fee:	d0b6      	beq.n	8008f5e <_malloc_r+0x22>
 8008ff0:	1b9b      	subs	r3, r3, r6
 8008ff2:	50a3      	str	r3, [r4, r2]
 8008ff4:	e7b3      	b.n	8008f5e <_malloc_r+0x22>
 8008ff6:	6862      	ldr	r2, [r4, #4]
 8008ff8:	42a3      	cmp	r3, r4
 8008ffa:	bf0c      	ite	eq
 8008ffc:	6032      	streq	r2, [r6, #0]
 8008ffe:	605a      	strne	r2, [r3, #4]
 8009000:	e7ec      	b.n	8008fdc <_malloc_r+0xa0>
 8009002:	4623      	mov	r3, r4
 8009004:	6864      	ldr	r4, [r4, #4]
 8009006:	e7b2      	b.n	8008f6e <_malloc_r+0x32>
 8009008:	4634      	mov	r4, r6
 800900a:	6876      	ldr	r6, [r6, #4]
 800900c:	e7b9      	b.n	8008f82 <_malloc_r+0x46>
 800900e:	230c      	movs	r3, #12
 8009010:	603b      	str	r3, [r7, #0]
 8009012:	4638      	mov	r0, r7
 8009014:	f000 f856 	bl	80090c4 <__malloc_unlock>
 8009018:	e7a1      	b.n	8008f5e <_malloc_r+0x22>
 800901a:	6025      	str	r5, [r4, #0]
 800901c:	e7de      	b.n	8008fdc <_malloc_r+0xa0>
 800901e:	bf00      	nop
 8009020:	20000900 	.word	0x20000900

08009024 <_sbrk_r>:
 8009024:	b538      	push	{r3, r4, r5, lr}
 8009026:	4d06      	ldr	r5, [pc, #24]	; (8009040 <_sbrk_r+0x1c>)
 8009028:	2300      	movs	r3, #0
 800902a:	4604      	mov	r4, r0
 800902c:	4608      	mov	r0, r1
 800902e:	602b      	str	r3, [r5, #0]
 8009030:	f7f9 f8fa 	bl	8002228 <_sbrk>
 8009034:	1c43      	adds	r3, r0, #1
 8009036:	d102      	bne.n	800903e <_sbrk_r+0x1a>
 8009038:	682b      	ldr	r3, [r5, #0]
 800903a:	b103      	cbz	r3, 800903e <_sbrk_r+0x1a>
 800903c:	6023      	str	r3, [r4, #0]
 800903e:	bd38      	pop	{r3, r4, r5, pc}
 8009040:	20000908 	.word	0x20000908

08009044 <_vsniprintf_r>:
 8009044:	b530      	push	{r4, r5, lr}
 8009046:	4614      	mov	r4, r2
 8009048:	2c00      	cmp	r4, #0
 800904a:	b09b      	sub	sp, #108	; 0x6c
 800904c:	4605      	mov	r5, r0
 800904e:	461a      	mov	r2, r3
 8009050:	da05      	bge.n	800905e <_vsniprintf_r+0x1a>
 8009052:	238b      	movs	r3, #139	; 0x8b
 8009054:	6003      	str	r3, [r0, #0]
 8009056:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800905a:	b01b      	add	sp, #108	; 0x6c
 800905c:	bd30      	pop	{r4, r5, pc}
 800905e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009062:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009066:	bf14      	ite	ne
 8009068:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800906c:	4623      	moveq	r3, r4
 800906e:	9302      	str	r3, [sp, #8]
 8009070:	9305      	str	r3, [sp, #20]
 8009072:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009076:	9100      	str	r1, [sp, #0]
 8009078:	9104      	str	r1, [sp, #16]
 800907a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800907e:	4669      	mov	r1, sp
 8009080:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009082:	f000 f881 	bl	8009188 <_svfiprintf_r>
 8009086:	1c43      	adds	r3, r0, #1
 8009088:	bfbc      	itt	lt
 800908a:	238b      	movlt	r3, #139	; 0x8b
 800908c:	602b      	strlt	r3, [r5, #0]
 800908e:	2c00      	cmp	r4, #0
 8009090:	d0e3      	beq.n	800905a <_vsniprintf_r+0x16>
 8009092:	9b00      	ldr	r3, [sp, #0]
 8009094:	2200      	movs	r2, #0
 8009096:	701a      	strb	r2, [r3, #0]
 8009098:	e7df      	b.n	800905a <_vsniprintf_r+0x16>
	...

0800909c <vsniprintf>:
 800909c:	b507      	push	{r0, r1, r2, lr}
 800909e:	9300      	str	r3, [sp, #0]
 80090a0:	4613      	mov	r3, r2
 80090a2:	460a      	mov	r2, r1
 80090a4:	4601      	mov	r1, r0
 80090a6:	4803      	ldr	r0, [pc, #12]	; (80090b4 <vsniprintf+0x18>)
 80090a8:	6800      	ldr	r0, [r0, #0]
 80090aa:	f7ff ffcb 	bl	8009044 <_vsniprintf_r>
 80090ae:	b003      	add	sp, #12
 80090b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80090b4:	20000030 	.word	0x20000030

080090b8 <__malloc_lock>:
 80090b8:	4801      	ldr	r0, [pc, #4]	; (80090c0 <__malloc_lock+0x8>)
 80090ba:	f000 baf9 	b.w	80096b0 <__retarget_lock_acquire_recursive>
 80090be:	bf00      	nop
 80090c0:	2000090c 	.word	0x2000090c

080090c4 <__malloc_unlock>:
 80090c4:	4801      	ldr	r0, [pc, #4]	; (80090cc <__malloc_unlock+0x8>)
 80090c6:	f000 baf4 	b.w	80096b2 <__retarget_lock_release_recursive>
 80090ca:	bf00      	nop
 80090cc:	2000090c 	.word	0x2000090c

080090d0 <__ssputs_r>:
 80090d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090d4:	688e      	ldr	r6, [r1, #8]
 80090d6:	429e      	cmp	r6, r3
 80090d8:	4682      	mov	sl, r0
 80090da:	460c      	mov	r4, r1
 80090dc:	4690      	mov	r8, r2
 80090de:	461f      	mov	r7, r3
 80090e0:	d838      	bhi.n	8009154 <__ssputs_r+0x84>
 80090e2:	898a      	ldrh	r2, [r1, #12]
 80090e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80090e8:	d032      	beq.n	8009150 <__ssputs_r+0x80>
 80090ea:	6825      	ldr	r5, [r4, #0]
 80090ec:	6909      	ldr	r1, [r1, #16]
 80090ee:	eba5 0901 	sub.w	r9, r5, r1
 80090f2:	6965      	ldr	r5, [r4, #20]
 80090f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090fc:	3301      	adds	r3, #1
 80090fe:	444b      	add	r3, r9
 8009100:	106d      	asrs	r5, r5, #1
 8009102:	429d      	cmp	r5, r3
 8009104:	bf38      	it	cc
 8009106:	461d      	movcc	r5, r3
 8009108:	0553      	lsls	r3, r2, #21
 800910a:	d531      	bpl.n	8009170 <__ssputs_r+0xa0>
 800910c:	4629      	mov	r1, r5
 800910e:	f7ff ff15 	bl	8008f3c <_malloc_r>
 8009112:	4606      	mov	r6, r0
 8009114:	b950      	cbnz	r0, 800912c <__ssputs_r+0x5c>
 8009116:	230c      	movs	r3, #12
 8009118:	f8ca 3000 	str.w	r3, [sl]
 800911c:	89a3      	ldrh	r3, [r4, #12]
 800911e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009122:	81a3      	strh	r3, [r4, #12]
 8009124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800912c:	6921      	ldr	r1, [r4, #16]
 800912e:	464a      	mov	r2, r9
 8009130:	f000 fac0 	bl	80096b4 <memcpy>
 8009134:	89a3      	ldrh	r3, [r4, #12]
 8009136:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800913a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800913e:	81a3      	strh	r3, [r4, #12]
 8009140:	6126      	str	r6, [r4, #16]
 8009142:	6165      	str	r5, [r4, #20]
 8009144:	444e      	add	r6, r9
 8009146:	eba5 0509 	sub.w	r5, r5, r9
 800914a:	6026      	str	r6, [r4, #0]
 800914c:	60a5      	str	r5, [r4, #8]
 800914e:	463e      	mov	r6, r7
 8009150:	42be      	cmp	r6, r7
 8009152:	d900      	bls.n	8009156 <__ssputs_r+0x86>
 8009154:	463e      	mov	r6, r7
 8009156:	6820      	ldr	r0, [r4, #0]
 8009158:	4632      	mov	r2, r6
 800915a:	4641      	mov	r1, r8
 800915c:	f000 fab8 	bl	80096d0 <memmove>
 8009160:	68a3      	ldr	r3, [r4, #8]
 8009162:	1b9b      	subs	r3, r3, r6
 8009164:	60a3      	str	r3, [r4, #8]
 8009166:	6823      	ldr	r3, [r4, #0]
 8009168:	4433      	add	r3, r6
 800916a:	6023      	str	r3, [r4, #0]
 800916c:	2000      	movs	r0, #0
 800916e:	e7db      	b.n	8009128 <__ssputs_r+0x58>
 8009170:	462a      	mov	r2, r5
 8009172:	f000 fac7 	bl	8009704 <_realloc_r>
 8009176:	4606      	mov	r6, r0
 8009178:	2800      	cmp	r0, #0
 800917a:	d1e1      	bne.n	8009140 <__ssputs_r+0x70>
 800917c:	6921      	ldr	r1, [r4, #16]
 800917e:	4650      	mov	r0, sl
 8009180:	f7ff fe70 	bl	8008e64 <_free_r>
 8009184:	e7c7      	b.n	8009116 <__ssputs_r+0x46>
	...

08009188 <_svfiprintf_r>:
 8009188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800918c:	4698      	mov	r8, r3
 800918e:	898b      	ldrh	r3, [r1, #12]
 8009190:	061b      	lsls	r3, r3, #24
 8009192:	b09d      	sub	sp, #116	; 0x74
 8009194:	4607      	mov	r7, r0
 8009196:	460d      	mov	r5, r1
 8009198:	4614      	mov	r4, r2
 800919a:	d50e      	bpl.n	80091ba <_svfiprintf_r+0x32>
 800919c:	690b      	ldr	r3, [r1, #16]
 800919e:	b963      	cbnz	r3, 80091ba <_svfiprintf_r+0x32>
 80091a0:	2140      	movs	r1, #64	; 0x40
 80091a2:	f7ff fecb 	bl	8008f3c <_malloc_r>
 80091a6:	6028      	str	r0, [r5, #0]
 80091a8:	6128      	str	r0, [r5, #16]
 80091aa:	b920      	cbnz	r0, 80091b6 <_svfiprintf_r+0x2e>
 80091ac:	230c      	movs	r3, #12
 80091ae:	603b      	str	r3, [r7, #0]
 80091b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091b4:	e0d1      	b.n	800935a <_svfiprintf_r+0x1d2>
 80091b6:	2340      	movs	r3, #64	; 0x40
 80091b8:	616b      	str	r3, [r5, #20]
 80091ba:	2300      	movs	r3, #0
 80091bc:	9309      	str	r3, [sp, #36]	; 0x24
 80091be:	2320      	movs	r3, #32
 80091c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80091c8:	2330      	movs	r3, #48	; 0x30
 80091ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009374 <_svfiprintf_r+0x1ec>
 80091ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091d2:	f04f 0901 	mov.w	r9, #1
 80091d6:	4623      	mov	r3, r4
 80091d8:	469a      	mov	sl, r3
 80091da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091de:	b10a      	cbz	r2, 80091e4 <_svfiprintf_r+0x5c>
 80091e0:	2a25      	cmp	r2, #37	; 0x25
 80091e2:	d1f9      	bne.n	80091d8 <_svfiprintf_r+0x50>
 80091e4:	ebba 0b04 	subs.w	fp, sl, r4
 80091e8:	d00b      	beq.n	8009202 <_svfiprintf_r+0x7a>
 80091ea:	465b      	mov	r3, fp
 80091ec:	4622      	mov	r2, r4
 80091ee:	4629      	mov	r1, r5
 80091f0:	4638      	mov	r0, r7
 80091f2:	f7ff ff6d 	bl	80090d0 <__ssputs_r>
 80091f6:	3001      	adds	r0, #1
 80091f8:	f000 80aa 	beq.w	8009350 <_svfiprintf_r+0x1c8>
 80091fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091fe:	445a      	add	r2, fp
 8009200:	9209      	str	r2, [sp, #36]	; 0x24
 8009202:	f89a 3000 	ldrb.w	r3, [sl]
 8009206:	2b00      	cmp	r3, #0
 8009208:	f000 80a2 	beq.w	8009350 <_svfiprintf_r+0x1c8>
 800920c:	2300      	movs	r3, #0
 800920e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009212:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009216:	f10a 0a01 	add.w	sl, sl, #1
 800921a:	9304      	str	r3, [sp, #16]
 800921c:	9307      	str	r3, [sp, #28]
 800921e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009222:	931a      	str	r3, [sp, #104]	; 0x68
 8009224:	4654      	mov	r4, sl
 8009226:	2205      	movs	r2, #5
 8009228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800922c:	4851      	ldr	r0, [pc, #324]	; (8009374 <_svfiprintf_r+0x1ec>)
 800922e:	f7f6 ffd7 	bl	80001e0 <memchr>
 8009232:	9a04      	ldr	r2, [sp, #16]
 8009234:	b9d8      	cbnz	r0, 800926e <_svfiprintf_r+0xe6>
 8009236:	06d0      	lsls	r0, r2, #27
 8009238:	bf44      	itt	mi
 800923a:	2320      	movmi	r3, #32
 800923c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009240:	0711      	lsls	r1, r2, #28
 8009242:	bf44      	itt	mi
 8009244:	232b      	movmi	r3, #43	; 0x2b
 8009246:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800924a:	f89a 3000 	ldrb.w	r3, [sl]
 800924e:	2b2a      	cmp	r3, #42	; 0x2a
 8009250:	d015      	beq.n	800927e <_svfiprintf_r+0xf6>
 8009252:	9a07      	ldr	r2, [sp, #28]
 8009254:	4654      	mov	r4, sl
 8009256:	2000      	movs	r0, #0
 8009258:	f04f 0c0a 	mov.w	ip, #10
 800925c:	4621      	mov	r1, r4
 800925e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009262:	3b30      	subs	r3, #48	; 0x30
 8009264:	2b09      	cmp	r3, #9
 8009266:	d94e      	bls.n	8009306 <_svfiprintf_r+0x17e>
 8009268:	b1b0      	cbz	r0, 8009298 <_svfiprintf_r+0x110>
 800926a:	9207      	str	r2, [sp, #28]
 800926c:	e014      	b.n	8009298 <_svfiprintf_r+0x110>
 800926e:	eba0 0308 	sub.w	r3, r0, r8
 8009272:	fa09 f303 	lsl.w	r3, r9, r3
 8009276:	4313      	orrs	r3, r2
 8009278:	9304      	str	r3, [sp, #16]
 800927a:	46a2      	mov	sl, r4
 800927c:	e7d2      	b.n	8009224 <_svfiprintf_r+0x9c>
 800927e:	9b03      	ldr	r3, [sp, #12]
 8009280:	1d19      	adds	r1, r3, #4
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	9103      	str	r1, [sp, #12]
 8009286:	2b00      	cmp	r3, #0
 8009288:	bfbb      	ittet	lt
 800928a:	425b      	neglt	r3, r3
 800928c:	f042 0202 	orrlt.w	r2, r2, #2
 8009290:	9307      	strge	r3, [sp, #28]
 8009292:	9307      	strlt	r3, [sp, #28]
 8009294:	bfb8      	it	lt
 8009296:	9204      	strlt	r2, [sp, #16]
 8009298:	7823      	ldrb	r3, [r4, #0]
 800929a:	2b2e      	cmp	r3, #46	; 0x2e
 800929c:	d10c      	bne.n	80092b8 <_svfiprintf_r+0x130>
 800929e:	7863      	ldrb	r3, [r4, #1]
 80092a0:	2b2a      	cmp	r3, #42	; 0x2a
 80092a2:	d135      	bne.n	8009310 <_svfiprintf_r+0x188>
 80092a4:	9b03      	ldr	r3, [sp, #12]
 80092a6:	1d1a      	adds	r2, r3, #4
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	9203      	str	r2, [sp, #12]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	bfb8      	it	lt
 80092b0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80092b4:	3402      	adds	r4, #2
 80092b6:	9305      	str	r3, [sp, #20]
 80092b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009384 <_svfiprintf_r+0x1fc>
 80092bc:	7821      	ldrb	r1, [r4, #0]
 80092be:	2203      	movs	r2, #3
 80092c0:	4650      	mov	r0, sl
 80092c2:	f7f6 ff8d 	bl	80001e0 <memchr>
 80092c6:	b140      	cbz	r0, 80092da <_svfiprintf_r+0x152>
 80092c8:	2340      	movs	r3, #64	; 0x40
 80092ca:	eba0 000a 	sub.w	r0, r0, sl
 80092ce:	fa03 f000 	lsl.w	r0, r3, r0
 80092d2:	9b04      	ldr	r3, [sp, #16]
 80092d4:	4303      	orrs	r3, r0
 80092d6:	3401      	adds	r4, #1
 80092d8:	9304      	str	r3, [sp, #16]
 80092da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092de:	4826      	ldr	r0, [pc, #152]	; (8009378 <_svfiprintf_r+0x1f0>)
 80092e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092e4:	2206      	movs	r2, #6
 80092e6:	f7f6 ff7b 	bl	80001e0 <memchr>
 80092ea:	2800      	cmp	r0, #0
 80092ec:	d038      	beq.n	8009360 <_svfiprintf_r+0x1d8>
 80092ee:	4b23      	ldr	r3, [pc, #140]	; (800937c <_svfiprintf_r+0x1f4>)
 80092f0:	bb1b      	cbnz	r3, 800933a <_svfiprintf_r+0x1b2>
 80092f2:	9b03      	ldr	r3, [sp, #12]
 80092f4:	3307      	adds	r3, #7
 80092f6:	f023 0307 	bic.w	r3, r3, #7
 80092fa:	3308      	adds	r3, #8
 80092fc:	9303      	str	r3, [sp, #12]
 80092fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009300:	4433      	add	r3, r6
 8009302:	9309      	str	r3, [sp, #36]	; 0x24
 8009304:	e767      	b.n	80091d6 <_svfiprintf_r+0x4e>
 8009306:	fb0c 3202 	mla	r2, ip, r2, r3
 800930a:	460c      	mov	r4, r1
 800930c:	2001      	movs	r0, #1
 800930e:	e7a5      	b.n	800925c <_svfiprintf_r+0xd4>
 8009310:	2300      	movs	r3, #0
 8009312:	3401      	adds	r4, #1
 8009314:	9305      	str	r3, [sp, #20]
 8009316:	4619      	mov	r1, r3
 8009318:	f04f 0c0a 	mov.w	ip, #10
 800931c:	4620      	mov	r0, r4
 800931e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009322:	3a30      	subs	r2, #48	; 0x30
 8009324:	2a09      	cmp	r2, #9
 8009326:	d903      	bls.n	8009330 <_svfiprintf_r+0x1a8>
 8009328:	2b00      	cmp	r3, #0
 800932a:	d0c5      	beq.n	80092b8 <_svfiprintf_r+0x130>
 800932c:	9105      	str	r1, [sp, #20]
 800932e:	e7c3      	b.n	80092b8 <_svfiprintf_r+0x130>
 8009330:	fb0c 2101 	mla	r1, ip, r1, r2
 8009334:	4604      	mov	r4, r0
 8009336:	2301      	movs	r3, #1
 8009338:	e7f0      	b.n	800931c <_svfiprintf_r+0x194>
 800933a:	ab03      	add	r3, sp, #12
 800933c:	9300      	str	r3, [sp, #0]
 800933e:	462a      	mov	r2, r5
 8009340:	4b0f      	ldr	r3, [pc, #60]	; (8009380 <_svfiprintf_r+0x1f8>)
 8009342:	a904      	add	r1, sp, #16
 8009344:	4638      	mov	r0, r7
 8009346:	f3af 8000 	nop.w
 800934a:	1c42      	adds	r2, r0, #1
 800934c:	4606      	mov	r6, r0
 800934e:	d1d6      	bne.n	80092fe <_svfiprintf_r+0x176>
 8009350:	89ab      	ldrh	r3, [r5, #12]
 8009352:	065b      	lsls	r3, r3, #25
 8009354:	f53f af2c 	bmi.w	80091b0 <_svfiprintf_r+0x28>
 8009358:	9809      	ldr	r0, [sp, #36]	; 0x24
 800935a:	b01d      	add	sp, #116	; 0x74
 800935c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009360:	ab03      	add	r3, sp, #12
 8009362:	9300      	str	r3, [sp, #0]
 8009364:	462a      	mov	r2, r5
 8009366:	4b06      	ldr	r3, [pc, #24]	; (8009380 <_svfiprintf_r+0x1f8>)
 8009368:	a904      	add	r1, sp, #16
 800936a:	4638      	mov	r0, r7
 800936c:	f000 f87a 	bl	8009464 <_printf_i>
 8009370:	e7eb      	b.n	800934a <_svfiprintf_r+0x1c2>
 8009372:	bf00      	nop
 8009374:	08009f79 	.word	0x08009f79
 8009378:	08009f83 	.word	0x08009f83
 800937c:	00000000 	.word	0x00000000
 8009380:	080090d1 	.word	0x080090d1
 8009384:	08009f7f 	.word	0x08009f7f

08009388 <_printf_common>:
 8009388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800938c:	4616      	mov	r6, r2
 800938e:	4699      	mov	r9, r3
 8009390:	688a      	ldr	r2, [r1, #8]
 8009392:	690b      	ldr	r3, [r1, #16]
 8009394:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009398:	4293      	cmp	r3, r2
 800939a:	bfb8      	it	lt
 800939c:	4613      	movlt	r3, r2
 800939e:	6033      	str	r3, [r6, #0]
 80093a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093a4:	4607      	mov	r7, r0
 80093a6:	460c      	mov	r4, r1
 80093a8:	b10a      	cbz	r2, 80093ae <_printf_common+0x26>
 80093aa:	3301      	adds	r3, #1
 80093ac:	6033      	str	r3, [r6, #0]
 80093ae:	6823      	ldr	r3, [r4, #0]
 80093b0:	0699      	lsls	r1, r3, #26
 80093b2:	bf42      	ittt	mi
 80093b4:	6833      	ldrmi	r3, [r6, #0]
 80093b6:	3302      	addmi	r3, #2
 80093b8:	6033      	strmi	r3, [r6, #0]
 80093ba:	6825      	ldr	r5, [r4, #0]
 80093bc:	f015 0506 	ands.w	r5, r5, #6
 80093c0:	d106      	bne.n	80093d0 <_printf_common+0x48>
 80093c2:	f104 0a19 	add.w	sl, r4, #25
 80093c6:	68e3      	ldr	r3, [r4, #12]
 80093c8:	6832      	ldr	r2, [r6, #0]
 80093ca:	1a9b      	subs	r3, r3, r2
 80093cc:	42ab      	cmp	r3, r5
 80093ce:	dc26      	bgt.n	800941e <_printf_common+0x96>
 80093d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80093d4:	1e13      	subs	r3, r2, #0
 80093d6:	6822      	ldr	r2, [r4, #0]
 80093d8:	bf18      	it	ne
 80093da:	2301      	movne	r3, #1
 80093dc:	0692      	lsls	r2, r2, #26
 80093de:	d42b      	bmi.n	8009438 <_printf_common+0xb0>
 80093e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093e4:	4649      	mov	r1, r9
 80093e6:	4638      	mov	r0, r7
 80093e8:	47c0      	blx	r8
 80093ea:	3001      	adds	r0, #1
 80093ec:	d01e      	beq.n	800942c <_printf_common+0xa4>
 80093ee:	6823      	ldr	r3, [r4, #0]
 80093f0:	68e5      	ldr	r5, [r4, #12]
 80093f2:	6832      	ldr	r2, [r6, #0]
 80093f4:	f003 0306 	and.w	r3, r3, #6
 80093f8:	2b04      	cmp	r3, #4
 80093fa:	bf08      	it	eq
 80093fc:	1aad      	subeq	r5, r5, r2
 80093fe:	68a3      	ldr	r3, [r4, #8]
 8009400:	6922      	ldr	r2, [r4, #16]
 8009402:	bf0c      	ite	eq
 8009404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009408:	2500      	movne	r5, #0
 800940a:	4293      	cmp	r3, r2
 800940c:	bfc4      	itt	gt
 800940e:	1a9b      	subgt	r3, r3, r2
 8009410:	18ed      	addgt	r5, r5, r3
 8009412:	2600      	movs	r6, #0
 8009414:	341a      	adds	r4, #26
 8009416:	42b5      	cmp	r5, r6
 8009418:	d11a      	bne.n	8009450 <_printf_common+0xc8>
 800941a:	2000      	movs	r0, #0
 800941c:	e008      	b.n	8009430 <_printf_common+0xa8>
 800941e:	2301      	movs	r3, #1
 8009420:	4652      	mov	r2, sl
 8009422:	4649      	mov	r1, r9
 8009424:	4638      	mov	r0, r7
 8009426:	47c0      	blx	r8
 8009428:	3001      	adds	r0, #1
 800942a:	d103      	bne.n	8009434 <_printf_common+0xac>
 800942c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009434:	3501      	adds	r5, #1
 8009436:	e7c6      	b.n	80093c6 <_printf_common+0x3e>
 8009438:	18e1      	adds	r1, r4, r3
 800943a:	1c5a      	adds	r2, r3, #1
 800943c:	2030      	movs	r0, #48	; 0x30
 800943e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009442:	4422      	add	r2, r4
 8009444:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009448:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800944c:	3302      	adds	r3, #2
 800944e:	e7c7      	b.n	80093e0 <_printf_common+0x58>
 8009450:	2301      	movs	r3, #1
 8009452:	4622      	mov	r2, r4
 8009454:	4649      	mov	r1, r9
 8009456:	4638      	mov	r0, r7
 8009458:	47c0      	blx	r8
 800945a:	3001      	adds	r0, #1
 800945c:	d0e6      	beq.n	800942c <_printf_common+0xa4>
 800945e:	3601      	adds	r6, #1
 8009460:	e7d9      	b.n	8009416 <_printf_common+0x8e>
	...

08009464 <_printf_i>:
 8009464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009468:	7e0f      	ldrb	r7, [r1, #24]
 800946a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800946c:	2f78      	cmp	r7, #120	; 0x78
 800946e:	4691      	mov	r9, r2
 8009470:	4680      	mov	r8, r0
 8009472:	460c      	mov	r4, r1
 8009474:	469a      	mov	sl, r3
 8009476:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800947a:	d807      	bhi.n	800948c <_printf_i+0x28>
 800947c:	2f62      	cmp	r7, #98	; 0x62
 800947e:	d80a      	bhi.n	8009496 <_printf_i+0x32>
 8009480:	2f00      	cmp	r7, #0
 8009482:	f000 80d8 	beq.w	8009636 <_printf_i+0x1d2>
 8009486:	2f58      	cmp	r7, #88	; 0x58
 8009488:	f000 80a3 	beq.w	80095d2 <_printf_i+0x16e>
 800948c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009490:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009494:	e03a      	b.n	800950c <_printf_i+0xa8>
 8009496:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800949a:	2b15      	cmp	r3, #21
 800949c:	d8f6      	bhi.n	800948c <_printf_i+0x28>
 800949e:	a101      	add	r1, pc, #4	; (adr r1, 80094a4 <_printf_i+0x40>)
 80094a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094a4:	080094fd 	.word	0x080094fd
 80094a8:	08009511 	.word	0x08009511
 80094ac:	0800948d 	.word	0x0800948d
 80094b0:	0800948d 	.word	0x0800948d
 80094b4:	0800948d 	.word	0x0800948d
 80094b8:	0800948d 	.word	0x0800948d
 80094bc:	08009511 	.word	0x08009511
 80094c0:	0800948d 	.word	0x0800948d
 80094c4:	0800948d 	.word	0x0800948d
 80094c8:	0800948d 	.word	0x0800948d
 80094cc:	0800948d 	.word	0x0800948d
 80094d0:	0800961d 	.word	0x0800961d
 80094d4:	08009541 	.word	0x08009541
 80094d8:	080095ff 	.word	0x080095ff
 80094dc:	0800948d 	.word	0x0800948d
 80094e0:	0800948d 	.word	0x0800948d
 80094e4:	0800963f 	.word	0x0800963f
 80094e8:	0800948d 	.word	0x0800948d
 80094ec:	08009541 	.word	0x08009541
 80094f0:	0800948d 	.word	0x0800948d
 80094f4:	0800948d 	.word	0x0800948d
 80094f8:	08009607 	.word	0x08009607
 80094fc:	682b      	ldr	r3, [r5, #0]
 80094fe:	1d1a      	adds	r2, r3, #4
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	602a      	str	r2, [r5, #0]
 8009504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009508:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800950c:	2301      	movs	r3, #1
 800950e:	e0a3      	b.n	8009658 <_printf_i+0x1f4>
 8009510:	6820      	ldr	r0, [r4, #0]
 8009512:	6829      	ldr	r1, [r5, #0]
 8009514:	0606      	lsls	r6, r0, #24
 8009516:	f101 0304 	add.w	r3, r1, #4
 800951a:	d50a      	bpl.n	8009532 <_printf_i+0xce>
 800951c:	680e      	ldr	r6, [r1, #0]
 800951e:	602b      	str	r3, [r5, #0]
 8009520:	2e00      	cmp	r6, #0
 8009522:	da03      	bge.n	800952c <_printf_i+0xc8>
 8009524:	232d      	movs	r3, #45	; 0x2d
 8009526:	4276      	negs	r6, r6
 8009528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800952c:	485e      	ldr	r0, [pc, #376]	; (80096a8 <_printf_i+0x244>)
 800952e:	230a      	movs	r3, #10
 8009530:	e019      	b.n	8009566 <_printf_i+0x102>
 8009532:	680e      	ldr	r6, [r1, #0]
 8009534:	602b      	str	r3, [r5, #0]
 8009536:	f010 0f40 	tst.w	r0, #64	; 0x40
 800953a:	bf18      	it	ne
 800953c:	b236      	sxthne	r6, r6
 800953e:	e7ef      	b.n	8009520 <_printf_i+0xbc>
 8009540:	682b      	ldr	r3, [r5, #0]
 8009542:	6820      	ldr	r0, [r4, #0]
 8009544:	1d19      	adds	r1, r3, #4
 8009546:	6029      	str	r1, [r5, #0]
 8009548:	0601      	lsls	r1, r0, #24
 800954a:	d501      	bpl.n	8009550 <_printf_i+0xec>
 800954c:	681e      	ldr	r6, [r3, #0]
 800954e:	e002      	b.n	8009556 <_printf_i+0xf2>
 8009550:	0646      	lsls	r6, r0, #25
 8009552:	d5fb      	bpl.n	800954c <_printf_i+0xe8>
 8009554:	881e      	ldrh	r6, [r3, #0]
 8009556:	4854      	ldr	r0, [pc, #336]	; (80096a8 <_printf_i+0x244>)
 8009558:	2f6f      	cmp	r7, #111	; 0x6f
 800955a:	bf0c      	ite	eq
 800955c:	2308      	moveq	r3, #8
 800955e:	230a      	movne	r3, #10
 8009560:	2100      	movs	r1, #0
 8009562:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009566:	6865      	ldr	r5, [r4, #4]
 8009568:	60a5      	str	r5, [r4, #8]
 800956a:	2d00      	cmp	r5, #0
 800956c:	bfa2      	ittt	ge
 800956e:	6821      	ldrge	r1, [r4, #0]
 8009570:	f021 0104 	bicge.w	r1, r1, #4
 8009574:	6021      	strge	r1, [r4, #0]
 8009576:	b90e      	cbnz	r6, 800957c <_printf_i+0x118>
 8009578:	2d00      	cmp	r5, #0
 800957a:	d04d      	beq.n	8009618 <_printf_i+0x1b4>
 800957c:	4615      	mov	r5, r2
 800957e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009582:	fb03 6711 	mls	r7, r3, r1, r6
 8009586:	5dc7      	ldrb	r7, [r0, r7]
 8009588:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800958c:	4637      	mov	r7, r6
 800958e:	42bb      	cmp	r3, r7
 8009590:	460e      	mov	r6, r1
 8009592:	d9f4      	bls.n	800957e <_printf_i+0x11a>
 8009594:	2b08      	cmp	r3, #8
 8009596:	d10b      	bne.n	80095b0 <_printf_i+0x14c>
 8009598:	6823      	ldr	r3, [r4, #0]
 800959a:	07de      	lsls	r6, r3, #31
 800959c:	d508      	bpl.n	80095b0 <_printf_i+0x14c>
 800959e:	6923      	ldr	r3, [r4, #16]
 80095a0:	6861      	ldr	r1, [r4, #4]
 80095a2:	4299      	cmp	r1, r3
 80095a4:	bfde      	ittt	le
 80095a6:	2330      	movle	r3, #48	; 0x30
 80095a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80095ac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80095b0:	1b52      	subs	r2, r2, r5
 80095b2:	6122      	str	r2, [r4, #16]
 80095b4:	f8cd a000 	str.w	sl, [sp]
 80095b8:	464b      	mov	r3, r9
 80095ba:	aa03      	add	r2, sp, #12
 80095bc:	4621      	mov	r1, r4
 80095be:	4640      	mov	r0, r8
 80095c0:	f7ff fee2 	bl	8009388 <_printf_common>
 80095c4:	3001      	adds	r0, #1
 80095c6:	d14c      	bne.n	8009662 <_printf_i+0x1fe>
 80095c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095cc:	b004      	add	sp, #16
 80095ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095d2:	4835      	ldr	r0, [pc, #212]	; (80096a8 <_printf_i+0x244>)
 80095d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80095d8:	6829      	ldr	r1, [r5, #0]
 80095da:	6823      	ldr	r3, [r4, #0]
 80095dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80095e0:	6029      	str	r1, [r5, #0]
 80095e2:	061d      	lsls	r5, r3, #24
 80095e4:	d514      	bpl.n	8009610 <_printf_i+0x1ac>
 80095e6:	07df      	lsls	r7, r3, #31
 80095e8:	bf44      	itt	mi
 80095ea:	f043 0320 	orrmi.w	r3, r3, #32
 80095ee:	6023      	strmi	r3, [r4, #0]
 80095f0:	b91e      	cbnz	r6, 80095fa <_printf_i+0x196>
 80095f2:	6823      	ldr	r3, [r4, #0]
 80095f4:	f023 0320 	bic.w	r3, r3, #32
 80095f8:	6023      	str	r3, [r4, #0]
 80095fa:	2310      	movs	r3, #16
 80095fc:	e7b0      	b.n	8009560 <_printf_i+0xfc>
 80095fe:	6823      	ldr	r3, [r4, #0]
 8009600:	f043 0320 	orr.w	r3, r3, #32
 8009604:	6023      	str	r3, [r4, #0]
 8009606:	2378      	movs	r3, #120	; 0x78
 8009608:	4828      	ldr	r0, [pc, #160]	; (80096ac <_printf_i+0x248>)
 800960a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800960e:	e7e3      	b.n	80095d8 <_printf_i+0x174>
 8009610:	0659      	lsls	r1, r3, #25
 8009612:	bf48      	it	mi
 8009614:	b2b6      	uxthmi	r6, r6
 8009616:	e7e6      	b.n	80095e6 <_printf_i+0x182>
 8009618:	4615      	mov	r5, r2
 800961a:	e7bb      	b.n	8009594 <_printf_i+0x130>
 800961c:	682b      	ldr	r3, [r5, #0]
 800961e:	6826      	ldr	r6, [r4, #0]
 8009620:	6961      	ldr	r1, [r4, #20]
 8009622:	1d18      	adds	r0, r3, #4
 8009624:	6028      	str	r0, [r5, #0]
 8009626:	0635      	lsls	r5, r6, #24
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	d501      	bpl.n	8009630 <_printf_i+0x1cc>
 800962c:	6019      	str	r1, [r3, #0]
 800962e:	e002      	b.n	8009636 <_printf_i+0x1d2>
 8009630:	0670      	lsls	r0, r6, #25
 8009632:	d5fb      	bpl.n	800962c <_printf_i+0x1c8>
 8009634:	8019      	strh	r1, [r3, #0]
 8009636:	2300      	movs	r3, #0
 8009638:	6123      	str	r3, [r4, #16]
 800963a:	4615      	mov	r5, r2
 800963c:	e7ba      	b.n	80095b4 <_printf_i+0x150>
 800963e:	682b      	ldr	r3, [r5, #0]
 8009640:	1d1a      	adds	r2, r3, #4
 8009642:	602a      	str	r2, [r5, #0]
 8009644:	681d      	ldr	r5, [r3, #0]
 8009646:	6862      	ldr	r2, [r4, #4]
 8009648:	2100      	movs	r1, #0
 800964a:	4628      	mov	r0, r5
 800964c:	f7f6 fdc8 	bl	80001e0 <memchr>
 8009650:	b108      	cbz	r0, 8009656 <_printf_i+0x1f2>
 8009652:	1b40      	subs	r0, r0, r5
 8009654:	6060      	str	r0, [r4, #4]
 8009656:	6863      	ldr	r3, [r4, #4]
 8009658:	6123      	str	r3, [r4, #16]
 800965a:	2300      	movs	r3, #0
 800965c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009660:	e7a8      	b.n	80095b4 <_printf_i+0x150>
 8009662:	6923      	ldr	r3, [r4, #16]
 8009664:	462a      	mov	r2, r5
 8009666:	4649      	mov	r1, r9
 8009668:	4640      	mov	r0, r8
 800966a:	47d0      	blx	sl
 800966c:	3001      	adds	r0, #1
 800966e:	d0ab      	beq.n	80095c8 <_printf_i+0x164>
 8009670:	6823      	ldr	r3, [r4, #0]
 8009672:	079b      	lsls	r3, r3, #30
 8009674:	d413      	bmi.n	800969e <_printf_i+0x23a>
 8009676:	68e0      	ldr	r0, [r4, #12]
 8009678:	9b03      	ldr	r3, [sp, #12]
 800967a:	4298      	cmp	r0, r3
 800967c:	bfb8      	it	lt
 800967e:	4618      	movlt	r0, r3
 8009680:	e7a4      	b.n	80095cc <_printf_i+0x168>
 8009682:	2301      	movs	r3, #1
 8009684:	4632      	mov	r2, r6
 8009686:	4649      	mov	r1, r9
 8009688:	4640      	mov	r0, r8
 800968a:	47d0      	blx	sl
 800968c:	3001      	adds	r0, #1
 800968e:	d09b      	beq.n	80095c8 <_printf_i+0x164>
 8009690:	3501      	adds	r5, #1
 8009692:	68e3      	ldr	r3, [r4, #12]
 8009694:	9903      	ldr	r1, [sp, #12]
 8009696:	1a5b      	subs	r3, r3, r1
 8009698:	42ab      	cmp	r3, r5
 800969a:	dcf2      	bgt.n	8009682 <_printf_i+0x21e>
 800969c:	e7eb      	b.n	8009676 <_printf_i+0x212>
 800969e:	2500      	movs	r5, #0
 80096a0:	f104 0619 	add.w	r6, r4, #25
 80096a4:	e7f5      	b.n	8009692 <_printf_i+0x22e>
 80096a6:	bf00      	nop
 80096a8:	08009f8a 	.word	0x08009f8a
 80096ac:	08009f9b 	.word	0x08009f9b

080096b0 <__retarget_lock_acquire_recursive>:
 80096b0:	4770      	bx	lr

080096b2 <__retarget_lock_release_recursive>:
 80096b2:	4770      	bx	lr

080096b4 <memcpy>:
 80096b4:	440a      	add	r2, r1
 80096b6:	4291      	cmp	r1, r2
 80096b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80096bc:	d100      	bne.n	80096c0 <memcpy+0xc>
 80096be:	4770      	bx	lr
 80096c0:	b510      	push	{r4, lr}
 80096c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096ca:	4291      	cmp	r1, r2
 80096cc:	d1f9      	bne.n	80096c2 <memcpy+0xe>
 80096ce:	bd10      	pop	{r4, pc}

080096d0 <memmove>:
 80096d0:	4288      	cmp	r0, r1
 80096d2:	b510      	push	{r4, lr}
 80096d4:	eb01 0402 	add.w	r4, r1, r2
 80096d8:	d902      	bls.n	80096e0 <memmove+0x10>
 80096da:	4284      	cmp	r4, r0
 80096dc:	4623      	mov	r3, r4
 80096de:	d807      	bhi.n	80096f0 <memmove+0x20>
 80096e0:	1e43      	subs	r3, r0, #1
 80096e2:	42a1      	cmp	r1, r4
 80096e4:	d008      	beq.n	80096f8 <memmove+0x28>
 80096e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096ee:	e7f8      	b.n	80096e2 <memmove+0x12>
 80096f0:	4402      	add	r2, r0
 80096f2:	4601      	mov	r1, r0
 80096f4:	428a      	cmp	r2, r1
 80096f6:	d100      	bne.n	80096fa <memmove+0x2a>
 80096f8:	bd10      	pop	{r4, pc}
 80096fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80096fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009702:	e7f7      	b.n	80096f4 <memmove+0x24>

08009704 <_realloc_r>:
 8009704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009708:	4680      	mov	r8, r0
 800970a:	4614      	mov	r4, r2
 800970c:	460e      	mov	r6, r1
 800970e:	b921      	cbnz	r1, 800971a <_realloc_r+0x16>
 8009710:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009714:	4611      	mov	r1, r2
 8009716:	f7ff bc11 	b.w	8008f3c <_malloc_r>
 800971a:	b92a      	cbnz	r2, 8009728 <_realloc_r+0x24>
 800971c:	f7ff fba2 	bl	8008e64 <_free_r>
 8009720:	4625      	mov	r5, r4
 8009722:	4628      	mov	r0, r5
 8009724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009728:	f000 f81b 	bl	8009762 <_malloc_usable_size_r>
 800972c:	4284      	cmp	r4, r0
 800972e:	4607      	mov	r7, r0
 8009730:	d802      	bhi.n	8009738 <_realloc_r+0x34>
 8009732:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009736:	d812      	bhi.n	800975e <_realloc_r+0x5a>
 8009738:	4621      	mov	r1, r4
 800973a:	4640      	mov	r0, r8
 800973c:	f7ff fbfe 	bl	8008f3c <_malloc_r>
 8009740:	4605      	mov	r5, r0
 8009742:	2800      	cmp	r0, #0
 8009744:	d0ed      	beq.n	8009722 <_realloc_r+0x1e>
 8009746:	42bc      	cmp	r4, r7
 8009748:	4622      	mov	r2, r4
 800974a:	4631      	mov	r1, r6
 800974c:	bf28      	it	cs
 800974e:	463a      	movcs	r2, r7
 8009750:	f7ff ffb0 	bl	80096b4 <memcpy>
 8009754:	4631      	mov	r1, r6
 8009756:	4640      	mov	r0, r8
 8009758:	f7ff fb84 	bl	8008e64 <_free_r>
 800975c:	e7e1      	b.n	8009722 <_realloc_r+0x1e>
 800975e:	4635      	mov	r5, r6
 8009760:	e7df      	b.n	8009722 <_realloc_r+0x1e>

08009762 <_malloc_usable_size_r>:
 8009762:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009766:	1f18      	subs	r0, r3, #4
 8009768:	2b00      	cmp	r3, #0
 800976a:	bfbc      	itt	lt
 800976c:	580b      	ldrlt	r3, [r1, r0]
 800976e:	18c0      	addlt	r0, r0, r3
 8009770:	4770      	bx	lr
	...

08009774 <_init>:
 8009774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009776:	bf00      	nop
 8009778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800977a:	bc08      	pop	{r3}
 800977c:	469e      	mov	lr, r3
 800977e:	4770      	bx	lr

08009780 <_fini>:
 8009780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009782:	bf00      	nop
 8009784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009786:	bc08      	pop	{r3}
 8009788:	469e      	mov	lr, r3
 800978a:	4770      	bx	lr
